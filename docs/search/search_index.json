{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello!","text":"<p>Welcome to my Earth Engine primer!</p> <p>These materials aim to help undergraduate students in Geography and Environmental Studies learn geospatial methods for investigating the global environment. While most of the lessons introduce methods and workflows in Google Earth Engine, I also show students around QGIS and how to move between the two platforms. The ultimate goal of the materials is to help students learn timeless concepts of geospatial analysis that transcend specific software platforms. That is the goal at least. </p> <p>I use the materials to teach undergraduates at Middlebury College (Vermont, USA) and revise the materials every fall semester while teaching. This means that I scrub the site in September and then publish revised materials each week through December.  </p> <p>Please contact me if you have any questions. </p> <p>Jeff Howarth Associate Professor of Geography Middlebury College, Middlebury, Vermont, USA jhowarth@middlebury.edu </p> <p>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p>"},{"location":"intro/gee_gui/","title":"GEE User Interface","text":""},{"location":"intro/gee_gui/#introduction","title":"Introduction","text":"<p>In this course, we will work with Google Earth Engine via the GEE Code Editor. The tutorial below provides an overview of the different components of the Code Editor\u2019s graphical user interface (GUI).   </p>"},{"location":"intro/gee_gui/#tutorial","title":"Tutorial","text":"<p>I split this tutorial into separate videos. If I show code in the video, you can find the snippets below each video.  </p> <p>To follow along with the videos, you will need to open the GEE Code Editor in a web browser. Please see the previous tutorial if you forget how to access the editor. </p>"},{"location":"intro/gee_gui/#explore-the-map-interface","title":"Explore the map interface.","text":""},{"location":"intro/gee_gui/#write-a-header","title":"Write a header.","text":"<pre><code>//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  Name:     gee_ui.js \n//  Author:   Jeff Howarth\n//  Date:     9/7/2023 \n//  Purpose:  Introduce Earth Engine Graphical User Interface (Code Editor)\n//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  \n</code></pre>"},{"location":"intro/gee_gui/#center-map-and-set-zoom-level","title":"Center map and set zoom level.","text":"<pre><code>//  Center and set zoom level the map.\n\nMap.setCenter(\n-50,                  // Longitude\n40,                  // Latitude\n3                    // Zoom level\n)\n;\n</code></pre>"},{"location":"intro/gee_gui/#set-the-default-base-map","title":"Set the default base map.","text":"<pre><code>//  Set the default base map. \n\nMap.setOptions('SATELLITE');\n</code></pre>"},{"location":"intro/gee_gui/#load-lst-module","title":"Load LST module.","text":"<pre><code>//  Load module\n\nvar tool = require('users/jhowarth/eePrimer:modules/modis_lst_demo.js');\n\n// You can then call functions in the module as methods of this object.\n\ntool.makeMap();\n</code></pre>"},{"location":"intro/gee_gui/#inspect-data","title":"Inspect data.","text":"<pre><code>// Print info about map layers. \n\nprint(\"Layers on this map:\", Map.layers());\n</code></pre> <p>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p>"},{"location":"intro/js101/","title":"Javascript 101","text":""},{"location":"intro/js101/#introduction","title":"Introduction","text":"<p>To use GEE, you will need to write code.    </p> <p>In this course, we will use the GEE Code Editor, which means that we will be coding in JavaScript.    </p>"},{"location":"intro/js101/#tutorial","title":"Tutorial","text":"<p>I made the videos below to help walk you through through some basic JavaScript syntax, data types, and methods. I broke the tutorial into a set of short videos, rather than recording one long one. You should work through all the videos in the set.     </p> <p>To follow along, you will need to open the GEE Code Editor in a web browser.  </p> <p>I recommend that you use Google Chrome when working with the GEE Code Editor.     </p> <p>This is the web address to the Code Editor: </p> <p>https://code.earthengine.google.com/</p> <p>Honestly, you might as well bookmark that page and move the bookmark to the left corner of your toolbar. You will be visiting this site a lot over the semester.  </p> <p>Below the video, you should find snippets for the code shown in the video. If you hover your cursor over the upper-right corner of the snippet, you should see a little button that you can click to copy the code. You can then paste the code into the Code Editor while you watch the video. My intention is to save you some time and reduce errors that come from typos.  </p>"},{"location":"intro/js101/#quick-tour","title":"Quick tour","text":""},{"location":"intro/js101/#new-repo-save-file","title":"New Repo, Save File","text":""},{"location":"intro/js101/#data-types-1","title":"Data types (1)","text":""},{"location":"intro/js101/#line-comment","title":"Line Comment","text":"<pre><code>// This is a line comment. \n</code></pre>"},{"location":"intro/js101/#string","title":"String","text":"<pre><code>'Hello, world'  // Single quotes defines a string. \n</code></pre>"},{"location":"intro/js101/#variable","title":"Variable","text":"<pre><code>// Use var keyword to define a variable to store data. \n\nvar hello = 'Hello, world!' // This variable stores a string. \n</code></pre>"},{"location":"intro/js101/#semi-colon","title":"Semi-colon","text":"<pre><code>// End statements with semi-colons so that the editor does not complain.\n\nvar hello_again = 'Hola Mundo';\n</code></pre>"},{"location":"intro/js101/#double-quotes","title":"Double quotes","text":"<pre><code>// You can also define strings with double quotes. \n\nvar who_dat = \"Who's there?\";\n</code></pre>"},{"location":"intro/js101/#parentheses","title":"Parentheses","text":"<pre><code>// You can pass variables to functions within parentheses. \n\nprint(hello_again);\n</code></pre>"},{"location":"intro/js101/#comma","title":"Comma","text":"<pre><code>// You can pass more than one variable separated by commas.\n\nprint(hello_again, who_dat);\n</code></pre>"},{"location":"intro/js101/#data-types-2","title":"Data types (2)","text":""},{"location":"intro/js101/#number","title":"Number","text":"<pre><code>// This variable stores a number. \n\nvar year = 2023;\n</code></pre>"},{"location":"intro/js101/#list","title":"List","text":"<pre><code>// Square brackets defines a list. \n\nvar some_vt_towns = ['Middlebury', 'New Haven', 'Bristol'];\n</code></pre>"},{"location":"intro/js101/#index","title":"Index","text":"<pre><code>// Use square brackets after list object to call index of items in list.\n\nprint(some_vt_towns, some_vt_towns[0]);\n</code></pre>"},{"location":"intro/js101/#methods","title":"Methods","text":"<pre><code>// Use dot notation to call methods associated with the data type. \n\nprint(some_vt_towns.sort());\n</code></pre>"},{"location":"intro/js101/#data-types-3","title":"Data types (3)","text":""},{"location":"intro/js101/#dictionary","title":"Dictionary","text":"<pre><code>// Use curly brackets (or braces) to define dictionaries. \n\nvar midd = {\n\"name\": \"Middlebury\",  // Dictionaries are composed of key:value pairs.\n\"pop_2010\": 8496,\n\"pop_2020\": 9152\n};\n\nprint('Middlebury', midd);\n</code></pre>"},{"location":"intro/js101/#key-values","title":"Key values","text":"<pre><code>// Use dot notation to call the value of object key.  \n\nprint(midd.name);\n\nprint(\"Population change\", midd.pop_2020 - midd.pop_2010);\n</code></pre>"},{"location":"intro/js101/#data-types-4","title":"Data types (4)","text":""},{"location":"intro/js101/#functions","title":"Functions","text":"<pre><code>// Functions can be defined as a way to reuse code and make it easier to read.  \n\nvar i_love_function = function(some_string) {\nreturn 'I love ' + some_string + '!';\n};\n\nprint(i_love_function('maps'));\n</code></pre>"},{"location":"intro/js101/#modules","title":"Modules","text":"<pre><code>// Modules can be used to share functions across multiple scripts by:\n\n// 1. storing the module as a variable,\n\nvar tool = require('users/jhowarth/eePrimer:modules/tissot.js');\n\n// 2. calling functions in the module as methods of this variable.\n\ntool.drawTissot();\n</code></pre>"},{"location":"intro/js101/#mercator-distortion","title":"Mercator distortion","text":"<p>The True Size of</p> <p>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p>"},{"location":"intro/qgis_gui/","title":"QGIS User Interface","text":""},{"location":"intro/qgis_gui/#introduction","title":"Introduction","text":"<p>QGIS is a powerful desktop GIS, but also a labyrinth of point-and-clicks. This tutorial provides a very brief introduction to the graphical user interface (GUI).  </p>"},{"location":"intro/qgis_gui/#graphical-user-interface-gui","title":"Graphical User Interface (GUI)","text":""},{"location":"intro/qgis_gui/#working-with-a-project","title":"Working with a Project","text":""},{"location":"intro/qgis_gui/#add-a-google-basemap-layer","title":"Add a Google basemap layer","text":""},{"location":"intro/qgis_gui/#google-satellite","title":"Google satellite","text":"<pre><code>https://mt1.google.com/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}\n</code></pre>"},{"location":"intro/qgis_gui/#google-hybrid","title":"Google hybrid","text":"<pre><code>https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\n</code></pre>"},{"location":"intro/qgis_gui/#google-terrain","title":"Google terrain","text":"<pre><code>https://mt1.google.com/vt/lyrs=p&amp;x={x}&amp;y={y}&amp;z={z}\n</code></pre>"},{"location":"intro/qgis_gui/#google-map","title":"Google map","text":"<pre><code>https://mt1.google.com/vt/lyrs=m&amp;x={x}&amp;y={y}&amp;z={z}\n</code></pre>"},{"location":"intro/qgis_gui/#de-emphasized-road-map","title":"De-emphasized road map","text":"<pre><code>https://mt1.google.com/vt/lyrs=r&amp;x={x}&amp;y={y}&amp;z={z}\n</code></pre> <p>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p>"},{"location":"rudiments/hello_feature_collection/","title":"Hello Feature Collection","text":""},{"location":"rudiments/hello_feature_collection/#introduction","title":"Introduction","text":"<p>The videos below introduce geometry and feature objects in Google Earth Engine. They walk you through how to import a table as an asset and how to construct a feature from scratch in the Code Editor.  </p>"},{"location":"rudiments/hello_feature_collection/#start-a-new-script","title":"Start a new script","text":"<pre><code>// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  Hello Feature Collection\n//\n//  Jeff Howarth \n//  Geography 251\n//\n//  Oct 1, 2023\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>"},{"location":"rudiments/hello_feature_collection/#import-a-table-as-an-asset","title":"Import a table as an Asset","text":"<p>insert video</p>"},{"location":"rudiments/hello_feature_collection/#construct-collection-from-string","title":"Construct Collection from String","text":"<pre><code>graph LR\n  method[\"ee.FeatureCollection.()\"] --&gt; output&gt;output\\n\\nFEATURE COLLECTION];\n  arg_att([pathname\\n\\nSTRING]) --&gt; method\n\n  style method fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// --------------------------------------------------------------------------\n//  Construct Feature Collection from String (collection name). \n//\n//  Updated: 9/30/23\n// --------------------------------------------------------------------------\n\nvar hello_pond ;\n\nprint(\n'HELLO FEATURE COLLECTION:',\nhello_pond,\nhello_pond.size(),\nhello_pond.first()\n)\n;\n</code></pre>"},{"location":"rudiments/hello_feature_collection/#center-map-on-object","title":"Center map on Object","text":"<pre><code>// --------------------------------------------------------------------------\n//  Center Map on Object.\n//\n//  Updated: 9/30/23\n// -------------------------------------------------------------------------- \n\nMap.centerObject();\nMap.setOptions();\n</code></pre>"},{"location":"rudiments/hello_feature_collection/#add-feature-collection-as-map-layer","title":"Add Feature Collection as Map Layer","text":"<pre><code>// --------------------------------------------------------------------------\n//  Add Feature Collection as Map Layer.\n//\n//  Updated: 9/30/23\n// --------------------------------------------------------------------------\n\nMap.addLayer();\n</code></pre>"},{"location":"rudiments/hello_feature_collection/#create-a-geometry","title":"Create a geometry","text":"<pre><code>// --------------------------------------------------------------------------\n//  Create a Geometry.\n//\n//  Updated: 9/30/23\n// --------------------------------------------------------------------------\n\nprint(\n'Pond Geometry:',\ngeometry\n)\n;\n</code></pre>"},{"location":"rudiments/hello_feature_collection/#construct-a-feature","title":"Construct a feature","text":"<pre><code>graph LR\n  method[\"ee.Feature()\"] --&gt; output&gt;output\\n\\nFEATURE];\n  arg_geom([GEOMETRY]) --&gt; method;\n  arg_att([attributes\\n\\nDICTIONARY]) --&gt; method;\n\n  style method fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_geom fill:#FFD700,stroke-width:0px\n  style arg_att fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// --------------------------------------------------------------------------\n//  Construct a Feature.\n//\n//  Updated: 9/30/23\n// --------------------------------------------------------------------------\n\nvar pond_attributes ;\n\nvar pond_feature ;\n\nprint(\n\"HELLO POND FEATURE:\",\n\"geometry:\", geometry,\n\"attributes:\", pond_attributes,\n\"feature:\", pond_feature\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"rudiments/hello_feature_collection/#convert-feature-collection-into-an-image","title":"Convert feature collection into an image","text":"<pre><code>graph LR\n  input[/input\\n\\nFEATURE COLLECTION/] --&gt; method[\".reduceToImage()\"]\n  method --&gt; output&gt;output\\n\\nIMAGE];\n  arg_att1([property key\\n\\nSTRING]) --&gt; method;\n  arg_att2([\"ee.Reducer()\"]) --&gt; method;\n\n  style input fill:#FFD700,stroke-width:0px\n  style method fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#DCDCDC,stroke-width:0px\n  style arg_att2 fill:#ADD8E6,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  Convert feature collection into an image. \n//\n//  Updated: 10/01/23\n// ---------------------------------------------------------------------------\n\nvar pond_feature_collection ;\n\nvar pond_image ;\n\nprint(\n\"HELLO POND IMAGE:\", pond_image\n)\n;\n\nMap.addLayer();\n</code></pre> <p>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p>"},{"location":"rudiments/hello_vector/","title":"Hello Vector","text":""},{"location":"rudiments/hello_vector/#introduction","title":"Introduction","text":"<p>This tutorial introduces the vector data model with QGIS. It walks you through a simple task of creating and populating a vector table stored as a shapefile, and aims to get you thinking about relationships between detail, accuracy, map scale, and mapping purpose.  </p>"},{"location":"rudiments/hello_vector/#create-a-new-shapefile","title":"Create a new shapefile","text":""},{"location":"rudiments/hello_vector/#digitize-a-feature","title":"Digitize a feature","text":""},{"location":"rudiments/hello_vector/#add-a-new-field","title":"Add a new field","text":""},{"location":"rudiments/hello_vector/#display-by-attribute","title":"Display by attribute","text":"<p>Please note: I edited this video in YouTube Studio this morning (9/28) so that it should now end at 7:15 mark. Sometimes Studio takes some time to process edits, so if the video served to you keeps going after 7:15, you are welcome to stop it and move onto next one. Thanks. </p>"},{"location":"rudiments/hello_vector/#under-the-shapefile-hood","title":"Under the shapefile hood","text":""},{"location":"rudiments/hello_vector/#deliverable","title":"Deliverable","text":"<p>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p>"},{"location":"toolbox/GEE/","title":"Google Earth Engine","text":""},{"location":"toolbox/GEE/#introduction","title":"Introduction","text":"<p>Google Earth Engine (GEE) is cloud-based geographic information system (GIS) that is (currently) free to use for educational and research purposes. We will be using GEE for most of the heavy lifting in this course: accessing large datasets, crunching them in computational workflows, and visualizing them with web maps. The lovely thing about GEE is that all of this work gets done on Google\u2019s servers in the cloud. All you will need to work with GEE is a web browser, preferably Google Chrome, and a decent internet connection. All you need to do is sign up for the Google Earth Engine cloud service. </p> <p>Please complete the steps below on the first day of class (or 24 hours before our first lab meeting). </p>"},{"location":"toolbox/GEE/#sign-up-for-earth-engine","title":"Sign up for Earth Engine","text":"<ol> <li> <p>Go to the bottom of the Google Earth Engine page and click \u2018Sign Up Now\u2019.</p> <p></p> </li> <li> <p>You want to sign up for a noncommercial cloud project. The next page will likely only show one option, so go ahead and click that.</p> <p></p> </li> <li> <p>As a student, you do not have to pay for your use of Earth Engine. So click \u2018Unpaid usage\u2019 and then select \u2018Academic and Research\u2019 from the pull-down options. Click \u2018Next\u2019 to move on.   </p> <p></p> </li> <li> <p>You should create a new Google Cloud Project. You can try doing this under the middlebury.edu organization. Your user name should be \u2018ee-your-midd-email-address-name\u2019 with no spaces. For example, \u2018ee-jhowarth\u2019. Then click \u2018Continue to Summary\u2019.    </p> <p></p> </li> <li> <p>Affirm the summary to finalize the project. </p> </li> <li> <p>It may take a little time for you to receive approval. When you are successful, you should be able to open the Code Editor and get to a page that looks similar to the one below. </p> <p></p> </li> </ol>"},{"location":"toolbox/QGIS/","title":"QGIS","text":""},{"location":"toolbox/QGIS/#introduction","title":"Introduction","text":"<p>QGIS is a free, open-source, and powerful geographic information system (GIS). We will be using QGIS for some light lifting in this course: mostly data visualization and layouts. Because QGIS is free and powerful, I would like you to know your way around it and be comfortable moving data from GEE to QGIS and vice versa. </p> <p>Unlike GEE, QGIS is a desktop GIS, which means in most cases the program needs to be installed on a local computer. All of the workstations in the Geography Department computer lab have QGIS installed, so you can use any of these computers to complete course work that requires QGIS. It will be far more convenient for you to keep up with the study materials in this course, however, if you install QGIS on your laptop. It\u2019s free and the software runs on both a Mac and Windows.  </p> <p>Please complete the steps below before our first lab meeting.</p>"},{"location":"toolbox/QGIS/#install-qgis-for-first-time","title":"Install QGIS for first time","text":"<ol> <li>Go to QGIS home page. </li> <li>Click \u2018Download Now\u2019. </li> <li>Choose your Operating System. This will start the download, which may take some time to finish.  </li> <li>Double-click the downloaded installer and follow the directions.  </li> </ol> <p>If on a Mac, after installation is complete: </p> <ol> <li>Navigate to application folder.</li> <li>Right-click on QGIS app.</li> <li>Select \u2018Open\u2019. </li> <li>You will see a warning that you have downloaded the app from the internet and questioning whether you trust the source. Affirm. </li> </ol> <p>After you have told your OS to trust the app, you can open the app through Spotlight in the future.  </p>"},{"location":"toolbox/QGIS/#on-updating-your-qgis-version","title":"On updating your QGIS version","text":"<p>If you have installed QGIS recently (2022-2023), you should be fine. </p> <p>We will be using GEE for most of the heavy lifting in this course and will largely use QGIS for some visualization and layout tasks. My QGIS demos will use 3.32.2-Lima (accessed 9.6.23), but it is ok if your version predates this a little. </p> <p>If you want to update your version, I tend to first remove the existing version and then install the new version. </p>"},{"location":"workflows/grassland_bird_habitat/","title":"Grassland bird habitat","text":""},{"location":"workflows/grassland_bird_habitat/#introduction","title":"Introduction","text":"<p>This tutorial aims to answer the question:  </p> <p>In 2016, where was the best potential habitat for grassland birds in the Champlain Valley that was owned by Middlebury College?</p> <p>To answer this question, we will develop a model based on these guidelines developed by the Vermont Agency of Natural Resources.  </p>"},{"location":"workflows/grassland_bird_habitat/#background","title":"Background","text":"<p>The Bobolink (Dolichonyx oryzivorus) is grassland bird species with a bubbling song and a remarkable life cycle. Bobolinks winter in South America, primarily Paraguay, Argentina, and Bolivia. In the spring, they migrate back to their breeding habitats in North America, including grassland habitat here in the Champlain Valley. Interestingly, Bobolinks seem to have a remarkable spatial memory and sense of place; they tend to return to the same specific field each summer to breed and research indicates that this \u201csite fidelity\u201d improves breeding success. </p> <p></p> <p>source: iNaturalist</p> <p>Bobolinks are also an interesting example of a \u201cnew native\u201d species. During Abenaki times, Bobolinks did not breed in Vermont, because there was very little grassland habitat for them to do so. Open, grassy habitat was uncommon in what we now call the Champlain Valley; the landscape here was largely forested, save for the margins of water bodies and places where Abekai cultivated crops or set fires at a frequency that prevented trees from growing. Following the American Revolution, white migrants appropriated Abenaki lands in the Champlain Valley and pitched farms, claiming the land by clearing it of trees. This created large expanses of open habitat in the formerly forested landscape. Bobolinks soon colonized this new habitat, migrating from native breeding territories on the midwestern prairies of North America.  </p> <p>Today, Vermont plays an important role in the conservation of Bobolinks and other native North American grassland species. Since the 1940s, breeding populations of Bobolinks have significantly declined across North America, primarily from habitat loss caused by both changes in agricultural practices and the conversion of agricultural land into other land uses. </p> <p>This tutorial develops a model with Earth Engine to identify where Middlebury College owns land that could contribute to the conservation of native North American grassland bird species by protecting the open structure of the habitat and working with farmers to adapt land use practices that do not conflict with breeding cycles of grassland birds.   </p>"},{"location":"workflows/grassland_bird_habitat/#criteria","title":"Criteria","text":"<p>According to the ANR guidelines, the best potential habitat for Bobolink and other grassland bird species should meet the following criteria: </p> <ol> <li>Open land cover (grass/shrub, water, bare);</li> <li>Buffered from the edge, or with a core area that is at least 50 meters from closed habitat structure (tree canopy) or developed land (roads, buildings, pavement, etc);  </li> <li>Large, or at least 20 acres in area;</li> <li>With a large interior, or a perimeter-area ratio of 0.015 or less. </li> </ol>"},{"location":"workflows/grassland_bird_habitat/#start-a-new-script","title":"Start a new script","text":"<pre><code>// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n//  Grassland bird habitat on Middlebury College Lands in Champlain Valley. \n//  \n//  Jeff Howarth \n//  Sept 30, 2023\n//\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#1-load-feature-collection-and-filter-by-attribute","title":"1. Load feature collection and filter by attribute","text":"<pre><code>graph TD\n  method1[\"ee.FeatureCollection()\"] ;\n  arg_att1([pathname\\n\\nSTRING]) --&gt; method1;\n\n  method1 --&gt; method2[\".filter()\"];\n  method2 --&gt; method3[\"ee.Filter.eq()\"];\n\n  method3 --&gt; output&gt;output\\n\\nFEATURE COLLECTION];\n\n  arg_att2([property key\\n\\nSTRING]) --&gt; method3;\n  arg_att3([value\\n\\nSTRING]) --&gt; method3;\n\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style method2 fill:#ADD8E6,stroke-width:0px\n  style method3 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#DCDCDC,stroke-width:0px\n  style arg_att2 fill:#DCDCDC,stroke-width:0px\n  style arg_att3 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  1. Load feature collection and filter by attribute.\n//\n//  Isolate Champlain Lowlands.\n// ---------------------------------------------------------------------------\n\nvar region ;\n\nprint(\n\"STEP 1:\",\nregion.first(),\nregion.size(),\nregion.aggregate_array(\"US_L4NAME\").distinct().sort()\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#2-load-feature-collection-and-filter-by-location","title":"2. Load feature collection and filter by location","text":"<pre><code>graph TD\n  method1[\"ee.FeatureCollection()\"] ;\n  arg_att1([path name\\n\\nSTRING]) --&gt; method1;\n\n  method1 --&gt; method2[\".filterBounds()\"];\n  method2 --&gt; output&gt;output\\n\\nFEATURE COLLECTION];\n\n  arg_att2([target\\n\\nGEOMETRY or FEATURE]) --&gt; method2;\n\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style method2 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#DCDCDC,stroke-width:0px\n  style arg_att2 fill:#FFD700,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  2. Load feature collection and filter by location,\n//\n//  Isolate College Lands in Champlain Valley.\n// ---------------------------------------------------------------------------\n\nvar college_lands ;\n\nprint(\n\"STEP 2:\",\ncollege_lands.size(),\ncollege_lands.first()\n)\n;\n\nMap.centerObject();\nMap.setOptions();\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#3-define-study-region","title":"3. Define study region","text":"<pre><code>graph TD\n  input[/input\\n\\nFEATURE COLLECTION/] --&gt; method1[\".union()\"] ;\n\n  method1 --&gt; method2[\".geometry()\"];\n  method2 --&gt; method3[\".bounds()\"];\n  method3 --&gt; method4[\".buffer()\"]\n  method4 --&gt; output&gt;output\\n\\nFEATURE COLLECTION];\n\n  arg_att1([maxError\\n\\nNUMBER]) --&gt; method1 ;\n  arg_att2([maxError\\n\\nNUMBER])  --&gt; method3 ;\n  arg_att3([distance\\n\\nNUMBER])  --&gt; method4 ;\n  arg_att4([maxError\\n\\nNUMBER])  --&gt; method4 ;\n\n\n  style input fill:#FFD700,stroke-width:0px\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style method2 fill:#ADD8E6,stroke-width:0px\n  style method3 fill:#ADD8E6,stroke-width:0px\n  style method4 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#DCDCDC,stroke-width:0px\n  style arg_att2 fill:#DCDCDC,stroke-width:0px\n  style arg_att3 fill:#DCDCDC,stroke-width:0px\n  style arg_att4 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n// 3. Define study region\n// ---------------------------------------------------------------------------\n\nvar bounds ;\n\nprint(\n\"STEP 3:\",\nbounds\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#4-load-land-cover-for-vermont","title":"4. Load land cover for Vermont","text":"<pre><code>graph LR\n  method1[\"ee.Image()\"] ;\n  arg_att1([pathname\\n\\nSTRING]) --&gt; method1;\n  method1 --&gt; output&gt;output\\n\\nIMAGE];\n\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  4. Load an image\n//\n//  Import land cover image for Vermont.\n// ---------------------------------------------------------------------------\n\nvar lc ;\n\nvar lc_viz = {\nmin: 1,\nmax: 8,\npalette: [\n'#ABD998',    //   1. Tree Canopy  \n'#EBF09C',    //   2. Grass/Shrub \n'#f7f7f7',    //   3. Bare soil\n'#95E6D5',    //   4. Water\n'#525252',    //   5. Buildings    \n'#F7F7F7',    //   6. Roads\n'#cccccc',    //   7. 0ther pavement\n'#F7F7F7',    //   8. Railroads  \n]\n};\n\nprint(\n\"STEP 4:\", lc,\nlc.projection()\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#5-reclassify-an-image","title":"5. Reclassify an image","text":"<pre><code>graph LR\n  input[/input\\n\\nIMAGE/] --&gt; method1[\".remap()\"] ;\n  arg_att1([old values\\n\\nLIST]) --&gt; method1;\n  arg_att2([new values\\n\\nLIST]) --&gt; method1;\n  method1 --&gt; output&gt;output\\n\\nIMAGE];\n\n  style input fill:#FFD700,stroke-width:0px\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#DCDCDC,stroke-width:0px\n  style arg_att2 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  5. Reclassify an image\n//\n//  Make a binary image of grasslands.  \n// ---------------------------------------------------------------------------\n\nvar lc_binary ;\n\nprint(\n\"STEP 5:\",\nlc_binary,\nlc_binary.projection()\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#6-clip-image-by-region","title":"6. Clip image by region","text":"<pre><code>graph LR\n  input[/input\\n\\nIMAGE/] --&gt; method1[\".clip()\"] ;\n  arg_att1([region or aoi\\n\\nGEOMETRY, FEATURE or\\nFEATURE COLLECTION]) --&gt; method1;\n  method1 --&gt; output&gt;output\\n\\nIMAGE];\n\n  style input fill:#FFD700,stroke-width:0px\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  6. Clip image by region\n//\n//  Isolate grasslands in study region. \n// ---------------------------------------------------------------------------\n\nvar lc_binary_bounds ;\n\nprint(\n\"STEP 6:\",\nlc_binary_bounds,\nlc_binary_bounds.projection()\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#7-select-if-equals-a-value","title":"7. Select if equals a value","text":"<pre><code>graph LR\n  input[/input\\n\\nIMAGE/] --&gt; method1[\".eq()\"] ;\n  arg_att1([value\\n\\nNUMBER]) --&gt; method1;\n  method1 --&gt; output&gt;output\\n\\nIMAGE];\n\n  style input fill:#FFD700,stroke-width:0px\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  7. Select by equality\n//\n//  Invert the grassland binary. \n// ---------------------------------------------------------------------------\n\nvar invert_binary ;\n\nprint(\n\"STEP 7:\",\ninvert_binary,\ninvert_binary.projection()\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#8-compute-distance","title":"8. Compute distance","text":"<pre><code>graph TB\n  input[/input\\n\\nIMAGE/] --&gt; method1[\".distance()\"] ;\n  method1 --&gt; method2([\"ee.Kernel.euclidean()\"])\n  arg_att1([radius\\n\\nNUMBER]) --&gt; method2;\n  arg_att2([units\\n\\nSTRING]) --&gt; method2;\n  method2 --&gt; method3[\".reproject()\"]\n  arg_att3([crs\\n\\nSTRING]) --&gt; method3;\n  method3 --&gt; method4(\".unmask()\")\n  arg_att4([value\\n\\nNUMBER]) --&gt; method4;\n  method4 --&gt; output&gt;output\\n\\nIMAGE];\n\n  style input fill:#FFD700,stroke-width:0px\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style method2 fill:#ADD8E6,stroke-width:0px\n  style method3 fill:#ADD8E6,stroke-width:0px\n  style method4 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#DCDCDC,stroke-width:0px\n  style arg_att2 fill:#DCDCDC,stroke-width:0px\n  style arg_att3 fill:#DCDCDC,stroke-width:0px\n  style arg_att4 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  8. Compute distance \n//\n//  Calculate distance from edge of grasslands towards interior\n// ---------------------------------------------------------------------------\n\nvar crs = \"EPSG: 32145\"; // Vermont State Plane North American Datum 1983\n\nvar grassland_distance ;\n\nprint(\n\"Step 8:\",\ngrassland_distance,\ngrassland_distance.projection()\n)\n;\n\n// Here is a nice palette that looks good for distance when you reverse it.\n\nvar inferno = [\"#000004\", \"#320A5A\", \"#781B6C\", \"#BB3654\", \"#EC6824\", \"#FBB41A\", \"#FCFFA4\"].reverse();\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#9-select-by-a-threshold-value","title":"9. Select by a threshold value","text":"<pre><code>graph LR\n  input[/input\\n\\nIMAGE/] --&gt; method1[\".gt()\"] ;\n  arg_att1([value\\n\\nNUMBER]) --&gt; method1;\n  method1 --&gt; output&gt;output\\n\\nIMAGE];\n\n  style input fill:#FFD700,stroke-width:0px\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  9. Select by threshold value \n//\n//  Isolate all pixels that are greater than 50 meters from grassland edge. \n// ---------------------------------------------------------------------------\n\nvar grassland_cores ;\n\nprint(\n\"Step 7.3:\",\ngrassland_cores,\ngrassland_cores.projection()\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#10-zonal-overlay","title":"10. Zonal overlay","text":"<pre><code>graph LR\n  input[/\"input 'dough'\"\\n\\nIMAGE/] --&gt; method1[\".reduceRegions()\"] ;\n  arg_att1([\"collection 'cutter'\"\\n\\nFEATURE COLLECTION]) --&gt; method1;\n  arg_att2([reducer\\n\\nREDUCER]) --&gt; method1;\n  arg_att3([scale\\n\\nNUMBER]) --&gt; method1;\n  arg_att4([crs\\n\\nSTRING]) --&gt; method1;\n  method1 --&gt; output&gt;output\\n\\nIMAGE];\n\n  style input fill:#FFD700,stroke-width:0px\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#FFD700,stroke-width:0px\n  style arg_att2 fill:#ADD8E6,stroke-width:0px\n  style arg_att3 fill:#DCDCDC,stroke-width:0px\n  style arg_att4 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  10. Zonal overlay \n//\n//  Find college parcels that overlap core grassland habitat. \n// ---------------------------------------------------------------------------\n\nvar college_with_core ;\n\nvar college_with_core_filter ;\n\nprint(\n\"STEP 8:\",\ncollege_with_core.size(),\ncollege_with_core_filter.size()\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#11-mask-an-image","title":"11. Mask an image.","text":"<p>Case 1: to use an image to mask another image.</p> <pre><code>graph LR\n  input[/input\\n\\nIMAGE/] --&gt; method1[\".updateMask()\"] ;\n  arg_att1([mask\\n\\nIMAGE]) --&gt; method1;\n  method1 --&gt; output&gt;output\\n\\nIMAGE];\n\n  style input fill:#FFD700,stroke-width:0px\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#FFD700,stroke-width:0px</code></pre> <p>Case 2: to use an image to mask itself:  </p> <pre><code>graph LR\n  input[/input\\n\\nIMAGE/] --&gt; method1[\".selfMask()\"] ;\n  method1 --&gt; output&gt;output\\n\\nIMAGE];\n\n  style input fill:#FFD700,stroke-width:0px\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  11. Mask an image\n//\n//  Ignore all pixels that are not grasslands. \n// ---------------------------------------------------------------------------\n\nvar grassland_cores_masked;      // First show them it could be updateMask.\n\nprint(\n\"STEP 11:\",\ngrassland_cores_masked,\ngrassland_cores_masked.projection()\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#12-make-objects","title":"12. Make objects","text":"<pre><code>graph LR\n  input[/input\\n\\nIMAGE/] --&gt; method1[\".reduceToVectors()\"] ;\n  method1 --&gt; output&gt;output\\n\\nIMAGE];\n\n  arg_att1([reducer\\n\\nREDUCER]) --&gt; method1;\n  arg_att2([geometry\\n\\nGEOMETRY]) --&gt; method1;\n  arg_att3([scale\\n\\nNUMBER]) --&gt; method1;\n  arg_att4([geometryType\\n\\nSTRING]) --&gt; method1;\n  arg_att5([eightConnected\\n\\nBOOLEAN]) --&gt; method1;\n  arg_att6([maxPixels\\n\\nNUMBER]) --&gt; method1;\n\n  style input fill:#FFD700,stroke-width:0px\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n\n  style arg_att1 fill:#ADD8E6,stroke-width:0px\n  style arg_att2 fill:#FFD700,stroke-width:0px\n  style arg_att3 fill:#DCDCDC,stroke-width:0px\n  style arg_att4 fill:#DCDCDC,stroke-width:0px\n  style arg_att5 fill:#DCDCDC,stroke-width:0px\n  style arg_att6 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  12. Make objects. \n//\n//  Identify contiguous regions of grassland. \n// ---------------------------------------------------------------------------\n\nvar grassland_objects ;\n\nprint(\n\"STEP 10:\",\ngrassland_objects\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#13-select-by-location","title":"13. Select by location","text":"<pre><code>graph LR\n  input[/input\\n\\nFEATURE COLLECTION/] --&gt; method2[\".filterBounds()\"];\n  method2 --&gt; output&gt;output\\n\\nFEATURE COLLECTION];\n\n  arg_att1([target\\n\\nGEOMETRY or FEATURE]) --&gt; method2;\n\n  style input fill:#FFD700,stroke-width:0px  \n  style method2 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#FFD700,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  13. Select by location.\n//\n//  Isolate grasslands on College Lands. \n// ---------------------------------------------------------------------------\n\nvar college_grasslands ;\n\nprint(\n\"STEP 11:\",\ncollege_grasslands.size(),\ncollege_grasslands.first()\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#14-compute-spatial-attributes","title":"14. Compute spatial attributes.","text":"<pre><code>graph LR\n  input[/input\\n\\nFEATURE COLLECTION/] --&gt; method2[\".map()\"];\n  method2 --&gt; output&gt;output\\n\\nFEATURE COLLECTION];\n\n  arg_att1([getArea\\n\\nFUNCTION]) --&gt; method2;\n\n  style input fill:#FFD700,stroke-width:0px  \n  style method2 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#ADD8E6,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  14. Compute spatial attributes.\n//\n//  Calculate area and perimeter-area ratios.\n// ---------------------------------------------------------------------------\n\nvar getArea = function(f) {\nvar area = f.area(1, crs).divide(4046.86);\nvar pa = f.perimeter(1, crs).divide(f.area(1));\nreturn f.set({\"area\": area, \"pa\": pa});\n};\n\nvar grasslands_with_criteria ;\n\nprint(\n\"STEP 12:\",\ngrasslands_with_criteria.size(),\ngrasslands_with_criteria.first()\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#15-select-by-two-attributes","title":"15. Select by two attributes","text":"<pre><code>graph LR\n  input[/input\\n\\nFEATURE COLLECTION/] --&gt; method1[\".filter()\"];\n  method1 --&gt; method2([\"ee.Filter.and()\"])\n\n  method3([\"ee.Filter.gt()\"]) --&gt; method2;\n  method4([\"ee.Filter.lte()\"]) --&gt; method2;\n\n  arg_att1([property\\n\\nSTRING]) --&gt;method3;\n  arg_att2([value\\n\\nNUMBER]) --&gt;method3;\n\n  arg_att3([property\\n\\nSTRING]) --&gt;method4;\n  arg_att4([value\\n\\nNUMBER]) --&gt;method4;\n\n  method2 --&gt; output&gt;output\\n\\nFEATURE COLLECTION];\n\n\n  style input fill:#FFD700,stroke-width:0px  \n  style method1 fill:#ADD8E6,stroke-width:0px\n  style method2 fill:#ADD8E6,stroke-width:0px\n  style method3 fill:#ADD8E6,stroke-width:0px\n  style method4 fill:#ADD8E6,stroke-width:0px\n  style output fill:#FFD700,stroke-width:0px\n  style arg_att1 fill:#DCDCDC,stroke-width:0px\n  style arg_att2 fill:#DCDCDC,stroke-width:0px\n  style arg_att3 fill:#DCDCDC,stroke-width:0px\n  style arg_att4 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  15. Select by two attributes\n//\n//  Identify grasslands that meet both criteria.\n// ---------------------------------------------------------------------------\n\nvar best_grassland_habitat ;\n\nprint(\n\"STEP 13:\",\nbest_grassland_habitat.size(),\nbest_grassland_habitat.first()\n)\n;\n\nMap.addLayer();\n</code></pre>"},{"location":"workflows/grassland_bird_habitat/#16-export-to-asset","title":"16. Export to asset","text":"<pre><code>graph LR\n  method1[\"Export.table.toAsset()\"] --&gt; output&gt;output\\n\\nTASK];\n\n  arg_att1([collection\\n\\nFEATURE COLLECTION]) --&gt; method1;\n  arg_att2([description\\n\\nSTRING]) --&gt; method1\n  arg_att3([assetId\\n\\nSTRING]) --&gt; method1\n\n  style method1 fill:#ADD8E6,stroke-width:0px\n  style output fill:#ADD8E6,stroke-width:0px\n  style arg_att1 fill:#FFD700,stroke-width:0px\n  style arg_att2 fill:#DCDCDC,stroke-width:0px\n  style arg_att3 fill:#DCDCDC,stroke-width:0px</code></pre> <pre><code>// ---------------------------------------------------------------------------\n//  16. Export to asset\n//\n//  To run workflow with crs condition on distance (Step 10).\n// ---------------------------------------------------------------------------\n\nvar x_name = \"Best_college_grasslands_0930_2023\"; Export.table.toAsset({\ncollection: best_grassland_habitat, description: x_name, assetId: x_name\n}\n);\n</code></pre>"},{"location":"workflows/image_collections/","title":"Basic image collections","text":""},{"location":"workflows/image_collections/#introduction","title":"Introduction","text":"<p>This tutorial introduces a common workflow for processing and visualizing image collections with Earth Engine. You will use a MODIS Land Surface Temperature product to make a map that shows the mean LST for January 2023 in degrees Celsius. By the end of the tutorial, you should have a map that looks like the image below. </p> <p></p>"},{"location":"workflows/image_collections/#start-a-new-script","title":"Start a new script","text":"<pre><code>//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  TITLE:      wk02_tutorial.js\n//  AUTHOR:     your name\n//  DATE:       today's date\n//  PURPOSE:    A basic workflow for processing image collections.     \n//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n\n// Load check module. \n\nvar check = require('users/jhowarth/eePrimer:modules/checks.js');\n\n// ----------------------------------------------------------------\n//  Process the image collection.\n// ----------------------------------------------------------------\n</code></pre>"},{"location":"workflows/image_collections/#load-image-collection","title":"Load image collection","text":"<pre><code>// Step 1: Load image collection\n\nvar step_1 = ee.ImageCollection();\n</code></pre>"},{"location":"workflows/image_collections/#filter-by-date","title":"Filter by date","text":"<pre><code>// Step 2: Filter image collection by date.\n\nvar step_2 = step_1.filter(ee.Filter.date());\n</code></pre>"},{"location":"workflows/image_collections/#select-band","title":"Select band","text":"<pre><code>// Step 3: Select band.\n\nvar step_3 = step_2.select();\n</code></pre>"},{"location":"workflows/image_collections/#reduce-to-image","title":"Reduce to image","text":"<pre><code>// Step 4: Reduce image collection.\n\nvar step_4 = step_3;\n</code></pre>"},{"location":"workflows/image_collections/#scale-data-if-necessary","title":"Scale data (if necessary)","text":"<pre><code>// Step 5: Apply scalar (if EE data catalog tells you the data are scaled).\n\nvar step_5 = step_4;\n</code></pre>"},{"location":"workflows/image_collections/#convert-units-if-necessary","title":"Convert units (if necessary)","text":"<pre><code>// Step 6: Convert units (if units need conversion).\n\nvar step_6 = step_5;\n</code></pre>"},{"location":"workflows/image_collections/#visualize-results-as-layer","title":"Visualize results as layer","text":"<pre><code>// ----------------------------------------------------------------\n//  Visualize results as layer.\n// ----------------------------------------------------------------\n\n//  Set base map.\n\n\n\n//  Load community palettes. \n\nvar palettes = require('users/gena/packages:palettes');\n\n// print('Community palettes', palettes);\n\n//  Define visualization parameters. \n\n// var viz = {\n//   bands: ,\n//   min: ,\n//   max: , \n//   palette: palettes.colorbrewer.RdBu[11]\n// };\n\n//  Display the data values with the visualization parameters.\n\n// Map.addLayer();\n</code></pre>"},{"location":"workflows/image_collections/#add-a-legend","title":"Add a legend","text":"<pre><code>// ---------------------------------------------------------------------\n//  Add a legend.\n// ---------------------------------------------------------------------\n\n//  Load cart module.\n\nvar cart = require('users/jhowarth/eePrimer:modules/cart.js');\n\n// Call makeGradientLegend function and pass three parameters.\n\nvar legend = cart                                           // module\n.makeGradientLegend(                                      // function\nviz,                                                    // viz parameters\n'degrees (C)',                                          // a label for legend\n'bottom-left'                                           // position on map\n)\n;\n\n// Add legend to map. \n\n// Map.add();\n</code></pre> <p>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p>"}]}