{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction These materials aim to help undergraduate students explore and understand changes in the global environment using Google Earth Engine. They introduce core concepts of geographic information systems and remote sensing, methods for implementing these concepts with Earth Engine\u2019s javascript code editor, and a series of real-world problems and applications. This is a work in progress. I will be using it in Fall 2022 to teach a course in Environmental Studies and Geography at Middlebury College and it will be updated continuously. I\u2019ve organized the primer into chapters that each contain about a week\u2019s worth of content. Each chapter contains three sections: Introduces key words, concepts, and principles of spatial analysis, spatial problem-solving, geographic information systems, and remote sensing. Introduces code snippets to implement concepts with Google Earth Engine\u2019s code editor. Sketches geographic and environmental problems for students to solve by bringing together concepts and code. I am also developing problem sets to assess near and far transfer of understanding. In my course, these function as exams and for that reason I keep them in a private repository. If you are an instructor who would like access to these materials, please contact me. Jeff Howarth Associate Professor of Geography Middlebury College, Middlebury, Vermont, USA jhowarth@middlebury.edu","title":"Introduction"},{"location":"apply/01/longest_haul/","text":"The Shortest Route for the Longest Haul Currently, the longest non-stop commercial flight connects Singapore (SIN) to Newark (EWR). Does the flight path follow the great circle route between the two airports? In theory, this route represents the shortest geographic distance between these two locations. To begin to answer this question, please create a map that shows the great circle route between the two airports. Please copy and paste the starter script (below) into the code editor and then save it to your repo. Please write one or more lines of code to \u2018answer\u2019 each prompt. We will discuss both your solution (script) and our original question (does the flight follow the great circle route?) in our next class meeting. At that time, I will also show you how to submit your scripts and document your coursework this semester. Starter script // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Problem: The longest haul // Date: Today's date // Student: Your name here please // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Construct point geometry objects for SIN and JFK. // Make features with each point, add the property 'airport' and store the appropriate airport code. // Construct line geometry object between the two airports. // Inspect the result by printing to Console. // Center the map as follows: // latitude: -0.9678795804756186 // longitude: -82.83931467161779 // zoom level: 2 // Change the base map to hybrid. // Add the line feature to the map, display it with red, and label the layer 'Longest haul route'. Airport support To help you find the airports, here is a screen shot that shows the location of SIN: And here is another that shows the location of EWR.","title":"Shortest route for the longest haul"},{"location":"code/00/account/","text":"You will need to sign up for a Google Earth Engine account. This is free for students. We will walk through the sign-up process in our first meeting.","title":"Account"},{"location":"code/00/code_editor/","text":"Earth Engine Code Editor We will use the web-based Code Editor for Earth Engine. This provides an interface for writing and running code, while also providing tools for managing files and assets, composing and inspecting maps, finding documentation, and printing results and widgets. The diagram shown below is from Google\u2019s Earth Engine documentation . As you can see, the Code Editor consists of a lot of panels and buttons. As you use the code editor, you will quickly become familiar with navigating the interface. In our first lab meeting, we will go over the following common tasks. Common Task Panel or button Manage files Scripts Assets Find help for tools Docs Write code Text Editor Save Run code Run Print results Console Inspect locations Inspector Inspect tasks Tasks Navigate map Pan Zoom Change basemap Map Satellite Draw geometry Point Line Shape Rectangle","title":"Code Editor"},{"location":"code/00/javaScript101/","text":"Javascript 101 The Code Editor lets you work with Earth Engine by writing code in javascript. Like any language, javascript has a vocabulary and grammar that you will learn through practice. This page introduces some key terms, syntax, and contexts for writing code with javascript. Script A script is a sequence of statements that can be executed. Lines and comments A line begins on the left and ends when you click return. Each line has a number, shown on the left side of the text editor panel. A comment tells the computer: please ignore this . You often use comments to document your code and write little notes to yourself and to people who may read and want to reuse your code. They are like putting notes in the margins of a book without affecting the content of the book or like the director\u2019s commentary of a movie that can be muted when you watch. A line comment tells the computer not to execute anything that follows two forward slashes on a line. A multi-line comment tells the computer not to execute anything from a defined beginning and ending which may span multiple lines. // LINE COMMENTS start with two forward slashes. Like this line. The computer won't execute anything on this line that follows the slashes. /* MULTI LINE COMMENTS start with a forward slash and a star and end with a star and a forward slash. The computer won't execute anything between the stars, even if your comment spans many many lines . */ Script header It is good practice to begin every script with a header that states a title, your name, the date, and a brief description of the script\u2019s purpose. To do this, you can use either a line comment or multi-line comment. Here is an example of a header with line credits. Note how each line begins with two forward slashes. // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // TITLE: Javascript 101 // NAME: Your name here please // DATE: Today's date // PURPOSE: Getting started with Javascript // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Here is an example of a header with a multi-line comment. /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TITLE: Javascript 101 NAME: Your name here please DATE: Today's date PURPOSE: Getting started with Javascript ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */ Either method is fine. The most important thing is to remember to start each script with a header. Statements, objects, and variables When you write a script, you write statements to create and manipulate different kinds of data objects . An object class is an abstract template, while an instance is a manifestation of it. For example, \u2018a book\u2019 is like an object class, while \u2018the book sitting next to your bed\u2019 is an instance of this class. Sometimes you hear the words \u201ctype\u201d and \u201ctoken\u201d to describe the same distinction. A common statement involves first creating a container to store something and then putting an instance of a class into the container. In javascript, the container is called a variable . A variable can store different kinds of objects and you can name the variable (almost) anything that you want. // This variable stores an instance of a NUMBER object. var my_daughter_is = 4 ; // This variable stores an instance of a STRING object. A string starts and ends with a single quote. var my_son_is = 'six years old' ; // A string object can also start and end with double quotes. // (but don't mix and match them). var isabel = \"my daughter's name\" ; // This variable stores a set of strings as a LIST object that is defined by square brackets. var my_kids = [ 'Aldo' , 'Isabel' ]; // This list stores a set of numbers. var myKidsAge = [ 6 , 4 ]; // Curly brackets (or braces) can be used to define DICTIONARIES, or a set of KEY:VALUE pairs. var kidStats = { 'name' : 'Aldo' , 'age' : 6 , 'birthplace' : 'Middlebury, VT' }; Statement syntax If you examine these simple statements, you might recognize a couple of basic rules. First, what do you notice about the variable names? They follow a simple rule: The name of a variable cannot contain spaces. To honor this rule, you can follow two naming conventions for variables. // snake_case var this_will_work = 'snake_case' ; // camelCase var thisWillAlsoWork = 'camelCase' ; Second, look at the end of each statement. This is rule number two: Statements should end in a semi-colon . // Statements should end in a SEMI-COLON, or the editor complains. var dangling = 'I feel incomplete...' var complete = 'This feels better, thanks.' ; In the above example, the editor will flag the line with a little italic i when you forget the semi-colon, but you may not notice this because the code will often still run. As you learn to write more complicated statements, however, forgetting to include a semi-colon can torpedo your code from executing. So it is good practice to think of the semi-colon as the period of a sentence and always end with it. Print to console panel This section needs a final revision\u2026 // Parentheses are used to pass PARAMETERS to FUNCTIONS. print ( 'This string will print in the Console tab.' ); // Variables can be passed as PARAMETERS to functions. print ( my_variable ); // Use commas to pass more than one parameter to a function. print ( 'this was my first variable' , my_variable ); // Use square brackets after list object to select items by their location in a list. // The zero INDEX refers to the first item in the list. print ( my_list [ 0 ]); // Use a period and parentheses to call a METHOD of an object (a function that works with an object). var my_list_reversed = my_list . reverse () print ( my_list_reverse ); // Square brackets can be used to access dictionary items by key. print ( my_dictionary [ 'color' ]); //Or you can use the dot notation to get the same result. print ( my_dictionary . color ); Adapted from Earth Engine 101 by Dave Thau .","title":"Javascript 101"},{"location":"code/01/addVectorLayer/","text":"Add vector layer to map Here is how you can add a vector layer to a map. In this example, I assume you have a point object named \u2018point\u2019. Map . addLayer ( point , // Object to show on the map. { color : 'blue' }, // Color to display the objects. 'My first point' // A label for the layer that will appear in the label panel. ); Check your understanding Compare and contrast how the size versus the shape of the circles change as you move from the equator towards the poles.","title":"Add vector layer to map"},{"location":"code/01/calculateLength/","text":"Calculate length Geometry objects have implicit spatial properties, the number of which depends on their dimensions. Geometry Dimensions Spatial Property point 0 Location line 1 Location Length polygon 2 Location Perimeter Area These spatial properties can be calculated with methods of each object class. The example below shows two things: How to calculate the length of a line object. How to convert the length from meters to kilometers through division. The snippet assumes that you have a line object named \u2018line\u2019. // Calculate the length of a line object and convert from meters to kilometers. var route_speed = route . length () . divide ( 1000 ) ;","title":"Calculate line length"},{"location":"code/01/constructLineGeometry/","text":"Construct line geometry A line consists of one or more points. When you stretch a string tightly between two points on a globe, you show the great circle route . This shows the shortest distance across the globe\u2019s surface between the two points. Google Earth Engine uses a spheroid model to represent line objects. The resulting lines represent great circle routes, just like if you were working with a string and a globe. Here is how to construct a line object from two point objects: // Construct two points. var point = ee . Geometry . Point ([ 0 , 0 ]); var point2 = ee . Geometry . Point ([ - 90 , 60 ]); // Construct line from two points. var line = ee . Geometry . LineString ([ point , point2 ]); // Inspect results. print ( 'Great circle arc' , line ); // Display result as a layer on the map. Map . addLayer ( line , { color : 'red' }, 'Great circle line' ); Check your understanding If this line represents the shortest distance between two points, why does the line bend rather than go straight?","title":"Construct line geometry"},{"location":"code/01/constructPointGeometry/","text":"Construct point geometry While you can create geometry objects with the geometry buttons in the upper-left of the Map user interface, you can also create them with code. // Construct new point geometry object. var point = ee . Geometry . Point ([ 0 , 0 ]); // Inspect the result. print ( 'Point object' , point ); Check your understanding Which number represents the equator Which number represents the Prime Meridian?","title":"Construct point geometry"},{"location":"code/01/getMapCenter/","text":"Get map center When you first open the Code Editor , the Map UI will be centered on a point in Buffalo Valley, OK. You can retrieve the coordinates of a map\u2019s center with this: var center = Map . getCenter (); print ( 'Center point' , center ); Check your understanding: Which number represents latitude and which represents longitude? What does it mean if a number is negative?","title":"Get map center"},{"location":"code/01/getZoom/","text":"Get zoom level By default, the map zoom level is set so that you can see all of the lower 48 states (plus Puerto Rico) in the map window. You can retrieve the zoom level used to display the map with this: var zoom = Map . getZoom (); print ( 'Zoom level' , zoom ); Check your understanding: What zoom level is the most 'zoomed out'? What zoom level is the most 'zoomed in'?","title":"Get zoom"},{"location":"code/01/setBasemap/","text":"Set base map By default, the Code Editor map will display with the Google road map. You can change the default basemap type like this: Map . setOptions ( 'HYBRID' ); You may choose from four base map types: \u2018ROADMAP\u2019 \u2018SATELLITE\u2019 \u2018HYBRID\u2019 \u2018TERRAIN\u2019 Check your understanding: What object type does this method take as a parameter?","title":"Set base map"},{"location":"code/01/setCenterZoom/","text":"Set map center and zoom level You can customize the map extent by changing the map center and zoom level like this: Map . setCenter ( - 73.1819 , 44.0133 , 19 ); Check your understanding: Which buttons on the Map UI let you manually change the center and zoom level?","title":"Set map center and zoom"},{"location":"code/01/setProperties/","text":"Set properties of a feature A geometry object represents where , but not what is where. In other words, geometry objects only represent geographic locations. They do not describe anything else about these locations. A feature object represents properties of a location. Often, you will hear people who are accustomed to geographic information systems use the word attribute rather than property. For our purposes, they are synonymous. Usually, the attributes of features will be defined as part of a data product. But you can also define and alter attributes as necessary with code. In Earth Engine, a property is stored as a dictionary with a key and a value. You might think of this like a table: the key is the column title and the value is the row. The example below again assumes that you have a point object named \u2018point\u2019. // Set a property of point. var point_feature = ee . Feature ( point , { name : 'my first point' }); // Print the two different objects to compare. print ( 'Point as geometry' , point , 'Point as feature' , point_feature );","title":"Set properties of a feature"},{"location":"concepts/01/geographic_framework/","text":"Geographic Framework Key terms equator prime meridian latitude longitude great circle zoom level representative fraction (RF) scale","title":"Geographic framework"},{"location":"concepts/01/modeling/","text":"Cartographic Modeling Key terms task ( goal ) task hierarchy workflow ( procedure , program )","title":"Cartographic modeling"},{"location":"concepts/01/transformations/","text":"Transformations Key terms Terms in italics are synonyms. input operation ( method ) output parameters ( arguments ) data types ( object classes )","title":"Transformations"},{"location":"concepts/01/vectorModel/","text":"Vector model Key terms Geometry (points, lines, polygons) Attributes (spatial, thematic) Singlepart versus multipart Properties","title":"Vector model"}]}