{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction I developed these materials to help undergraduate students explore and understand changes in the global environment using Google Earth Engine. to be continued","title":"Introduction"},{"location":"apply/01/longest_haul/","text":"The Shortest Route for the Longest Haul Currently, the longest non-stop commercial flight goes from Singapore (SIN) to Newark (EWR). Does the flight path follow the great circle route between the two airports? In theory, this route represents the shortest geographic distance between these two locations. To begin to answer this question, please create a map that shows the great circle route between the two airports. Please copy and paste the starter script (below) into the code editor and then save it to your repo. Please write one or more lines of code to \u2018answer\u2019 each prompt. We will discuss both your solution (script) and our original question (does the flight follow the great circle route?) in our next class meeting. At that time, I will also show you how to submit your scripts and document your coursework this semester. Starter script // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Problem: The longest haul // Date: Today's date // Student: Your name here please // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Construct point geometry objects for SIN and JFK. // Make features with each point, add the property 'airport' and store the appropriate airport code. // Construct line geometry object between the two airports. // Inspect the result by printing to Console. // Center the map as follows: // latitude: -0.9678795804756186 // longitude: -82.83931467161779 // zoom level: 2 // Change the base map to hybrid. // Add the line feature to the map, display it with red, and label the layer 'Longest haul route'. Airport support To help you find the airports, here is a screen shot that shows the location of SIN: And here is another that shows the location of EWR.","title":"Shortest route for the longest haul"},{"location":"code/01/addVectorLayer/","text":"Add vector layer to map Here is how you can add a vector layer to a map. In this example, I assume you have a point object named \u2018point\u2019. Map . addLayer ( point , // Object to show on the map. { color : 'blue' }, // Color to display the objects. 'My first point' // A label for the layer that will appear in the label panel. ); Check your understanding Compare and contrast how the size versus the shape of the circles change as you move from the equator towards the poles.","title":"Add vector layer to map"},{"location":"code/01/calculateLength/","text":"Calculate length Geometry objects have implicit spatial properties, the number of which depends on their dimensions. Geometry Dimensions Spatial Property point 0 Location line 1 Location Length polygon 2 Location Perimeter Area These spatial properties can be calculated with methods of each object class. The example below shows two things: How to calculate the length of a line object. How to convert the length from meters to kilometers through division. The snippet assumes that you have a line object named \u2018line\u2019. // Calculate the length of a line object and convert from meters to kilometers. var route_speed = route . length () . divide ( 1000 ) ;","title":"Calculate line length"},{"location":"code/01/code_editor/","text":"Earth Engine Code Editor Please refer to this documentation from Google Developer\u2019s site. Key tasks Common Task Panel or button Manage files Scripts Assets Find help for tools Docs Write code Text Editor Save Run code Run Print results Console Inspect locations Inspector Inspect tasks Tasks Navigate map Pan Zoom Change basemap Map Satellite Draw geometry Point Line Shape Rectangle","title":"Earth Engine Code Editor"},{"location":"code/01/constructLineGeometry/","text":"Construct line geometry A line consists of one or more points. When you stretch a string tightly between two points on a globe, you show the great circle route . This shows the shortest distance across the globe\u2019s surface between the two points. Google Earth Engine uses a spheroid model to represent line objects. The resulting lines represent great circle routes, just like if you were working with a string and a globe. Here is how to construct a line object from two point objects: // Construct two points. var point = ee . Geometry . Point ([ 0 , 0 ]); var point2 = ee . Geometry . Point ([ - 90 , 60 ]); // Construct line from two points. var line = ee . Geometry . LineString ([ point , point2 ]); // Inspect results. print ( 'Great circle arc' , line ); // Display result as a layer on the map. Map . addLayer ( line , { color : 'red' }, 'Great circle line' ); Check your understanding If this line represents the shortest distance between two points, why does the line bend rather than go straight?","title":"Construct line geometry"},{"location":"code/01/constructPointGeometry/","text":"Construct point geometry Here is how to construct a point geometry object. // Construct new point geometry object. var point = ee . Geometry . Point ([ 0 , 0 ]); // Inspect the result. print ( 'Point object' , point ); Check your understanding What is the Prime Meridian?","title":"Construct point geometry"},{"location":"code/01/getMapCenter/","text":"Get map center When you first open the Code Editor , the Map UI will be centered on a point in Buffalo Valley, OK. You can retrieve the coordinates of a map\u2019s center with this: var center = Map . getCenter (); print ( 'Center point' , center ); Check your understanding: Which number represents latitude and which represents longitude? What does it mean if a number is negative?","title":"Get map center"},{"location":"code/01/getZoom/","text":"Get zoom level By default, the map zoom level is set so that you can see all of the lower 48 states (plus Puerto Rico) in the map window. You can retrieve the zoom level used to display the map with this: var zoom = Map . getZoom (); print ( 'Zoom level' , zoom ); Check your understanding: What zoom level is the most 'zoomed out'? What zoom level is the most 'zoomed in'?","title":"Get zoom"},{"location":"code/01/javaScript101/","text":"Javascript Adapted from Earth Engine 101 by Dave Thau . Key terms CATEGORY TERMS comment single multi-line syntax variable method parameter index semi-colon naming snake camel objects number string list dictionary function module Snippets // LINE COMMENTS start with two forward slashes. Like this line. /* MULTI LINE COMMENTS start with a forward slash and a star, and end with a star and a forward slash. */ // VARIABLES are used to store objects and are defined using the keyword var. // A variable creates an instance of an OBJECT class. // The variable below defines an instance of a NUMBER object. var the_answer = 42 ; // A STRING object starts and ends with a single quote. var my_variable = 'I am a string' ; // A string object can also start and end with double quotes. // But don't mix and match them. var my_other_variable = \"I am also a string\" ; // Statements should end in a SEMI-COLON, or the editor complains. var test = 'I feel incomplete...' var test2 = 'This feels better, thanks.' ; // The name of a variable cannot contain spaces. // Two good naming conventions are: // snake_case var this_will_work = 'snake_case' ; // camelCase var thisWillAlsoWork = 'camelCase' ; // Parentheses are used to pass PARAMETERS to FUNCTIONS. print ( 'This string will print in the Console tab.' ); // Variables can be passed as PARAMETERS to functions. print ( my_variable ); // Use commas to pass more than one parameter to a function. print ( 'this was my first variable' , my_variable ); // Use square brackets to define a LIST object. var my_list = [ 'eggplant' , 'apple' , 'wheat' ]; // Use square brackets after list object to select items by their location in a list. // The zero INDEX refers to the first item in the list. print ( my_list [ 0 ]); // Use a period and parentheses to call a METHOD of an object (a function that works with an object). var my_list_reversed = my_list . reverse () print ( my_list_reverse ); // Curly brackets (or braces) can be used to define DICTIONARIES, or a set of KEY:VALUE pairs. var my_dictionary = { 'food' : 'bread' , 'color' : 'red' , 'number' : 42 }; // Square brackets can be used to access dictionary items by key. print ( my_dictionary [ 'color' ]); //Or you can use the dot notation to get the same result. print ( my_dictionary . color );","title":"Javascript"},{"location":"code/01/setBasemap/","text":"Set base map By default, the Code Editor map will display with the Google road map. You can change the default basemap type like this: Map . setOptions ( 'HYBRID' ); You may choose from four base map types: \u2018ROADMAP\u2019 \u2018SATELLITE\u2019 \u2018HYBRID\u2019 \u2018TERRAIN\u2019 Check your understanding: What object type does this method take as a parameter?","title":"Set base map"},{"location":"code/01/setCenterZoom/","text":"Set map center and zoom level You can customize the map extent by changing the map center and zoom level like this: Map . setCenter ( - 73.1819 , 44.0133 , 19 ); Check your understanding: Which buttons on the Map UI let you manually change the center and zoom level?","title":"Set map center and zoom"},{"location":"code/01/setProperties/","text":"Set properties of a feature A geometry object represents where , but not what is where. In other words, geometry objects only represent geographic locations. They do not describe anything else about these locations. A feature object represents properties of a location. Often, you will hear people who are accustomed to geographic information systems use the word attribute rather than property. For our purposes, they are synonymous. Usually, the attributes of features will be defined as part of a data product. But you can also define and alter attributes as necessary with code. In Earth Engine, a property is stored as a dictionary with a key and a value. You might think of this like a table: the key is the column title and the value is the row. The example below again assumes that you have a point object named \u2018point\u2019. // Set a property of point. var point_feature = ee . Feature ( point , { name : 'my first point' }); // Print the two different objects to compare. print ( 'Point as geometry' , point , 'Point as feature' , point_feature );","title":"Set properties of a feature"},{"location":"concepts/01/geographic_framework/","text":"Geographic Framework Key terms latitude longitude zoom level scale","title":"Geographic framework"},{"location":"concepts/01/modeling/","text":"Cartographic Modeling Key terms task ( goal ) task hierarchy workflow ( procedure , program )","title":"Cartographic modeling"},{"location":"concepts/01/transformations/","text":"Transformations Key terms Terms in italics are synonyms. input operation ( method ) output parameters ( arguments ) data types ( object classes )","title":"Transformations"},{"location":"concepts/01/vectorModel/","text":"Vector model Key terms Geometry (points, lines, polygons) Attributes (spatial, thematicmkdocs) Singlepart versus multipart Properties","title":"Vector model"}]}