{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":"<p>These materials aim to help undergraduate students explore and understand changes in the global environment using Google Earth Engine.    </p>"},{"location":"#revision-cycle","title":"Revision cycle","text":"<p>I am developing these materials to teach a course in Environmental Studies and Geography at Middlebury College (USA). I update this content continuously during the fall semester (Sept - Dec) when I offer the course. After this, the content tends to remain static while I work on other projects. Then when the leaves start turning yellow again, I begin making revisions.  </p>"},{"location":"#organization","title":"Organization","text":"<p>If you are new to Google Earth Engine, the first section aims to help you set up an account, introduces the web-based Code Editor, and then quickly introduces some key terms and practices in javascript, which we will use for writing scripts in the Code Editor.  </p> <p>The lesson plans contain short projects that I use for about a week of instruction in a 12 week semester. </p> <p>The code catalog introduces code snippets to implement concepts with Google Earth Engine\u2019s code editor. These snippets aim to describe recurring chunks of code that recur across workflows.   </p> <p>The concept catalog is poorly developed on this repo as I currently introduce much of this content at the blackboard in the classroom. At present, this section includes some key words, concepts, and principles of geospatial analysis.   </p> <p>I use problem sets to assess near and far transfer of understanding. In my course, these function as exams and for that reason I keep them in a private repository. If you are an instructor who would like access to these materials, please contact me.  </p> <p>Jeff Howarth Associate Professor of Geography Middlebury College, Middlebury, Vermont, USA jhowarth@middlebury.edu </p>"},{"location":"00/code/account/","title":"Account","text":"<p>You will need to sign up for a Google Earth Engine account. This is free for students. We will walk through the sign-up process in our first meeting. You sign up through the Google Earth Engine web site. </p>"},{"location":"00/code/code_editor/","title":"Code Editor","text":""},{"location":"00/code/code_editor/#earth-engine-code-editor","title":"Earth Engine Code Editor","text":"<p>We will use the web-based Code Editor for Earth Engine. You might as well bookmark this site in your browser. It provides an interface for writing and running code, while also providing tools for managing files and assets, composing and inspecting maps, finding documentation, and printing results and widgets.  </p> <p>The diagram shown below is from Google\u2019s Earth Engine documentation.  </p> <p> <p> </p> <p> </p> <p>As you can see, the Code Editor consists of a lot of panels and buttons. As you use the code editor, you will quickly become familiar with navigating the interface. In our first lab meeting, we will go over the following common tasks.   </p> <p> Common Task Panel or button Manage files Scripts Assets Find help for tools Docs Write and run code Text Editor Save Inspect results Console Inspect locations Inspector Inspect tasks Tasks Navigate map Pan Zoom Change basemap Map Satellite Draw geometry Point Line ShapeRectangle"},{"location":"00/code/javaScript101/","title":"Javascript 101","text":""},{"location":"00/code/javaScript101/#javascript-101","title":"JavaScript 101","text":"<p>The Code Editor lets you work with Earth Engine by writing code in JavaScript. Like any language, JavaScript has a vocabulary and grammar that you will learn through practice. This page introduces some key terms, syntax, and contexts for writing code with JavaScript.  </p> <p>Like most of the pages tagged with  in this primer, this page contains code snippets that you can copy and paste into the code editor to see their effects. To do this, open the code editor, copy and past the code snippets into it, and click RUN to execute the snippet. You can also save you script as a file by clicking the SAVE button. The file name should not have spaces and should end with .js to mark that it is a JavaScript file (e.g. javascript101.js).          </p>"},{"location":"00/code/javaScript101/#scripts","title":"Scripts","text":"<p>A script is a sequence of statements that can be executed (when you \u2018run\u2019 the script).  </p>"},{"location":"00/code/javaScript101/#lines","title":"Lines","text":"<p>A line is the basic organizing unit of a script. Think of a line like a ruling on a sheet of paper, while a statement is like the sentence that you write on the ruling. Each line has a number, shown on the left side of the text editor panel. These line indexes are helpful for troubleshooting code because if you make an error the code editor will usually tell you the line number that tripped it up.      </p>"},{"location":"00/code/javaScript101/#comments","title":"Comments","text":"<p>A comment tells the computer: please ignore this. You often use comments to document your code and write little notes to yourself and to people who may read and want to reuse your code. They are like putting notes in the margins of a book without affecting the content of the book or like the director\u2019s commentary of a movie that can be muted when you watch.  </p> <p>A line comment tells the computer not to execute anything that follows two forward slashes on a line. A multi-line comment tells the computer not to execute anything from a defined beginning and ending which may span multiple lines.           </p> <pre><code>// LINE COMMENTS start with two forward slashes. Like this line. The computer won't execute anything on this line that follows the slashes.\n\n/* MULTI LINE COMMENTS start with a forward slash and a star and end with a star and a forward slash.\n\nThe computer won't execute anything between the stars,\neven\nif\nyour\ncomment\nspans\nmany\n\nmany\n\nlines  \n.\n*/\n</code></pre>"},{"location":"00/code/javaScript101/#script-header","title":"Script header","text":"<p>It is good practice to begin every script with a header that states a title, your name, the date, and a brief description of the script\u2019s purpose. To do this, you can use either a line comment or multi-line comment.  </p> <p>Here is an example of a header with line comments. Note how each line begins with two forward slashes.   </p> <pre><code>//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  TITLE:        Javascript 101  \n//  NAME:         Your name here please\n//  DATE:         Today's date\n//  PURPOSE:      Getting started with JavaScript    \n//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <p>Here is an example of a header with a multi-line comment.      </p> <p><pre><code>/*  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  \n    TITLE:        Javascript 101  \n    NAME:         Your name here please\n    DATE:         Today's date\n    PURPOSE:      Getting started with JavaScript  \n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */\n</code></pre> Either method is fine. The most important thing is to remember to start each script with a header.  </p>"},{"location":"00/code/javaScript101/#statements-objects-and-variables","title":"Statements, objects, and variables","text":"<p>When you write a script, you write statements to create and manipulate different kinds of data objects. An object class is an abstract template, while an instance is a manifestation of it. For example, the concept of \u2018a book\u2019 is like an object class, while \u2018the book sitting next to your bed\u2019 is an instance of this class. Sometimes you hear the words \u201ctype\u201d and \u201ctoken\u201d to describe the same distinction.       </p> <p>A common statement involves first creating a container to store something and then putting an instance of a class into the container. In JavaScript, the container is called a variable. A variable can store different kinds of objects and you can name the variable (almost) anything that you want.            </p> <pre><code>// This statement creates the variable age_daughter to store an instance of a NUMBER object.\n\nvar age_daughter = 4;\n\n// This statement creates the variable age_son to store an instance of a STRING object. A string starts and ends with a single quote.\n\nvar age_son = 'six years old';\n\n// A string object can also start and end with double quotes,\n// (but don't mix and match them).\n\nvar name_daughter = \"isabel\";\n\n// This variable stores a set of strings as a LIST object that is defined by square brackets.   \n\nvar kid_names = ['Aldo', 'Isabel'];\n\n// This list stores a set of numbers.  \n\nvar kid_ages = [6,4];\n\n// Curly brackets (or braces) can be used to define DICTIONARIES, or a set of KEY:VALUE pairs.\n\nvar kidStats = {'name':'Aldo', 'age':6, 'birthplace':'Middlebury, VT'};\n</code></pre>"},{"location":"00/code/javaScript101/#statement-syntax","title":"Statement syntax","text":"<p>If you examine these simple statements, you might recognize some basic rules of syntax.  </p> <p>1. How do you define a variable? </p> <p>In JavaScript, the statement starts with the keyword var followed by the equal sign. That clause says \u2018create a variable named\u2026\u2019.  </p> <p>2. What do you notice about the variable names? </p> <p>They follow a simple rule: The name of a variable cannot contain spaces. To honor this rule, you can follow two naming conventions for variables.    </p> <pre><code>// An example of the snake_case.\n\nvar this_will_work = 'snake_case';\n\n//  An example of the camelCase.\n\nvar thisWillAlsoWork = 'camelCase';\n</code></pre> <p>3. What defines the object class of the instance? </p> <p>This is subtle, but important. The object class is coded by the format of the text in the statement.      </p> OBJECT CLASS FORMAT EXAMPLE NUMBER plain old number 4 STRING \u2018 \u2018 \u201d \u201c \u2018isabel\u2019 \u201ckid\u2019s\u201c LIST [ ] [\u2018aldo\u2019, \u2018isabel\u2019] DICTIONARY {:} {\u2018name\u2019: \u2018aldo\u2019} <p>4. How does each statement end? </p> <p>Do you see that little thing at the end of each statement winking at you? This is a mark of good coding practice: Statements should end in a semi-colon.</p> <pre><code>// Statements should end in a SEMI-COLON, or the editor complains.\n\nvar dangling = 'I feel incomplete...'  var complete = 'This feels better, thanks.';\n</code></pre> <p>In the above example, the editor will flag the line with a little italic i when you forget the semi-colon, but you may not notice this because the code will often still run. As you learn to write more complicated statements, however, forgetting to include a semi-colon can torpedo your code from executing. So it is good practice to think of the semi-colon as the period of a sentence and always end with it.  </p>"},{"location":"00/code/javaScript101/#code-documentation","title":"Code documentation","text":"<p>It is good practice to write comments to document every statement in your code. This will help you read your code if you put a script down for a period of time and return to it later. It will also help other people read and borrow from your code or help you troubleshoot errors.    </p> <p>In this course, I will ask you to follow three principles of good coding practice with respect to documenting your scripts.  </p> <p>1. Write a comment for each statement that briefly describes its purpose.</p> <p>2. Always document code with complete sentences that end with periods. </p> <p>3. Write concise 1-2 sentence statements, not long-winded paragraphs. </p>"},{"location":"00/code/javaScript101/#print-to-console-panel","title":"Print to console panel","text":"<p>As you write code, it is good practice to check your work as you go. A common way of doing this is to print variables and then look at the result in the Console panel of the Code Editor.  </p> <pre><code>// Use print function and pass a string to it by enclosing in parentheses.  \n\nprint('This string will print in the Console panel.');\n\n// You can also pass a variable to the print function.   \n\nprint(kid_names);\n\n// Use commas to pass more than one item to the print function.\n\nprint(\"my kids\", kid_names);\n</code></pre>"},{"location":"00/code/javaScript101/#functions","title":"Functions","text":"<p>The print command is an example of a function, or something more like a verb than a noun. A function can take arguments and deliver results. As illustrated by the print function, you pass arguments to a function by enclosing them in parentheses.  </p>"},{"location":"00/code/javaScript101/#object-methods","title":"Object methods","text":"<p>Every object class will have a set of functions that you can call to manipulate instances of that object class. These are often called methods. Here is an example for a list object.    </p> <pre><code>// Use a period and parentheses to call a METHOD of an object (a function that works with an object).\n\nvar kids_reversed = kid_names.reverse();\nprint('Kids in reverse order', kids_reversed);\n</code></pre>"},{"location":"00/code/javaScript101/#earth-engine-objects","title":"Earth Engine objects","text":"<p>All the examples above deal with native JavaScript objects and methods. Earth Engine provides a large set of additional objects and methods for working with geographic information. In the chapters that follow, you will learn how to use JavaScript to access these tools. The syntax and grammar for using these tools are largely the same as what we have discussed above.  </p> <p>If this all feels new and slightly overwhelming, please do not stress out. It will become familiar through practice.  </p> <p>Adapted from Earth Engine 101 by Dave Thau. </p>"},{"location":"code/cart/community_palette/","title":"Community palette module","text":""},{"location":"code/cart/community_palette/#introduction","title":"Introduction","text":"<p>ee-palettes is a resource created by Gennadii Donchyts, Fedor Baart &amp; Justin Braaten. You can access this resource through the project\u2019s GitHub repository. The README file (the web page that is displayed when you click the GitHub link) thoroughly documents how to work with the resource. The snippets below aim to provide some additional support for EE newbies.  </p>"},{"location":"code/cart/community_palette/#1-load-the-module","title":"1. Load the module.","text":"<p>In this community resource, palettes are contained in an Earth Engine module, or a collection of data objects that can be called from other scripts. This follows the modular programming paradigm that seeks to break complex tasks into simple, reusable sub-tasks.  </p> <p>Many EE problems require the coder to create a palette to call as a visualization parameter. So rather than force all coders to do this from scratch each time, Gena, Fedor, and Justin wrote up a module that contains many different solutions to this task. Then they very kindly shared this module (for no cost) with the broader EE user community.   </p> <p>The snippet below loads the ee-palettes module into a variable called palettes.  </p> <pre><code>// Load ee-palettes module.\n\nvar palettes = require('users/gena/packages:palettes');\n</code></pre>"},{"location":"code/cart/community_palette/#2-define-a-palette","title":"2. Define a palette.","text":"<p>The ee-palettes module contains a dictionary composed of sub-dictionaries, lists, and strings. To see this, run this snippet.</p> <pre><code>// Inspect the module.\n\nprint('community palettes', palettes);\n</code></pre> <p>In the Console, you should see a dictionary structured like this:  </p> <ul> <li>Module dictionary  <ul> <li>Color schemes    <ul> <li>Palette groups   <ul> <li>Color lists  </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>To select a color list for your palette, use the following pattern:    </p> <pre><code>// Pattern for selecting palettes.  \n\nvar palette_name =          // You can name this anything you want.\nmodule_dictionary.        // Whatever you named the variable when you loaded the module.\ncolor_scheme.             // Schemes organized by source (e.g. ColorBrewer) and sometimes data constraints (e.g. qualitative, sequential, diverging).\npalette_group             // A general range of colors displayed by a palette.\n[color_list_index]        // The list of colors used to display the palette (akin to the palette's 'resolution').  \n;\n</code></pre> <p>For example:  </p> <pre><code>// Define a palette.\n\nvar palette =         // Whatever you want to name the palette.\npalettes.           // Whatever you named the variable when you loaded the module.\ncmocean.            // Name of the color scheme.\nDeep                // Name of the palette group.  \n[7]                 // Index number of color list.\n;\n\nprint('palette', palette);\n</code></pre> <p>Typically, you call the palette in one line:    </p> <pre><code>// Define a palette.\n\nvar palette = palettes.cmocean.Deep[7];\n\nprint('palette', palette);\n</code></pre>"},{"location":"code/cart/community_palette/#3-invert-the-palette","title":"3. Invert the palette.","text":"<p>Sometimes you will need to reverse the order of colors in a color list. For example, the Red-Blue diverging ColorBrewer scheme is inherently ordered from red to blue.  </p> <p></p> <p>But what if you want to use this palette to display temperature anomalies, where negative numbers represent cooler than normal temperatures and positive values represent warmer than normal temperatures? Good cartographic practice aims to make the visual display of data intuitive for the map reader. To use cool colors for cool temperatures and warm colors for warm temperatures, you can reverse the color list.  </p> <pre><code>// Define palette and reverse the color list.\n\nvar palette_reversed = palettes.colorbrewer.RdBu[9].reverse();  print('palette reversed', palette_reversed);\n</code></pre> <p>Compare the result from above with the original palette to check your understanding.  </p> <pre><code>// Original palette.\n\nvar palette_original = palettes.colorbrewer.RdBu[9].reverse();  print('palette original', palette_original);\n</code></pre>"},{"location":"code/cart/community_palette/#4-slice-the-palette","title":"4. Slice the palette.","text":"<p>Sometimes you will want to use a portion of the palette, but not the entire palette. For example, imagine that you would like to map concentrations of chlorophyll-a. You find a palette from the niccoli color scheme that transitions from dark blue to green through a yellow-peach to white.</p> <p> </p> <p>For your map, you would like the palette to end at the green color and not extend into the yellow and white bit. To do this, you can slice the palette:  </p> <pre><code>// Slice the palette to use a portion of it.\n\nvar palette_sliced = palettes.niccoli.linearl[7].slice(0,5);\n\nprint('palette_sliced', palette_sliced);\n</code></pre> <p>To understand how slice works, run this code to print the original palette.</p> <p><pre><code>// Compare to original palette.\n\nvar palette_full = palettes.niccoli.linearl[7];\n\nprint('palette full', palette_full);\n</code></pre> Look at the Console panel and note that the original list contains seven (7) elements. Now expand the list (click on the carrot) so that you can see the color codes. Note that each color code in the list has an index number. The first color has the index 0 and the last color has the index 6.</p> <p>Now look at your sliced palette in the Console panel. It contains five (5) elements. The two arguments in the .slice() method defined the start and end of this subset. Note that the first number is inclusive and the second one is exclusive. That means when you say .slice(0,5) the result will include the index 0 but exclude the index 5 or greater.</p>"},{"location":"code/cart/community_palette/#resources-for-good-cartographic-practice","title":"Resources for good cartographic practice","text":"<p>Here are more resources for choosing color palettes for data visualization:  </p> <ul> <li>ColorBrewer </li> <li>Scientific color maps </li> <li>Why we use bad color maps and what you can do about it </li> <li>Color in a perceptually uniform way </li> </ul>"},{"location":"code/cart/feature_outlines/","title":"Show feature outlines without fills","text":"<p>It is often desirable to symbolize the perimeters of features without showing their interiors. You can do this with the .style() method. This involves three steps:</p> <ol> <li> <p>Define style parameters.  </p> </li> <li> <p>Initialize map layer widget and apply style parameters.  </p> </li> <li> <p>Add the map layer widget to the map.    </p> </li> </ol> <pre><code>//  Define style parameters for feature collection layer.  \n\nvar style_fc = {\ncolor: 'string',                    //  Stroke (perimeter) color as string ('white').\nwidth: number,                      //  Stroke (perimeter) width  as number (0.5)\nfillColor: 'FFFFFF00'               //  Fill (interior) color with opacity channel set to 00.\n};\n\n//  Initialize map layer as a widget.\n//  Call style parameters as argument in .style() method.\n\nvar fc_layer = ui.Map.Layer(\nregions.style(style_fc),             //  Call style parameters with .style method.\n{},                                  //  Viz parameters as empty object.\n'string',                            //  Name of the layer (string).\ntrue                                 //  Show by default (true or false)\n);\n\n//  Add map layer to a Map or map widget variable.  \n\nmap_widget.add(fc_layer);              // Note: you use .add() method, not .addLayer() method.\n</code></pre>"},{"location":"code/cart/gradient_legend/","title":"Gradient legend","text":"<pre><code>// Load cart module.\n\nvar cart = require('users/jhowarth/eePrimer:modules/cart.js');\n\n// Construct gradient legend.\n\nvar legend = cart                                                     // module\n.makeGradientLegend(                                                // function\nviz_params,                                                       // viz parameters\n'Legend title',                                                   // legend title\n'bottom-left'                                                     // position on map\n)\n;\n\n// Add legend to map.  \n\nMap.add(legend);\n</code></pre>"},{"location":"code/cart/palettes_mb/","title":"Palettes for multiband images","text":"<p>One palette, one band. That is the simple mantra. If your image only contains one band, then there\u2019s no problem. EE will assume you want to display that one. If your image contains more than one band and your viz parameters includes a palette, then EE will throw you an error because it wants to know which band to display with that palette.</p> <p>One way to solve this problem is to specify the band in the viz parameters.</p> <pre><code>// Viz parameter pattern for multiband images and one palette.\n\nvar viz= {\nmin: number,                // The min data value to display.\nmax: number,                // The max data value to display.\nbands: 'band name',         // The band name as a string.\npalette: palette_name       // The palette name (called by variable's name)  \n};\n</code></pre> <p>Heads-up: the bands key in the viz dictionary is plural (bands) even though you only specify a single band.      </p>"},{"location":"code/cart/qualitative_legend/","title":"Qualitative legend","text":"<pre><code>//  Load cart module.\n\nvar cart = require('users/jhowarth/eePrimer:modules/cart.js');\n\n//  Make labels for nominal image values.\n//  The number of labels in the list must be the same as the number of colors in the palette.  \n\nvar qualitative_labels = [\n]\n;\n\n//  Construct legend for HOLC reference map.\n\nvar legend = cart.makeLegend(\n'Legend label',                         // Label for legend\npalette,                                // Palette for image  \nqualitative_labels,                     // labels to display for each color                  \n'bottom-left'                           // Where you want to put legend on the map.\n);\n\n// Add legend to map.\n\nMap.add(legend);\n</code></pre>"},{"location":"code/cart/widget_label/","title":"Label widget","text":"<p>You can create label widgets to place titles, instructions, credits, and other verbal information on maps and panels.  </p> <p>The code below illustrates the two basic steps to creating label widgets:  </p> <ol> <li> <p>Define the style parameters for the label. Many of the style parameters refer to the CSS box model.   </p> </li> <li> <p>Initialize the label widget and apply the style parameters.  </p> </li> </ol> <pre><code>//  Initialize style parameters for title labels.\n//  Name the variable: title_style\n\nvar output_style = {\nfontSize: 'string',           // Size in unis pixels as string ('24px')\nfontWeight: 'string',         // Use 'bold' for titles, otherwise you can comment out.\npadding: 'string',            // Provides breathing room with css box model. Size in pixels as string ('4px')\nwhiteSpace: 'pre',            // If you want to define line breaks manually with \\n, otherwise comment this out.  \nbackgroundColor: 'string'     // Default is white. Comment out if white works. Change if you want to add highlighter effect.\n\n}\n;\n\n//  Initialize a label widget and apply title_style.\n//  Name the variable: title\n\nvar output_label = ui.Label({\nvalue: 'the label content',     //  Content of the label\nstyle: output_style             //  Style defined in step above.\n// targetUrl:,                  //  URL as string if you want a hyperlink, otherwise comment out.     \n}\n);\n</code></pre> <p>You can then display a label widget either by printing to console or adding to a map or panel widget.  </p> <p>This will print the label to the Console of the Code Editor:</p> <pre><code>print(output_label);\n</code></pre> <p>This will add the label to a panel widget. Adding to a map widget follows same</p> <pre><code>//  Add label to panel widget.\n\nsome_panel_widget\n.add(output_label)\n</code></pre> <p>You can chain the .add() methods to add more than one widget to the panel.  </p>"},{"location":"code/cart/widget_map/","title":"Map widget","text":"<p>The code below will initialize a new map widget. You can add layers to this object, change the map center, and change the basemap, just like you have done with a big m Map object. The only difference now is that you call the name of the map variable you defined, rather than Map, when applying these methods.  </p> <pre><code>//  Initialize a map widget.  \n\nvar output = ui.Map();\n\n//  Set the base map.  \n\noutput.setOptions('SATELLITE');  // Or alternatively you can chain these two steps.\n\n// Initialize a map widget and set base map.\n\nvar output = ui.Map()\n.setOptions('SATELLITE');\n</code></pre>"},{"location":"code/cart/widget_panel/","title":"Panel widget","text":"<p>This is the simplest way to create a panel widget:</p> <pre><code>var output = ui.Panel();\n</code></pre> <p>You can style the panel based on the CSS box model. For example, the code below defines the width of the panel (as 20% of the display screen).</p> <pre><code>var output = ui.Panel({\nstyle: {\nwidth: '20%'\n}\n});\n</code></pre>"},{"location":"code/cart/widget_wipe/","title":"Wipe maps","text":"<p>A wipe map is a popular way to compare two layers and an alternative to changing the visibility or opacity of two overlying layers.  </p> <p>The code below creates a wipe between two maps with a split panel. This involves two steps:</p> <ol> <li> <p>Initialize a linker widget. This will allow you to change the map center and zoom in one map that controls the map center and zoom of a linked map. This allows the user to pan and zoom while keeping the geographic extent of the two maps consistent.    </p> </li> <li> <p>Initialize a split panel to hold the two maps and setting the wipe option to true.  </p> </li> <li> <p>Clear root and then add the split panel to it.  </p> </li> </ol> <pre><code>//  Initialize a map linker widget and link two maps.\n\nvar map_linker = ui.Map.Linker([left_map, right_map]);  //  Initialize a spilt panel widget to hold the two linked maps.   \n//  Define the orientation as 'horizontal' and wipe as true.\n\nvar split_panel = ui.SplitPanel({\nfirstPanel: map_linker.get(0),\nsecondPanel: map_linker.get(1),\norientation: 'horizontal',\nwipe: true,\n}\n);\n\n//  Clear root.\n//  Then add split panel to root.\n\nui.root.clear();\nui.root.add(split_panel);\n</code></pre>"},{"location":"code/fc/aggregate_array/","title":"Inspect unique values of one property","text":"<p>If you have completed the vector objects code, you can then do the following: </p> <pre><code>// ----------------------------------------------------------------------------\n// Inspect all the unique values for one property of features in the collection.\n// ----------------------------------------------------------------------------\n\n// 1. Get list.  \n\nvar value_list = point_collection\n.aggregate_array('name')\n.distinct()\n.sort()\n;\n\n// 2. Print list.  \n\nprint('list of values', value_list);\n</code></pre>"},{"location":"code/fc/convert_fc_to_binary/","title":"Convert to binary image","text":""},{"location":"code/fc/convert_fc_to_binary/#introduction","title":"Introduction","text":"<p>This procedure begins with a feature collection and produces a binary raster, or a raster that shows the presence/absence of the features in the feature collection, where the cell contains the value 1 if it was covered by a feature\u2019s geometry and the value 0 if it was not covered.  </p> <p>The procedure consists of two tasks and each task consists of three steps.  </p>"},{"location":"code/fc/convert_fc_to_binary/#prep-feature-collection","title":"Prep feature collection","text":"<p>The first task prepares a feature collection for conversion.  </p> <ol> <li>Write a function to give a feature a numeric property.</li> <li>Apply the function to every feature in a feature collection.   </li> <li>Check to see if step 2 worked as you expected. You should see that each feature in the feature collection has a property and value that correspond with the .set() arguments in the function.    </li> </ol> <pre><code>// PREPARE FEATURE COLLECTION  \n\n// Write a function to give a feature a property named 'tag' and a specified value.  \n\nvar tag_features = function(feature) {          return feature\n.set(\n{tag: 1}  // Property name and specified value  \n);                            }\n;\n\n// Apply function to all features in a feature collection (fc).  \n\nvar tagged_fc = fc.map(tag_features);         // Change fc to the name of feature collection.  \n\n// Inspect first record of collection.  \n\nprint('tagged fc', tagged_fc.first());\n</code></pre>"},{"location":"code/fc/convert_fc_to_binary/#convert-feature-collection","title":"Convert feature collection","text":"<p>The second task converts a feature collection into an image band.  </p> <ol> <li>Write a function that creates a raster initialized with zeros, cast the raster as a \u2018byte\u2019 (which makes the raster \u2018smaller\u2019 with respect to storage), and then \u2018paint\u2019 the values from the specified feature property into the raster cells.  </li> <li>Apply the function and specify the feature collection (to convert) and property (to paint).</li> <li>Inspect the result. This will print the result to the Console. Click on the carrot to see the list of bands. Because we made the raster with the .constant() method, the name of the band will be \u201cconstant\u201d. <pre><code>// CONVERT FEATURE COLLECTION TO IMAGE BAND  \n\n// Create a function to convert feature collection to image.\n\nvar makeImage = function(fc, property) {\nreturn ee.Image.constant(0)                       //  Return a raster with zeros\n.byte()                                         //  Store as byte\n.paint(fc, property);                           //  Paint values at locations from property of feature collection (fc).\n}\n;\n\n// Call function with feature collection and property arguments.\n\nvar image_output = makeImage(tagged_fc, 'tag');\n\n// Inspect the result.\n\nprint('image from fc', image_output);\n</code></pre></li> </ol>"},{"location":"code/fc/convert_to_image/","title":"Convert to nominal (class) image","text":"<p>This workflow creates a nominal image from a feature collection, or an image where each pixel value represents a class, category, or name. It assumes that each feature in the collection has a property that contains integers, where each integer represents the class, category, or name of the location.   </p> <p>The workflow involves two steps:  </p> <ol> <li> <p>Create a function that takes a feature collection and a property of features in the collection as arguments and then returns an image where each pixel value holds the specified property of the feature at that location.   </p> </li> <li> <p>Apply the function by calling it and naming the two arguments.  </p> </li> </ol> <p>The output will be an image with a single band (named \u2018constant\u2019). Any pixel that does not correspond to a feature in the collection will be masked.   </p> <pre><code>// Create a function to convert feature collection to image.\n\nvar makeImage = function(fc, property) {\nreturn ee.Image()                                 //  Create empty image\n.byte()                                         //  Store as byte\n.paint(fc, property);                           //  Paint values at locations from property of feature collection (fc).\n}\n;\n\n// Use function to convert a feature collection to an image.  \n\nvar output =                   // Name output variable\nmakeImage(                   // Call function from above\nfc_name,                   // feature collection  \n'property_name'            // property of fc to use as pixel values\n)\n;\n</code></pre>"},{"location":"code/fc/filterBounds/","title":"Filter for features that interset feature collection","text":"<p>If you have completed the buffer every feature in a collection code, then you can then do the following:   </p> <pre><code>// ----------------------------------------------------------------------------\n// Filter for features that intersect another feature collection.\n// ----------------------------------------------------------------------------\n\nvar points_in_buffers = point_collection\n.filterBounds(buffers)\n;\n\nMap.addLayer(points_in_buffers, {color:'magenta'}, 'Points in buffers from name filter',0);\n</code></pre>"},{"location":"code/fc/filterBounds_geometry/","title":"Filter for features that intersect geometry","text":"<p>If you have completed the buffer a feature code, then you can then do the following: </p> <pre><code>// ----------------------------------------------------------------------------\n// Filter for features that intersect another feature's geometry.\n// ----------------------------------------------------------------------------\n\nvar points_in_buffer = point_collection\n.filterBounds(buffer.geometry())          ;\n\nMap.addLayer(points_in_buffer, {color:'red'}, 'Points in buffer',0);\n</code></pre>"},{"location":"code/fc/filter_eq/","title":"Filter by nominal attribute","text":"<p>If you have completed the vector objects code, you can then do the following: </p> <pre><code>// ----------------------------------------------------------------------------\n// Filter collection by a nominal attribute.\n// ----------------------------------------------------------------------------\n\nvar points_filtered_by_name = point_collection\n.filter(ee.Filter.eq('name', 'S'))\n;\n\nprint ('selected by nominal attribute', points_filtered_by_name);\n\nMap.addLayer(points_filtered_by_name, {color: 'yellow'}, 'Selected by name',0);\n</code></pre>"},{"location":"code/fc/filter_gt/","title":"Filter by numeric attribute","text":"<p>If you have completed the vector objects code, you can then do the following:</p> <pre><code>// ----------------------------------------------------------------------------\n// Filter collection by a numeric attribute.\n// ----------------------------------------------------------------------------\n\nvar points_filtered_by_number = point_collection\n.filter(ee.Filter.gt('number', 1))\n;\n\nprint ('selected by numeric attribute', points_filtered_by_number);\n\nMap.addLayer(points_filtered_by_number, {color: 'cyan'}, 'Selected by number',0);\n</code></pre>"},{"location":"code/fc/map_area/","title":"Compute area of every feature in collection","text":"<p>If you have completed buffer every feature in a collection, then you can then do the following:  </p> <pre><code>// ----------------------------------------------------------------------------\n// To compute area of every feature in a collection:  \n// ----------------------------------------------------------------------------\n\n// 1. Define a function.\n\nvar compute_area = function(feature) {\nvar area_feature = feature.area();\nvar features_with_area = feature.set({area: area_feature});\nreturn features_with_area;\n};\n\n// 2. Map function over collection.\n\nvar buffers_with_area = buffers.map(compute_area);\n\nprint('buffers with area', buffers_with_area);\n</code></pre>"},{"location":"code/fc/map_buffer/","title":"Buffer every feature in collection","text":"<p>If you have completed the vector objects code, then you can then do the following:</p> <pre><code>// ----------------------------------------------------------------------------\n// To buffer every feature in a collection:  \n// ----------------------------------------------------------------------------\n\n// 1. Define a function.\n\nvar buffer_points = function(point){\nvar buffered_point = point.buffer(1000);\nreturn buffered_point;\n}\n;\n\n// 2. Map function over collection.  \n\nvar buffers = points_filtered_by_number.map(buffer_points);\n\nprint('buffer all featuers in collection filtered by number', buffers);\n\nMap.addLayer(buffers, {color:'green'}, 'Buffer all features in collection filtered by number',0);\n</code></pre>"},{"location":"code/fc/map_intersection/","title":"Intersection between a feature and collection","text":"<p>If you have completed the buffer every feature in a collection code, then you can then do the following:  </p> <pre><code>// ----------------------------------------------------------------------------\n// Intersection between a feature and collection.      \n// ----------------------------------------------------------------------------\n\n// 1. Define a function.\n\nvar intersect_features = function(feature) {\nvar intersection = feature.intersection(buffer);\nreturn intersection;\n}\n;\n\n// 2. Map function across collection.\n\nvar intersection_feature_collection = buffers.map(intersect_features);\n\nprint('Intersection from feature collection', intersection_feature_collection);\n\nMap.addLayer(intersection_feature_collection, {color: 'black'}, 'Intersection from feature collection',0);\n</code></pre>"},{"location":"code/fc/print_first/","title":"Inspect first feature","text":"<p>If you have completed the vector objects code, you can then do the following: </p> <pre><code>// ----------------------------------------------------------------------------\n// Inspect the first feature in the collection.\n// ----------------------------------------------------------------------------\n\nprint('First feature', point_collection.first());\n</code></pre>"},{"location":"code/fc/self_check_fc/","title":"Check feature collection outputs during workflow","text":""},{"location":"code/fc/self_check_fc/#introduction","title":"Introduction","text":"<p>You should learn and employ strategies to self-check your work while you are working on a solution. This involves making requests to visualize a method\u2019s output and either checking the result with known benchmarks or critically thinking: does this look right?  </p>"},{"location":"code/fc/self_check_fc/#print-feature-collection-to-console","title":"Print feature collection to console","text":"<p>For feature collections, you can print information to console. For example, the following code will print the first feature in the collection and the number of features in the collection.  </p> <pre><code>// Print information about a feature collection.  \n\nprint(\n'fc check',           // Label to print to console.\nfc.first(),           // First record in collection.\nfc.size()             // Number of records in collection.\n)\n;\n</code></pre>"},{"location":"code/fc/self_check_fc/#print-nominal-values-of-one-property-to-console","title":"Print nominal values of one property to console","text":"<p>You can run the code above to see the properties associated with each feature in the collection. With this information, you can then summarize the values for one property.</p> <p>When the property contains nominal values (words), you can quickly print a list of all the unique values.  </p> <pre><code>// Print unique values of a specified property.  \n\nprint(\n'fc property check',                // Label to print to console.\nfc.aggregate_array('property name') // Return all the values for this property.\n.distinct()                       // Filter to return only unique values.\n.sort()                           // Sort the list alphabetically.\n)\n;\n</code></pre>"},{"location":"code/fc/self_check_fc/#print-numerical-values-of-one-property-to-console","title":"Print numerical values of one property to console","text":"<p>When the property contains numerical values, you can quickly print a summary statistic for a specified property.  </p> <pre><code> print(\n'fc numerical property check',          // Label to print to console.\nfc.aggregate_min('property name'),      // Print min value of specified property.\nfc.aggregate_max('property name')       // Print max value of specified property.\n)\n;\n</code></pre>"},{"location":"code/fc/self_check_fc/#add-collection-as-layer-to-map","title":"Add collection as layer to map","text":"<p>To quickly add a feature collection as a map layer, you can define the viz parameters as an empty object and still label the layer and define the shown parameter as false (or 0).  </p> <pre><code>// Add feature collection to map as a layer for a quick check.\n\nMap.addLayer(fc, {}, 'fc quick check', 0);\n</code></pre>"},{"location":"code/fc/self_check_fc/#comment-out-after-checking","title":"Comment out after checking","text":"<p>After you have used these methods to check your work, you should comment out the lines to prevent them from running each time you run your code. This will help your code run more efficiently.  </p>"},{"location":"code/fc/table_widget/","title":"Display attributes of feature collection as a table","text":"<p>So far, we have seen how to print attributes of features and feature collections to the Console. This is helpful when working through a solution and producing an answer to the problem, but less helpful when you want to share the results of your work with a general audience.  </p> <p>In Earth Engine, you can show attributes of a feature collection as a table widget, also called a user-interface (ui) object. In the example below, we still just print the table to the Console, but eventually we will add the table to the map layout.    </p> <p>The snippet below assumes that you have worked through the starter script for the River Corridor Easement Outreach problem and have the following:    </p> <ol> <li>You have a feature collection called large_owners (change this name to whatever you called your final result),  </li> <li>Each feature in this collection has a property called \u2018OWNER1\u2019,</li> <li>Each feature also has a property called \u2018ACRES\u2019 that you want to sort the table by in descending order.    </li> </ol> <pre><code>// --------------------------------------------------------------------------------\n// Display attributes of feature collection as a table.\n// --------------------------------------------------------------------------------\n\n// In this example, large_owners contains the parts of parcels that overlap corridor with acres as an attribute.\n\nvar results = ui.Chart.feature.byFeature(large_owners, 'OWNER1');\nresults.setChartType('Table');\nresults.setOptions(\n{\nallowHtml: true,                // Formatted values of cells with html tags will be rendered as HTML.\npageSize: 50,                   // The number of rows to show in each page.\nfrozenColumns: 1,               // The number of columns from the left to 'freeze' when scrolling horizontally. Note that this works in the Console, but not when you open the table in a new browser panel.    \nsort: 'enable',                 // Users can click on a header to sort table by that column.  \nsortAscending: false,           // True = sort ascending; False = sort descending.\nsortColumn: 1                   // Index of column to sort. 0 is first column, 1 is second.  \n}\n)\n;\nresults.style().set({stretch: 'both'});\n\n// Print table.\n\nprint('Land owners to contact', results);\n</code></pre>"},{"location":"code/fc/union/","title":"Union features in collection","text":"<p>If you have completed the buffer every feature in a collection code, then you can then do the following:</p> <pre><code>// ----------------------------------------------------------------------------\n// Union features in a feature collection.    \n// ----------------------------------------------------------------------------\n\nvar union_feature_collection = buffers.union();\n\nprint('Union from feature collection', union_feature_collection);\n\nMap.addLayer(union_feature_collection, {color: 'black'}, 'Union from feature collection',0);\n</code></pre>"},{"location":"code/features/area/","title":"Compute area","text":"<p>If you have completed the buffer a feature code, then you can do the following:    </p> <pre><code>// ----------------------------------------------------------------------------\n// To compute area of a feature.\n// ----------------------------------------------------------------------------\n\nvar area_buffer = buffer.area();\n\nprint('area of buffer', area_buffer);\n\nvar buffer_with_area = buffer.set({area: area_buffer});\n\nprint('buffer with area', buffer_with_area);\n</code></pre>"},{"location":"code/features/buffer/","title":"Buffer a feature","text":"<p>If you have completed the vector objects code, you can then do the following:    </p> <pre><code>// ----------------------------------------------------------------------------\n// To buffer a feature.\n// ----------------------------------------------------------------------------\n\nvar buffer = point01.buffer(1000);\n\nprint('buffer a feature', buffer);\n\nMap.addLayer(buffer, {color:'blue'}, 'Buffer a feature',0);\n</code></pre>"},{"location":"code/features/intersection/","title":"Intersection of two features","text":"<p>If you have completed the buffer a feature code, then you can do the following:  </p> <pre><code>// ----------------------------------------------------------------------------\n// Intersection of two features.\n// ----------------------------------------------------------------------------\n\nvar buffer = point01.buffer(1000);\nvar buffer2 = point02.buffer(1000);\n\nvar intersection_features = buffer.intersection(buffer2;\n\nprint('Intersection of two features', intersection_features);\n\nMap.addLayer(intersection_features, {color: 'gray'}, 'Intersection of two features',0);\n</code></pre>"},{"location":"code/features/starter_coords/","title":"Vector objects","text":"<pre><code>// ----------------------------------------------------------------------------\n// Vector objects.  \n// ----------------------------------------------------------------------------\n\n// Here are three starter coordinates stored as a dictionary.\n\nvar coords = {\npt1: [-73.168687, 44.013513],\npt2: [-73.156242, 44.006167],\npt3: [-73.173494, 44.008142]\n}\n;\n\n// Here are three geometries constructed from these coordinates.  \n\nvar geometry = ee.Geometry.Point(coords.pt1);\nvar geometry2 = ee.Geometry.Point(coords.pt2);\nvar geometry3 = ee.Geometry.Point(coords.pt3);\n\n// Here are three features.\n\nvar point01 = ee.Feature(geometry,{name: 'S', number: 1});\nvar point02 = ee.Feature(geometry2,{name: 'O', number: 2});\nvar point03 = ee.Feature(geometry3,{name: 'S', number: 3});\n\n// Here is a feature collection that contains three features.  \n\nvar point_collection = ee.FeatureCollection([point01, point02, point03]);\n\n// Inspect the collection.  \n\nprint('Point collection', point_collection);  </code></pre>"},{"location":"code/features/union_right/","title":"Union two features","text":"<p>If you have completed the vector objects code, you can then do the following: </p> <pre><code>// ----------------------------------------------------------------------------\n// Union two features.\n// ----------------------------------------------------------------------------\n\nvar buffer = point01.buffer(1000);\nvar buffer2 = point02.buffer(1000);\n\nvar union_features = buffer.union(buffer2);\n\nprint('Union of two features', union_features);\n\nMap.addLayer(union_features, {color: 'gray'}, 'Union from two features',0);\n</code></pre>"},{"location":"code/geometry/calculateLength/","title":"Calculate line length","text":"<p>Geometry objects have implicit spatial properties, like length, area, center, etc. Earth Engine provides methods to calculate these for each geometry class. For example, the method .length() calculates the length of a line (or \u2018LineString\u2019) object. To call the method, you append .length() to the variable that stores the line object.  </p> <p>The snippet below assumes that you have a line object named \u2018line\u2019.  </p> <pre><code>//  Calculate the length of a line object.\n\nvar line_length = line\n.length()                   ;\n\n// Inspect result.  \n\nprint('route distance', line_length);\n</code></pre> Check your understanding <li>What statement would you write to find the center of the line? Hint: use the Docs tab to look for a method associated with ee.Geometry.LineString that sounds like it would calculate the center of the line."},{"location":"code/geometry/constructFeature/","title":"Construct feature from geometry","text":"<p>A geometry object represents where, but not what is where. In other words, geometry objects represent geographic locations, but they do not describe conditions or properties of these locations. For example, you can store the location of a town with a geometry object, but not the town\u2019s name, population, area, etc.       </p> <p>A feature object stores both the geometry and qualitative and/or quantitative properties of a location. Often, you will hear people who are accustomed to geographic information systems use the word attribute rather than property. For our purposes, they are synonymous. Usually, the attributes of features will be defined as part of a data product. But you can also define and alter attributes as necessary with code.  </p> <p>Earth Engine provides a method to make features by calling ee.Feature(). As arguments (between the parentheses), it takes a geometry object and the attributes. The attributes must be defined as a dictionary with a key and a value. You might think of this like a data table: the key is the column title and the value is the row.</p> <p>The example below again assumes that you have a point object named \u2018point\u2019.  </p> <pre><code>// Set a property of point.\n\nvar point_feature = ee.Feature(point, {name: 'my first point'});\n\n// Print the two different objects to compare.  \n\nprint('Point as geometry', point, 'Point as feature', point_feature);\n</code></pre> Check your understanding  Try to change the name of the feature to 'Gulf of Guinea'.   What does the statement now say?"},{"location":"code/geometry/constructLineGeometry/","title":"Construct line geometry","text":"<p>A line consists of two or more points.  </p> <p>When you stretch a string tightly between two points on a globe, you show the great circle route. This shows the shortest distance across the globe\u2019s surface between the two points.  </p> <p>Google Earth Engine uses a spheroid model to represent line objects. The resulting lines represent great circle routes, just like if you were working with a string and a globe.  </p> <p>Earth Engine provides a method to construct line objects from two or more points. You call the method with the phrase ee.Geometry.LineString(). It takes a list of points as an argument.     </p> <pre><code>// Construct two points.\n\nvar point = ee.Geometry.Point([0,0]);\nvar point2 = ee.Geometry.Point([-90,60]);\n\n// Construct line from two points.\n\nvar line = ee.Geometry.LineString([point, point2]);\n\n// Inspect results.\n\nprint('Great circle arc', line);\n\n// Display result as a layer on the map.\n\nMap.addLayer(line, {color: 'red'}, 'Great circle line');\n</code></pre> Check your understanding <li>If this line represents the shortest distance between two points, why does the line bend rather than go straight?</li>"},{"location":"code/geometry/constructPointGeometry/","title":"Construct point geometry","text":"<p>While you can create geometry objects with the drawing buttons in the upper-left of the Map user interface, you can also create them with code.   </p> <p>Earth Engine provides a method to make a point from coordinates (x,y). You call the method with the phrase ee.Geometry.Point(). Then you tell it the coordinates in the parentheses. To work, the coordinates need to be in the form of a list.  </p> <pre><code>// Construct new point geometry object.  \n\nvar point = ee.Geometry.Point([0,0]);\n\n// Inspect the result.\n\nprint('Point object', point);\n</code></pre> Check your understanding <li>Which number represents the Prime Meridian</li> <li>Which number represents the Equator?"},{"location":"code/geometry/convert_units/","title":"Convert units","text":"<p>By default, Earth Engine often computes spatial measurements in meters. So length returns meters and area returns square meters. (It is good practice to use the docs tab in the code editor to double-check the units returned by your method.)  </p> <p>You can convert these units into meters through simple math operations of number objects. The example below converts meters to kilometers.   </p> <p>The snippet below assumes that you have a line object named \u2018line\u2019.  </p> <pre><code>//  Calculate the length of a line object.\n\nvar line_length_km = line\n.length()\n.divide(1000)                   ;\n\n// Inspect result.  \n\nprint('route distance kilometers', line_length_km);\n</code></pre> Check your understanding <li>How would you convert meters to miles?"},{"location":"code/ic/add_bands/","title":"Add bands","text":"<pre><code>// Add bands to an image.\n\nvar output =                        // Image that you will produce.\nimage_01                          // image_01 with one or more bands to add first to output\n.addBands(image_02)               // image_02 with one or more bands to add second to output  \n;\n\n// Example\n\nvar change_stack =\nyear_one\n.addBands(year_two)\n;\n</code></pre>"},{"location":"code/ic/cloud_masks/","title":"Mapping cloud masks","text":"<p>Most images in the earth engine data catalog include a quality control band that describes the degree to which each pixel in the image may be affected by clouds.  </p> <p>The \u2018image_tools\u2019 module that I wrote includes custom functions that you can call to use the band information and mask pixels that are affected by clouds directly or indirectly (the shadows that clouds cast). This can be helpful for generating cloud-free images for visualization purposes.  </p> <p>To use these tools, first load the module and then map the appropriate function over every image in the collection. The snippet below provides general examples. In the examples, the \u2018input\u2019 variable is an image collection. The output will also be an image collection.  </p> <pre><code>// Load image_tools module to access cloud masks.\n\nvar tools = require(\"users/jhowarth/eePrimer:modules/image_tools.js\");\n\n// Apply cloud mask to every image in a MODIS collection.\n\nvar output = input.map(tools.cloudMask_MODIS);\n\n// Apply cloud mask to every image in a Sentinel 2 collection.  \n\nvar output = input.map(tools.cloudMask_S2);\n</code></pre>"},{"location":"code/ic/filter_by_dates/","title":"Filter by dates","text":""},{"location":"code/ic/filter_by_dates/#introduction","title":"Introduction","text":"<p>An image collection often contains a time series, or a number of observations that are collected at some time interval over a duration of time. The interval between observations represents the temporal resolution of the collection and the duration of time represents the temporal extent.  </p> <p>In most cases, you will want to work with a subset of images in an image collection based on a time window defined by your research question. You can filter the collection based on time constraints in a number of ways.  </p>"},{"location":"code/ic/filter_by_dates/#filter-by-date-range","title":"Filter by date range","text":"<p>The ee.Filter.date() method will filter an image collection by a start and end date. The start date is inclusive and the end date is exclusive. This means that a record with the start date will be included in the output, but a record that matches the end date will not. Both dates are strings in the format \u2018YYYY-MM-DD\u2019.  </p> <p>For example, this snippet will filter an image collection for all records in January 2000.</p> <pre><code>// Filter image collection with start and end dates.  \n\nvar output = input                                     // Name of output and input\n.filter(                                          // Call the filter method.\nee.Filter.date('2000-01-01', '2000-02-01')      // Call this particular filter with start and end dates.\n)\n;\n</code></pre> <p>This method is used so frequently that EE provides a shorthand.  </p> <pre><code>// Shorthand for filtering image collection with start and end dates.  \n\nvar output = input.filterDate('2000-01-01', '2000-02-01');\n</code></pre>"},{"location":"code/ic/filter_by_dates/#filter-by-calendar-range","title":"Filter by calendar range","text":"<p>Often your research question will concern a season or portion of time that recurs every year. For example, to study sea conditions during a hurricane season in the Atlantic, you would could filter for records between August and October. If you are studying one hurricane season, you could use the date range method. But if you wanted to make comparisons between hurricane seasons, then the date range method becomes laborious.  </p> <p>For seasonal windows, it is often helpful to use the ee.Filter.calendarRange() method. This takes three arguments: start, end, and calendar unit. The first two are integers. The last is a string. And to make things fun, the start and end arguments are now both inclusive.  </p> <p>For example, this snippet filters an image collection for all records between the years 2000 and 2010. Because the end number is inclusive, 2010 records will be returned in the output.    </p> <pre><code>// Filter image collection by year calendar range.  \n\nvar output = input\n.filter(ee.Filter.calendarRange(2000, 2010, 'year'))\n</code></pre> <p>This snippet filters an image collection for all records between August and October of any year. Because the end number is inclusive, October records will be returned in the output.  </p> <pre><code>// Filter image collection by month calendar range.  \n\nvar output = input\n.filter(ee.Filter.calendarRange(8, 10, 'month'))\n</code></pre> <p>You can also chain these filters together. This snippet filters an image collection for all records between August and October for the years between 2000 and 2010.  </p> <pre><code>// Filter image collection by year and month calendar ranges.  \n\nvar output = input\n.filter(ee.Filter.calendarRange(2000, 2010, 'year'))\n.filter(ee.Filter.calendarRange(8, 10, 'month'))\n</code></pre>"},{"location":"code/ic/filter_by_image_property/","title":"Filter by image property","text":"<p>This pattern is similar to that for filtering feature collections by properties.</p> <p>The general form is:   </p> <pre><code>var output = ic\n.filter(ee.Filter.__('property name', value))\n;\n</code></pre> <p>For example, this snippet filters a Landsat 8 image collection for all images with less than 20 percent cloud cover.</p> <pre><code>var output = L8_collection\n.filter(ee.Filter.lt('CLOUD_COVER', 20))\n;\n</code></pre>"},{"location":"code/ic/filter_by_location/","title":"Filter by location","text":"<pre><code>// Filter an image collection by a location.\n\nvar output_ic = input_ic.filterBounds(geometry)\n;\n</code></pre>"},{"location":"code/ic/inspect_ic/","title":"Inspect image collection","text":"<p>This pattern is similar to that for working with feature collections. An image collection usually contains a lot of images, so if you try to inspect the collection with the print() method, EE will often throw you an error because you are asking it to do too much work. Imagine if you asked a librarian to go into the stacks and bring you every issue that has ever been published by a journal or magazine. They too would likely turn red and balk at the request.  </p> <p>So to politely get a sense of an image collection\u2019s contents, a good strategy is to print the first record and the number of records in the collection.   </p> <pre><code>// Inspect first record and print size (number of images) of collection.\n\nprint(\n'label',              // Label for this request that is printed to Console.\ninput.first(),           // The first record in the image collection.\ninput.size()             // The number of records in the image collection.  \n);\n</code></pre>"},{"location":"code/ic/landsat_scaling_function/","title":"Scale landsat collections","text":"<pre><code>// A function to apply scaling factors for Landsat collections.\n\nfunction applyScaleFactors(image) {\nvar opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\nvar thermalBand = image.select('ST_B.*').multiply(0.00341802).add(149.0);\nreturn image.addBands(opticalBands, null, true)\n.addBands(thermalBand, null, true);\n}\n</code></pre>"},{"location":"code/ic/load_ic/","title":"Load image collection","text":"<p>This pattern resembles that for loading feature collections and images. You name a variable for the output and use the ee.ImageCollection() method. This takes the asset id as an argument and the asset id must be a string.   </p> <pre><code>// Load image collection.\n\nvar ic_name = ee.ImageCollection('address');\n</code></pre>"},{"location":"code/ic/reduce_local_operation/","title":"Reduce with local operations","text":"<p>An image collection often contains stacks of images where the images in the collection overlap each other. You can reduce the stack of images to a single image with a statistical operator.  </p> <p>For example, if you have a stack of images in a collection where each image has bands that record the sea surface temperature and chlorophyll-a concentrations of a region over time, you can compute the mean value of each pixel in each band with the .mean() method.    </p> <pre><code>// Reduce image collection into an image that represents the mean value for each pixel in the collection.\n\nvar output = input.mean();\n</code></pre> <p>If you explore the EE docs for image collections, you should be able to spot a number of these statistical and math reducers, including:  </p> <ul> <li>.mean()</li> <li>.median()</li> <li>.max()  </li> <li>.min()  </li> <li>.product()  </li> <li>.sum()</li> </ul> <p>All of these take an image collection as an input and reduce it to a single image. They also all do this operation for each band of every image.  </p>"},{"location":"code/ic/select_bands/","title":"Select bands","text":"<p>If you only need to work with a subset of bands from an image (or from every image in an image collection), it is good practice to select the bands early in your workflow. This lightens the load of your computation, which can help reduce your carbon footprint and save you time.  </p> <p>Use the .select() method with the band name as an argument.  </p> <pre><code>// Select band from an image (or image collection)\n\nvar output = input.select('band_name');\n</code></pre> <p>To select more than one band from the image, use a list of strings as the argument.</p> <pre><code>// Select multiple bands from an image (or image collection)\n\nvar output = input.select(['first_band_name', 'second_band_name']);\n</code></pre> <p>It is often helpful to rename a band after you have selected it. This is not required. It can just be helpful, because the default names for bands are sometimes a bit weird and it can be nice to give them names that are more friendly and intuitive.</p> <p>To give your selected bands new names, add a second argument to the .select() method that defines the new names of the bands. The length of this second argument must match the length of the first. In other words, you need to provide one new name for each band.  </p> <pre><code>// Select multiple bands from an image (or image collection)\n\nvar output = input.select(['first_band_name', 'second_band_name'], ['first_band_new_name', 'second_band_new_name']);\n</code></pre>"},{"location":"code/ic/sort_cloud_cover/","title":"Sort by cloud cover","text":"<pre><code>// Sort image collection by cloud cover property.\n\nvar output = input.sort('cloud_cover_property');\n\n// Example for L5.\n\nvar red_5_sort = red_5.sort('CLOUD_COVER');\n</code></pre>"},{"location":"code/image/apply_mask/","title":"Apply mask to image","text":"<p>This workflow involves two rasters:  </p> <ul> <li>a bottom raster contains values to be displayed or analyzed,</li> <li>a binary raster contains two possible values (zeros or ones).</li> </ul> <p>When you apply a mask, you drape the binary raster over the bottom raster. Any location with the value one (1) in the binary raster will be visible in the bottom raster. Any location with the value zero (0) in the binary raster will be masked. A masked value will not be visible when you display the image on a map, nor will it be used in computations when you mask an image in a workflow.  </p> <pre><code>// Apply binary raster as a mask on another raster.  \n\nvar image_with_mask = bottom_raster.updateMask(binary_raster);\n</code></pre>"},{"location":"code/image/chart_area_percent/","title":"Chart area of regions as percent of a zone","text":""},{"location":"code/image/chart_area_percent/#introduction","title":"Introduction","text":"<p>The snippets below creates the chart that is shown in the Land Cover app.</p> <p>Here are the main steps.</p>"},{"location":"code/image/chart_area_percent/#1-convert-pixel-area-into-percentage-decimal","title":"(1) Convert pixel area into percentage decimal.","text":"<p>The first step is to store the percent of the study region area represented by each pixel. To do this, we can divide the pixel area layer by a constant (the area of the study region). The snippet below gets this number from the output of a previous step (when we computed the area of the region). The snippet renames the band \u2018all of town\u2019. This will make the labels look cleaner in the chart at the end.   </p> <pre><code>// ----------------------------------------------------------------------------\n// Chart areas of regions as a percent of a zone.\n// ----------------------------------------------------------------------------\n\n// Convert pixel area into precentage decimal.  \n\nvar pixel_percentages = pixel_area_layer\n.divide(area_study_region.getNumber('area'))\n.rename('all of town')\n;\n\n// Inspect the result. Notice the name of the band in this image.\n\nprint('pixel_percentage_layer', pixel_percentages);\n</code></pre>"},{"location":"code/image/chart_area_percent/#2-construct-an-image-with-dough-and-cutter-bands","title":"(2) Construct an image with dough and cutter bands.","text":"<p>The next step is to set up the image that we will chart. The image needs to contain at least one band to use as the dough and one band to use as the cutter. The cutter must be the last band.  </p> <p>The snippet below sets up three dough bands:  </p> <ol> <li>Pixel percentages for an entire raster.  </li> <li>Pixel percentages for just the protected lands.</li> <li>Pixel percentages for just the uva lands without any permanent protections.  </li> </ol> <p>The last band in the image represents the cutters, or the zones that we want to compute the area for. The snippet also renames the bands again to make the labels on the chart at the end look cleaner.     </p> <pre><code>// Construct image with three dough bands and one cutter band.\n\nvar simple_lc_area = pixel_percentages                              // Band with pixel percentages.  \n.addBands(pixel_percentages.updateMask(protected_lands_image)     // Band with pixel percentages masked by protected lands binary.  \n.addBands(pixel_percentages.updateMask(uva_not_protected))        // Band with pixel percentages masked by UVA binary without protections.\n.addBands(simple_lc)                                              // Band with simple land cover classes.\n.rename('protected in town', 'uva without permanent protections in town', 'land cover')   // Labels for added bands.  \n)\n;\n\n// Inspect the result.  \n\nprint('simple_lc_area', simple_lc_area);\n</code></pre>"},{"location":"code/image/chart_area_percent/#3-chart-zonal-statistic-for-each-dough-band-by-cutter","title":"(3) Chart zonal statistic for each dough band by cutter.","text":"<pre><code>// Chart zonal statistic for each dough band by cutter.\n\n// Create list of labels. The first item is a blank placeholder. The rest are labels for the cutters.  \n\nvar lc_labels = [\n'',\n'Tree canopy',\n'Water',\n'Old field',\n'Active field',\n'Developed'\n]\n;\n\n// Create dictionary of chart arguments.\n\nvar chart_params = {\nimage: simple_lc_area,                      // Image with dough bands and cutter band.\nclassBand: 'land cover',                    // Name of the band to use as cutter.  \nregion: study_region,                       // Region to perform operation.  \nreducer: ee.Reducer.sum(),                  // Type of zonal statistic to calculate.  \nscale: 10,                                  // Scale to carry out operation.\nclassLabels: lc_labels,                     // Labels of cutters to use in chart.\n}\n;\n\n// Create the chart.  \n\nvar chart = ui.Chart.image.byClass(chart_params)      // Dictionary of chart arguments.  \n.setChartType('BarChart')                         // Type of chart.\n.setOptions({\ntitle: 'Land cover in study region',            // Title for chart.\nhAxis: {\ntitle: 'Percent of study region',             // Title for horizontal axis.  \ntitleTextStyle: {italic: false, bold: true},\n},\ncolors: simple_lc_palette,                      // Colors to use for chart.  \n}\n)\n;\n\n// Inspect chart.\n\nprint(chart);\n</code></pre>"},{"location":"code/image/check_module/","title":"Use module to check image output","text":"<pre><code>// Load module.\n\nvar check = require('users/jhowarth/eePrimer:modules/checks.js');\n\n// Use meanValue() function to print mean value of an image (dough) with a geometry (cutter).\n\ncheck.meanValue(                  // Call function\ndough,                          // Image to check\nbands,                          // Bands to select in image as a list\ngeometry,                       // Geometry to use as a cutter\nresolution,                     // Pixel resolution (scale) of image (dough)\nlabel                           // Label to print to console above result.\n)\n;\n\n// Example  \n\ncheck.meanValue(      red_5_all_clear,\nbands,\ngeometry,\n30,\n'Red 5 check'\n)\n;\n</code></pre>"},{"location":"code/image/compute_area/","title":"Compute area of a zone","text":"<p>This workflow computes the area of a region as a zonal statistic. A zonal statistic computes a statistic with the values of one layer in one or more zones defined by a second layer. I tend to think of the zones as cookie cutters and the image that provides the statistics as the cookie dough. We will draw this out in class.</p> <pre><code>// Create a layer where each pixel value reports the pixel's area.\n\nvar pixel_area_layer = ee.Image\n.pixelArea()\n;\n\n// Inspect the result. This should be an image with one band named \"area\".  \n\nprint('pixel area layer', pixel_area_layer);\n\n// Create a dictionary for reducer arguments.  \n\nvar reduce_params = {\nreducer: ee.Reducer.sum(),          // Name of reducer\ngeometry: cutter_features,          // Cutter: Feature collection, feature, or geometry that defines the zone.     \nscale: 10,                          // Scale to perform operation. This usually needs to be coarser than dough image, otherwise Google complains about the work involved.\nmaxPixels: 1e12                     // How many pixels should Google work with before bailing on task? I usually set this at 1e12.\n}\n;\n\n// Perform zonal statistic on dough by calling the dictionary defined above.\n\nvar zonal_area_output = dough.reduceRegion(reduce_params);\n\n// Inspect results.\n\nprint('zonal area output', zonal_area_output)\n</code></pre>"},{"location":"code/image/construct_image/","title":"Construct image from address","text":"<p>Use the ee.Image() method with a string argument (\u2018address\u2019). This will load an image referenced by the address into the variable that you name.</p> <pre><code>// Construct image from address.\n\nvar output_image = ee.Image('address');\n</code></pre>"},{"location":"code/image/inspect_image/","title":"Inspect image","text":"<p>You can print an image to the Console, though this won\u2019t visualize the image with color. It returns \u2018metadata\u2019 (data about data). Dry as this sounds you can learn some things from it.</p> <pre><code>// Inspect an image.\n\nprint('label', data_object);        // Where data_object is the name of the variable that holds the image.  \n</code></pre> <p>In the Console panel, expand the \u2018carrots\u2019 to explore the properties and bands of the image. Please note that an image will alway contain at least one band. The name of the band is in double quotes. The default name of the first band in an image is \u201cb1\u201d (short for band one).  </p> <p>You can also inspect an image with the Inspector panel. With the crosshair, click on a location and the value of each band in each image at that location will print to the Inspector panel.   </p>"},{"location":"code/image/map_algebra/","title":"Map algebra","text":"<p>When two or more rasters have the same cell size, extent, orientation, and anchor (in other words, when the cells of two rasters align), you can perform algebra with the values in each cell.</p> <p>For example, a simple algebraic expression is: A * B = C. In map algebra, A and B are raster layers and the product C is also a raster layer. Again, the idea is that the computer calculates A * B = C for every location in the raster, always comparing the same cell location between the two input rasters and storing the product in the corresponding cell of the output raster.      </p> <pre><code>// Multiply value at each location for two images\n\nvar raster_C = raster_A.multiply(raster_B);\n</code></pre> <p>The table below lists some of the common algebraic operators.</p> <p> Math operator Method * .multiply() / .divide() + .add() - .subtract() <p></p> <p>Each of these operators can take either another raster or a constant as an argument. When the argument is another raster, the operator compares the values of each cell between two rasters. When the argument is a constant, the operator scales every value by the constant. This is common when converting between units of measurement.  </p> <p>Map algebra can also be performed with logical operators. The two most common examples are intersection (and) and union (or). The table below shows the methods for each.  </p> <p> Logical operator Method Intersection .and() Union .or() <p></p> <p>The output for logical comparisons is a binary raster, where the value 1 identifies where the expression is true and 0 where it is false.</p>"},{"location":"code/image/normalized_difference/","title":"Normalized difference","text":"<pre><code>// Compute normalized difference between a first and second band of an image.  \n\nvar output = input.normalizedDifference(['first_band', 'second_band']);\n</code></pre>"},{"location":"code/image/reclassify/","title":"Reclassify with defined breaks","text":"<pre><code>//  Classify image with defined breaks.\n\nvar output = input\n.gte(first_threshold)\n.add(input.gte(second_threshold))\n.add(input.gte(third_threshold))\n;\n</code></pre>"},{"location":"code/image/reclassify_image/","title":"Generalize (reclassify) image","text":"<pre><code>// Make list of old values.  \n\nvar old_values = [0,1,2,3,4,5];\n\n// Make list of new values. The length of this list must be the same as list above.\n\nvar new_values = [1,2,2,1,3,3];\n\n// Replace old values with new values.   \n\nvar reclass_image = old_image.remap(old_values, new_values);\n</code></pre>"},{"location":"code/image/reduce_by_regions/","title":"Reduce by regions","text":"<p>This zonal operation works with an image and a feature collection. It uses the regions defined by each feature in the feature collection to summarize the values of the image.  </p> <p>It can sometimes be helpful to think of the analogy of \u2018cookie dough\u2019 and \u2018cookie cutter\u2019 (place cookie cutters onto the dough to summarize dough values). The image provides the dough and the feature collection provides the cutters. </p> <p>The output of this operation is a feature collection, where each feature in the collection has a new property that holds the summary statistic of the image. This new property is named after the reducer used as an argument.</p> <pre><code>// Reduce image values by regions defined by each feature in a feature collection.  \n\nvar output = image_dough                    // create output from image (dough)\n.reduceRegions({                          // method to compute a zonal statistic\ncollection: fc,                         // feature collection to use as cookie cutters  \nreducer: ee.Reducer.____(),             // name of reducer (for dough values within each cutter)\nscale: __,                              // if possible same as dough, if exceeds memory then 2 or 3 times dough scale\ntileScale: 1                            // if possible 1, but if exceeds memory then 2 or 4\n}\n);\n</code></pre>"},{"location":"code/image/rgb_composites/","title":"Symbolize three bands with additive color","text":""},{"location":"code/image/rgb_composites/#use-cases","title":"Use cases","text":"<p>Use this method to symbolize data from three bands with additive color to make an RGB composite.  </p>"},{"location":"code/image/rgb_composites/#workflow","title":"Workflow","text":"<p>This involves two steps:  </p> <ol> <li>define range and bands (collectively called visualization parameters),</li> <li>visualize as a map layer.  </li> </ol>"},{"location":"code/image/rgb_composites/#code","title":"Code","text":"<pre><code>// 1. Define 'visualization parameters', or how values map to colors.\n\nvar vis = {\nmin:  0,                  //  Min value of data range.\nmax:  255,                //  Max value of data range.\nbands: [                  //  Band list:\n'band_name',            //  Symbolize this band with red channel\n'band_name',            //  Symbolize this band with green channel\n'band_name'             //  Symbolize this band with blue channel\n],          }\n;\n\n// 2. Add as layer to map.\n\nmap.addLayer(\ndata_object,              //  Image with bands to visualize\nvis,                      //  Range and band list\n'layer label',            //  Layer label  \nfalse,                    //  Shown (optional, default is 1)  \n1                         //  Opacity (optional, default is 1)\n)\n;\n</code></pre>"},{"location":"code/image/rgb_composites/#contrast-enhance-composites","title":"Contrast enhance composites","text":"<p>The example above uses the same min and max display range for all three bands in the composite. The histogram for each of band, however, may differ because each band may contain different data ranges. Using a single display range for all three bands will thus likely diminish the contrast of your composite.      </p> <p>You can enhance the contrast of RGB composites by defining a different min and max for each band. Your visualization parameters will essentially contain three lists: list of min values, list of max values, list of bands. The first min value and first max value in the list will be applied to the first band, the second min value and second max value will be applied to the second band, and the third min value and third max value will be applied to the third band.   </p> <pre><code>// 1. Define 'visualization parameters', or how values map to colors.\n\nvar vis = {\nmin:  [0, 10, 0]          //  Min value of data range for each band in the list.\nmax:  [255, 245, 245],    //  Max value of data range for each band in the list.\nbands: [                  //  Band list:\n'band_name',            //  Symbolize this band with red channel\n'band_name',            //  Symbolize this band with green channel\n'band_name'             //  Symbolize this band with blue channel\n],          }\n;\n\n// 2. Add as layer to map.\n\nmap.addLayer(\ndata_object,              //  Image with bands to visualize\nvis,                      //  Range and band list\n'layer label',            //  Layer label  \nfalse,                    //  Shown (optional, default is 1)  \n1                         //  Opacity (optional, default is 1)\n)\n;\n</code></pre>"},{"location":"code/image/self_check_image/","title":"Check image output during a workflow","text":""},{"location":"code/image/self_check_image/#introduction","title":"Introduction","text":"<p>You should learn and employ strategies to self-check your work while you are working on a solution. This involves making requests to visualize a method\u2019s output and either checking the result with known benchmarks or critically thinking: does this look right?  </p>"},{"location":"code/image/self_check_image/#print-image-to-console","title":"Print image to console","text":"<p>For images, you can print information to the Console. This will confirm that the output is an image and describe the list of bands that it contains. For each band, you can also inspect the data type. A binary image should only contain integers of the set [0, 1]. A nominal image (that represents categories or names of things) should also only contain integers, but of a larger set. A quantitative image (that represents continuous values with  decimal numbers) will likely be a double data type.     </p> <pre><code>// Self check image output by printing to Console.  \n\nprint(\n'Self check image output',      // Label to print in Console.\nimage_output                    // Name of image output to check.  \n)\n;\n</code></pre>"},{"location":"code/image/self_check_image/#print-min-and-max-values-of-image-to-console","title":"Print min and max values of image to console","text":"<p>Another good strategy is to print the minimum and maximum values of an image for a study region. To do this, you need to apply the reduce region method to the image that you can nest as an argument to a print statement.   </p> <pre><code>// print min and max values of image with study region.\n\nprint(\n'image output min and max',\nimage_output.reduceRegion(\n{\nreducer: ee.Reducer.minMax(),         // The reducer for min and max values.\ngeometry: study_region,               // A feature collection or geometry that defines your study site.\nscale: __,                            // The scale of image output.\nmaxPixels: 1e12,                      // The maximum number of pixels to use in the computation.\ntileScale: 2                          // You can use two (2) to help if run quickly.\n}\n)\n);\n</code></pre> <p>Please note that this computation can be intensive and slow down your script, so after you have run the script to check your work, you should comment out the lines to avoid running them repetitively when you no longer need the information.</p>"},{"location":"code/image/self_check_image/#add-the-image-as-a-grayscale-layer-to-the-map","title":"Add the image as a grayscale layer to the map","text":"<p>You can quickly add the image as a grayscale layer to the map. A grayscale will display the data values on a gradient from black to white with black for the lowest value and white for the greatest value. To do this quickly, you can run the code below.    </p> <pre><code>// Add image as a grayscale layer to map for a quick peek.  \n\nMap.addLayer(image_output, {min: __, max: __}, 'Image output check', 0);\n</code></pre> <p>Please note that you will need to enter the min and max values for the image. The previous code block above is a good way to get this information quickly. If you do not specify the min and max data values to display, the layer will likely have very poor contrast (because the min and max will be defined by the image data type, which is usually a much greater range than that populated with data values). Also note that the default palette is [\u2018black\u2019, \u2018white\u2019], so you do not need to specify a palette to produce a grayscale image.</p>"},{"location":"code/image/symbolize_gradients/","title":"Symbolize gradients with a palette","text":""},{"location":"code/image/symbolize_gradients/#use-cases","title":"Use cases","text":"<p>Use this method to symbolize continuous data, or data that represents a gradient of values (e.g. elevation, temperature, reflectance), from one band of an image.  </p> <p>In this case, your goal is to stretch a palette across a range of data values.</p>"},{"location":"code/image/symbolize_gradients/#workflow","title":"Workflow","text":"<p>To symbolize image data from a single band with color:  </p> <ol> <li>define color palette,</li> <li>define range, band, and palette (collectively called visualization parameters),</li> <li>visualize as a map layer.  </li> </ol>"},{"location":"code/image/symbolize_gradients/#code","title":"Code","text":"<pre><code>// 1. Define color palette.  \n\n// For nominal data, the number of color codes should equal the number of unique nominal values.   \n\nvar palette_name = [\n'color code',             //   Color for min value  \n'color code',             //   Color for max value or intermediate color\n'...'                     //   Last color symbolizes max value.   \n];\n\n// 2. Define 'visualization parameters', or how values map to colors.\n\nvar vis = {\nmin:  0,                  //  Min data value to symbolize.\nmax:  255,                //  Max data value to symbolize.\nbands: ['name'],          //  Source for data values.\npalette: palette_name,    //  Source for palette (range of colors)\n}\n;\n\n// 3. Add as layer to map.\n\nmap.addLayer(\ndata_object,              //  Band with values to visualize\nvis,                      //  Range, source, and palette\n'layer label',            //  Layer label  \nfalse,                    //  Shown   \n1                         //  Opacity  \n)\n;\n</code></pre>"},{"location":"code/image/symbolize_nominal/","title":"Symbolize nominal data with a palette","text":""},{"location":"code/image/symbolize_nominal/#use-cases","title":"Use cases","text":"<p>Use this method to symbolize nominal data, or data that represents categories or classes (e.g. land cover categories or elevation classes), from one band of an image.  </p> <p>In this case, your goal is to represent each unique category or class with a unique color.  </p>"},{"location":"code/image/symbolize_nominal/#workflow","title":"Workflow","text":"<p>The involves three steps:  </p> <ol> <li>define palette (set of colors),</li> <li>define range, band, and palette (collectively called visualization parameters),</li> <li>visualize as a map layer.  </li> </ol>"},{"location":"code/image/symbolize_nominal/#code","title":"Code","text":"<pre><code>// 1. Define palette.   \n\nvar palette_name = [\n'color code',             //   Describe label  \n'color code',             //   Describe label  \n'...'                     //   # color codes should match # class codes  \n];\n\n// 2. Define 'visualization parameters', or how values map to colors.\n\nvar vis = {\nmin:  0,                  //  Min class value for palette.\nmax:  1,                  //  Max class value for palette.\nbands: ['name'],          //  Source for class values.\npalette: palette_name,    //  Source for palette (range of colors)\n}\n;\n\n// 3. Add as layer to map.\n\nmap.addLayer(\ndata_object,              //  Band with values to visualize\nvis,                      //  Range, source, and palette\n'layer label',            //  Layer label  \nfalse,                    //  Shown   \n1                         //  Opacity  \n)\n;\n</code></pre>"},{"location":"code/image/threshold_image/","title":"Threshold an image","text":"<p>This happens when you apply a \u201ctrue or false\u201d criterion to a dataset.  </p> <p>For example: true or false, x is equal to 0?  </p> <p>The idea is that you ask this question for every cell in a raster and the computer answers the question by giving that cell either a 1 (if true) or 0 (if false). Often, threshold criteria are familiar math criteria.    </p> Math criterion Method equal to .eq() not equal to .neq() greater than .gt() greater than or equal to .gte() less than .lt() less than or equal to .lte() <p>The example below shows the syntax for the \u2018equal to\u2019 criterion. If the input is a binary raster, the output will be the inverse.  </p> <pre><code>// Threshold image by equality criterion.  \n\nvar output_image = input_image.eq(0);\n</code></pre>"},{"location":"code/map/addLayer/","title":"Add layer to map","text":"<p>If you have one or more point, line, or polygon objects stored as a variable, you can display the variable on the Map UI as a layer. The layer metaphor goes back to the days when people would place a mylar sheet on top of a reference map and then draw shapes on the mylar. Thus the reference map was the base layer and each mylar sheet put on top of it was a thematic layer. Even though we don\u2019t use mylar anymore, the map layer metaphor is helpful as a conceptual device.   </p> <p>In the example below, I assume you have a point object named \u2018point\u2019.  </p> <pre><code>Map.addLayer(\npoint,                  // Geometry object to show on the map.  \n{color:'blue'},         // Color to display the objects.  \n'My first point'        // A label for the layer that will appear in the label panel.\n);\n</code></pre> <p>Please note: If you don\u2019t seen the point on your map, it may be because it is not in your current map extent. So you will need to zoom out and pan around to find it. </p> Check your understanding <li>How would you change the display so that the point appears red?"},{"location":"code/map/centerObject/","title":"Center map on object","text":"<p>You can also define your map extent so that the map centers on a geometry object, like a sample point or city center.  </p> <p>In the example below, I assume you have a point object named \u2018point\u2019.  </p> <pre><code>// Center on a point.  \n\nMap.centerObject(point, 4);\n</code></pre> Check your understanding  If you have the choice, should you center the map before you add a layer, or add a layer before you center the map, or do you think that the sequence really does not matter?"},{"location":"code/map/getMapCenter/","title":"Get map center","text":"<p>When you first open the Code Editor, the Map UI will be centered on a point in  Buffalo Valley, OK. You can retrieve the coordinates of a map\u2019s center with this:  </p> <pre><code>// Get map center.\n\nvar center = Map.getCenter();\nprint('Center point', center);\n</code></pre> <p>Please copy and paste the above code snippet into the Code Editor, then run it, and try to answer the questions below.</p> Check your understanding:  Please look at the Console Panel. <li>Which number represents latitude and which represents longitude?</li> <li>What does it mean if a number is negative?</li> <p>Please write down the coordinates that you printed to the Console.  </p> <p>Now click the pan button (the little glove in the upper left of the Map UI), then click the map and, while holding your click, drag towards your left.  </p> <p>Now run the code again and try to answer the questions below.</p> Check your understanding:  Again, please look at the Console Panel. <li>Which number changed the most when you panned?</li> <li>How did it change?</li> <li>Do you think you are moving the map when you pan, or are you moving the window through which you are looking at the map?</li>"},{"location":"code/map/getZoom/","title":"Get zoom","text":"<p>By default, the map will always initialize so that you see all of the lower 48 states (plus Puerto Rico) in the map window.  </p> <p>After panning the map in the last step, you have changed the region of the world displayed on the map. But you have not changed the amount of detail that the map displays.  </p> <p>In the Map UI, zoom level defines the amount of detail displayed on the map. You can retrieve the zoom level used to display a map with this:   </p> <pre><code>// Get zoom level of map.  \n\nvar zoom = Map.getZoom();\nprint('Zoom level', zoom);\n</code></pre> Check your understanding:  Use the + and - buttons at the top left of the Map UI and re-run the code snippet to answer these two questions. <li>What zoom level is the most 'zoomed out'?</li> <li>What zoom level is the most 'zoomed in'?</li>"},{"location":"code/map/setBasemap/","title":"Set base map","text":"<p>By default, the Code Editor map will display with the Google road map. You can change the default basemap type like this:</p> <p><pre><code>Map.setOptions('HYBRID');\n</code></pre> You may choose from four base map types:  </p> <ul> <li>\u2018ROADMAP\u2019</li> <li>\u2018SATELLITE\u2019</li> <li>\u2018HYBRID\u2019</li> <li>\u2018TERRAIN\u2019</li> </ul> Check your understanding: <li>What object type does this method take as a parameter?</li>"},{"location":"code/map/setCenterZoom/","title":"Set map center and zoom","text":"<p>Together, map center and zoom level define a map\u2019s extent. You can customize the map extent by changing the map center and zoom level like this:   </p> <pre><code>// Set map center and zoom.  \n\nMap.setCenter(-73.1812983597342, 44.013157468373876, 19);\n</code></pre> Check your understanding:  At this zoom level, how many decimal places do you really need to center the map at this location? Hint: remove a decimal from the two coordinates and re-run the script. Repeat until you see first see BiHall move (just a tad)."},{"location":"code/number/construct_number/","title":"Construct number","text":"<p>The input must be numberic.</p> <pre><code>// Construct a number with ee.Number() method.\n\nvar output = ee.Number(input);\n\n// Example\n\nvar year = ee.Number(2012);\n</code></pre>"},{"location":"code/number/math/","title":"Math with number objects","text":"<pre><code>// Math with number objects.\n\nvar output = input.subtract(1);\n\nvar output2 = input.add(1);  // Example  \n\nvar last_year = year.subtract(1);\n\nvar new_year = year.add(1);\n</code></pre>"},{"location":"concepts/LST/","title":"Land Surface Temperature","text":""},{"location":"concepts/LST/#definition","title":"Definition","text":"<p>Please define land surface temperature (LST) and explain how this differs from air surface temperature?  </p>"},{"location":"concepts/LST/#lst-from-landsat-collections","title":"LST from Landsat collections","text":"<p>In this week\u2019s problem, we will apply a method to create high-resolution LST images from Landsat image collections that was developed and kindly shared by Sophia Ermida.  </p>"},{"location":"concepts/LST/#lst-and-land-cover","title":"LST and land cover","text":"<p>The app below will help you compare land surface temperatures to land cover for anywhere in the world.</p> <p>Please work with the app to explore Middlebury, Brooklyn, Seattle, and at least one other location of your choice.</p> <p>For each, please think through these questions:  </p> <ol> <li>At the extent of the scene, how does LST relate to land cover?  </li> <li>At the scale of a city or town, how does LST vary and how is this related to land cover?  </li> <li>What does the histogram tell you about your scene?</li> <li>Why do you need to adjust the min and max display values as your investigation changes location?  </li> <li>Since you are displaying a divergent color scheme, how should you aim to set your min and max display values?  </li> </ol> <p> </p> <p>This link will open the app in a new browser tab. </p>"},{"location":"concepts/MODIS/","title":"MODIS","text":""},{"location":"concepts/additive_color/","title":"Additive color","text":"<p>RGB composites visualize pixel values across three bands with the additive color system. The order of bands (first, second, third) corresponds to the color channel (red, green, blue) used to symbolize pixel values (sometimes called DN, or digital number).  </p> <p>The chart below provides a key to the primary and secondary colors produced through the system. A high value in a single band with low values in the other two bands produces the primary colors (red, green, blue). High values in two bands with a low value in a third band produces the secondary colors (yellow, cyan, magenta). Low values in all three bands produce dark colors culminating in black when all values are zero. High values in all three bands produce unsaturated colors that culminate in white when all channels are maxed.    </p> <p></p> <p>You can recreate these colors and explore other intermediary colors with the RGB mixer below.  </p> <p> </p>"},{"location":"concepts/additive_color/#app","title":"App","text":"<ul> <li>RGB mixer </li> </ul>"},{"location":"concepts/band_combinations/","title":"Band combinations","text":"<p> <p>Source: USGS</p> <p> </p>"},{"location":"concepts/bands_image/","title":"Band and Image","text":"<p>A band is a collection of pixels, or an array of values.  </p> <p>A band represents a raster data model.  </p> <p>One or more bands in a stack makes an image.  </p> <p></p>"},{"location":"concepts/burn_severity/","title":"Burn severity","text":""},{"location":"concepts/burn_severity/#introduction","title":"Introduction","text":"<ul> <li>Fire intensity: intensity of fire while active  </li> <li>Burn severity: how fire intensity affects ecological functions of the burnt area (degree to which fire alters an area)    </li> </ul>"},{"location":"concepts/burn_severity/#burn-ratio","title":"Burn ratio","text":"<ul> <li>Normalized Burn Ratio (NBR):  ratio between NIR and SWIR2 bands. A high NBR indicates healthy vegetation while a low NBR value indicates bare ground and recently burnt areas.   </li> </ul>"},{"location":"concepts/burn_severity/#severity-classes","title":"Severity classes","text":"<ul> <li>Burn severity: difference between pre-fire and post-fire NBR. A higher dNBR indicates more severe damage, while negative dNBR may indicate regrowth.  </li> </ul> <ul> <li>Severity level: USGS thresholds for assigning severity classes.</li> </ul>"},{"location":"concepts/burn_severity/#sources","title":"Sources","text":"<ul> <li> <p>un-spider.org</p> </li> <li> <p>EO article </p> </li> </ul>"},{"location":"concepts/cart_roots/","title":"Cartographic roots","text":""},{"location":"concepts/cart_roots/#geographic-framework","title":"Geographic framework","text":"<ul> <li>equator  </li> <li>prime meridian  </li> <li>latitude</li> <li>longitude  </li> <li>great circle  </li> <li>zoom level  </li> <li>representative fraction (RF)    </li> <li>scale</li> </ul>"},{"location":"concepts/cart_roots/#vector-model","title":"Vector model","text":"<ul> <li>Geometry (points, lines, polygons)</li> <li>Attributes (spatial, thematic)  </li> <li>Singlepart versus multipart  </li> <li>Properties</li> </ul>"},{"location":"concepts/cart_roots/#transformations","title":"Transformations","text":"<p>Terms in italics are synonyms.  </p> <ul> <li>input  </li> <li>operation (method)      </li> <li>output  </li> <li>parameters (arguments)</li> <li>data types (object classes)  </li> </ul>"},{"location":"concepts/cart_roots/#cartographic-modeling","title":"Cartographic modeling","text":"<ul> <li>task (goal)   </li> <li>task hierarchy  </li> <li>workflow (procedure, program)</li> </ul>"},{"location":"concepts/contrast_enhancement/","title":"Contrast enhancement","text":""},{"location":"concepts/contrast_three_bands/","title":"Three band contrast enhancement","text":""},{"location":"concepts/css_box_model/","title":"CSS box model","text":"<p>source </p>"},{"location":"concepts/electromagnetic_spectrum/","title":"Electromagnetic spectrum","text":""},{"location":"concepts/electromagnetic_spectrum/#definition","title":"Definition","text":"<p>Range of energy wavelengths from sun.</p>"},{"location":"concepts/electromagnetic_spectrum/#illustrations","title":"Illustrations","text":"<p>source: serc.carleton.edu</p>"},{"location":"concepts/features/","title":"Feature model","text":"<p>coming soon </p>"},{"location":"concepts/grayscale/","title":"Grayscale layer","text":""},{"location":"concepts/landsat_lexicon/","title":"Landsat lexicon","text":"<p>There are a number of different Landsat collections in the Earth Engine Data Catalog. To be able navigate the collection, you should be comfortable with the following lexicon.   </p>"},{"location":"concepts/landsat_lexicon/#missions","title":"Missions","text":"<p>The Landsat program consists of a series of missions. Each mission deploys one or more sensors on a satellite. Very practically, the mission\u2019s name denotes the launch sequence. Landsat 1 launched July 23, 1972. Landsat 9 launched September 27, 2021.  </p> <p>Why are there no images from Landsat 6?    </p>"},{"location":"concepts/landsat_lexicon/#sensors","title":"Sensors","text":"<p>The sensors onboard the Landsat satellites have steadily aimed to improve upon Norwood\u2019s original MSS.  </p> <ul> <li>MSS: Multispectral Scanner  </li> <li>TM: Thematic Mapper  </li> <li>ETM+: Enhanced Thematic Mapper  </li> <li>OLI/OLI-2: Operational Land Imager    </li> <li>TIRS/TIRS-2: Thermal Infrared Sensor</li> </ul> <p></p>"},{"location":"concepts/landsat_lexicon/#collections","title":"Collections","text":"<p>There have been two major reprocessing efforts by USGS to improve data quality. Collection 2 is the most recent and has the best geolocation accuracy which improves time series analyses.    </p>"},{"location":"concepts/landsat_lexicon/#tiers","title":"Tiers","text":"<p>Within a collection, Tier 1 data have the highest radiometric and positional quality. USGS recommends using Tier 1 data for all future time-series analysis.  </p>"},{"location":"concepts/landsat_lexicon/#levels","title":"Levels","text":"<p>Distinguishes the level of data processing applied to products.    </p> <ul> <li> <p>Level-1 includes processing to improve locational accuracy of data.  </p> </li> <li> <p>Level-2 products are built from Level 1, but also provide atmospheric correction to create surface reflectance and surface temperature products. Level-2 science products also include spectral indices derived from surface reflectance products.  </p> </li> <li> <p>Level-3 products are built from Level-2 products and include Analysis Ready Data (ARD), including Fractional Snow Covered Area and Burned Area, and Scene-based Inputs, including Provisional Actual Evapotranspiration.   </p> </li> </ul>"},{"location":"concepts/landsat_lexicon/#sensor-measurements","title":"Sensor measurements","text":"<p>Distinguishes what the pixel values represent.  </p> <ul> <li> <p>Raw scenes: DN (digital number) values represent scaled, calibrated at-sensor radiance.  </p> </li> <li> <p>Top of atmosphere (TOA): calibrated top-of-atmosphere reflectance.  </p> </li> <li> <p>Surface reflectance: atmospherically corrected surface reflectance and land surface temperature.     </p> </li> </ul>"},{"location":"concepts/mother_of_landsat/","title":"Mother of Landsat","text":"<p>Q: I\u2019ve seen an image of Yosemite National Park\u2019s Half Dome taken by a Landsat 1 prototype. How did that come about?</p> <p>A: When NASA said, \u201cHow do you know this damn thing will work?\u201d [we] came up with the idea of taking the breadboard around [to national parks]. [The Half Dome image] was a tremendous hit.</p> <p>source </p> <p> </p> <p>Virginia Tower Norwood during her second or third year at MIT. Source: MIT Technology Review</p> <p>For Virginia Tower Norwood\u2019s biography, please read this article.   </p>"},{"location":"concepts/raster/","title":"Raster model","text":""},{"location":"concepts/raster/#review-questions","title":"Review questions","text":"<ol> <li>How does a raster store attributes of locations?  </li> <li>What data objects does Earth Engine provide to work with geographic information in a raster framework?</li> <li>What are similarities and differences between raster and vector models?  </li> <li>How does a raster model display data values with colors?  </li> <li>How does a raster represent points, lines, and zones?  </li> <li>What are similarities and differences between thresholding and generalizing?  </li> <li>What are similarities and differences between map algebra and masks?  </li> <li>What are similarities and differences between computation of area in vector versus raster models?   </li> <li>What towns have most to lose if UVA lands are developed?  </li> <li>Who wins, who loses when setting 30 x \u201830 goal at state versus town scale?       </li> </ol>"},{"location":"concepts/reflectance/","title":"Reflectance","text":""},{"location":"concepts/reflectance/#definition","title":"Definition","text":"<p>The amount of energy leaving a location on the earth\u2019s surface / the amount of energy striking that location, usually expressed as a ratio or percentage.  </p>"},{"location":"concepts/reflectance/#illustration","title":"Illustration","text":"<p>Source: https://jp.mathworks.com/help/images/hyperspectral-data-correction.html </p>"},{"location":"concepts/remote_sensing_systems/","title":"Remote sensing systems","text":""},{"location":"concepts/remote_sensing_systems/#definition","title":"Definition","text":"<p>A system for observing conditions on Earth (or other planets) without making direct contact with the observed subject. Remote sensing includes both passive and active systems of observations.  </p>"},{"location":"concepts/remote_sensing_systems/#illustration","title":"Illustration","text":"<p>source: Arkarjun (2013)</p>"},{"location":"concepts/rgb_composites/","title":"RGB composites","text":""},{"location":"concepts/scenes/","title":"Image scenes","text":""},{"location":"concepts/scenes/#review-questions","title":"Review Questions","text":"<ul> <li>What are scenes?  </li> <li>What are common sources for image scenes and how do they differ?</li> <li>How does a mosaic differ from a composite?</li> </ul>"},{"location":"concepts/scenes/#sources-of-scenes","title":"Sources of scenes","text":"<p>To get started, we should first discuss how Landsat 8 imagery differs from MODIS Terra imagery (what we used last week to look at global oceans).  </p> <p>Try to fill out this table as we discuss the next few sections.  </p> SATELLITE SPATIAL RESOLUTION TEMPORAL RESOLUTION MODIS TERRA LANDSAT 8 SENTINEL 2 <p>The app below will grab the scene from each satellite at the center of the map and then draw natural color composites of each image.  </p> <p> </p> <p>This link will open the app in a new browser tab. </p> Check your understanding  What kinds of questions will Landsat enable us to ask that would be impossible with MODIS?"},{"location":"concepts/scenes/#where-are-the-satellites-at-this-moment","title":"Where are the satellites at this moment?","text":"<p>Here\u2019s a map that shows the location of US earth observing satellites (Landsat and MODIS platforms).  </p>"},{"location":"concepts/scenes/#how-does-landsats-orbit-influence-scene-mosaics","title":"How does Landsat\u2019s orbit influence scene mosaics?","text":"<p>The video below animates how Landsat 8 images the entire surface of the planet.  </p> Check your understanding  How many days may separate two adjacent scenes?"},{"location":"concepts/scenes/#how-does-modis-orbit-influence-scene-mosaics","title":"How does MODIS orbit influence scene mosaics?","text":"<p>The video below animates how MODIS Aqua images the planet\u2019s entire surface.  </p> Check your understanding  Why does MODIS imagery often have pointy stripes in equatorial regions?"},{"location":"concepts/sentinel/","title":"Sentinel","text":"<p>Sentinel missions</p> <p>Sentinel collections</p> <p> </p>"},{"location":"concepts/spectral_indices/","title":"Spectral indices","text":""},{"location":"concepts/spectral_indices/#normalized-difference","title":"Normalized difference","text":"<p>(first - second) / (first + second)   </p> <p>The normalized burn ratio (NBR) is a normalized ratio so we are dividing the difference of two bands by their sum. NBR uses the SWIR 2 and NIR bands.</p> <p></p> <p>The Burn Severity Index is derived from the change in NBR before and after a fire. The classes shown below are standards proposed by the USGS.  </p> <p> </p> <p>The map shown at the top uses the thresholds that are not scaled (column on right).  </p>"},{"location":"concepts/spectral_signature/","title":"Spectral signatures","text":""},{"location":"concepts/spectral_signature/#definition","title":"Definition","text":"<p>How reflectance changes with wavelength for different land cover types.    </p>"},{"location":"concepts/spectral_signature/#illustration","title":"Illustration","text":"<p>source: Hartley Bulcock</p>"},{"location":"concepts/spectral_signature/#tools","title":"Tools","text":"<ul> <li> <p>Spectral signature app </p> </li> <li> <p>S2 band spec sheet</p> </li> </ul>"},{"location":"concepts/what_is_landsat/","title":"What is Landsat?","text":"<p>The Landsat Program is a series of Earth-observing satellite missions jointly managed by NASA and the U.S. Geological Survey.</p> <p>Landsat represents the world\u2019s longest continuously acquired collection of space-based moderate-resolution land remote sensing data.</p> <p>Source</p> <p> </p> <p>more background </p>"},{"location":"lessons/changes_in_the_night/","title":"Changes in the night","text":""},{"location":"lessons/changes_in_the_night/#introduction","title":"Introduction","text":"<p>The US military designed the Operational Line-Scan System (OLS) of the Defense Meteorological Program (DMSP) to observe weather patterns with satellites. Unexpectedly, the system also proved capable of detecting visible and near-infrared (VNIR) emission sources at night.</p> <ul> <li>What do you think are sources of bright lights at night?  </li> <li>What do you think we could learn by studying changes in these lights over time?  </li> </ul>"},{"location":"lessons/changes_in_the_night/#concepts","title":"Concepts","text":"<ul> <li>Band and Image </li> <li>RGB composites </li> <li>Additive color </li> </ul>"},{"location":"lessons/changes_in_the_night/#activity","title":"Activity","text":"<p>With the app below, please select from the \u2018Explore a pattern\u2019 list. For each pattern:  </p> <ol> <li>Click on locations in the pattern to explore it and draw charts of the pixel values for each band.</li> <li>Use the additive color keys to describe the changes symbolized by the charts.</li> <li>For each pattern, identify at least one analogous place (where you see the same pattern) in another part of the world and write down the placename so that we can use the search bar to return to the place.  </li> <li>Explore the map to find another pattern not described in the pattern list.  </li> </ol>"},{"location":"lessons/changes_in_the_night/#app","title":"App","text":"<p>This link opens the app in a new browser tab.  </p>"},{"location":"lessons/changes_in_the_night/#references","title":"References","text":"<p>Mapping City Lights With Nighttime Data from the DMSP Operational Linescan System </p>"},{"location":"lessons/compare_ols_L5/","title":"Compare OLS with L5","text":""},{"location":"lessons/compare_ols_L5/#introduction","title":"Introduction","text":"<p>Your goal is to write a script that will allow you to compare changes in nighttime lights across three time periods with false color composites for each time period. The app below illustrates the map you will produce.     </p> <p> </p> <p>This link opens the app in a new browser tab.  </p>"},{"location":"lessons/compare_ols_L5/#prerequisites","title":"Prerequisites","text":"<p>This lesson follows changes in the night and natural/false color.  </p>"},{"location":"lessons/compare_ols_L5/#code-blocks","title":"Code blocks","text":"<p>The script draws on the following new code blocks:  </p> <ul> <li>Construct number </li> <li>Math with number objects </li> <li>Symbolize three bands with additive color</li> <li>Add bands to an image </li> <li>Sort by cloud cover </li> <li>Check image with module</li> </ul>"},{"location":"lessons/compare_ols_L5/#dropbox","title":"Dropbox","text":"<p>Please report requested checks and a link to the script in this dropbox.</p>"},{"location":"lessons/compare_ols_L5/#starter-script","title":"Starter script","text":"<pre><code>//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  problem:      rgbLights_practice.js\n//  your name:    \n//  date:           \n//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n//  --------------------------------------------------------------------------------\n//  Define Study Periods for Nighttime Lights collection.\n//  --------------------------------------------------------------------------------\n\n//  Load image collection from \"NOAA/DMSP-OLS/NIGHTTIME_LIGHTS\".\n//\n//  Please use this name for the output:\n//    ic\n\nvar ic =\n\n//  Define three target years (2012, 2002, 1992) as ee.Number() objects.\n//\n//  Please use these names for the outputs:\n//    red_year (for 2012 target)\n//    green_year (for 2002 target)  \n//    blue_year (for 1992 target)  \n\n\n\n//  Filter image collection to create a separate image collections for three study periods,\n//  where a study period begins one year before and ends one year after the target years defined in last step.\n//\n//  Please use these names for the outputs:\n//    red_year_ic (based on red_year target)\n//    green_year_ic (based on green_year target)\n//    blue_year_ic (based on blue_year target)\n\n\n// CHECK 1\n// Inspect each year and report how many images you have in each .\n\nprint('CHECK 1');\n\n\n//  --------------------------------------------------------------------------------\n//  Reduce each study period to a single image.\n//  --------------------------------------------------------------------------------\n\n//  Reduce each image collection to the mean value of each pixel\n//  Select the 'stable_lights' band\n//  Rename the band to convery the sequence in time each image represents ('last', 'middle', 'first')\n//\n//  Please use these names for the outputs:\n//    mean_red_year (based on red_year_ic) should have band 'last'\n//    mean_green_year (based on green_year_ic) should have band name 'middle'\n//    mean_blue_year (based on blue_year_ic) should have band name 'first'\n\n\n\n\n//  CHECK 2\n//  Inspect the result for each year and report the # of bands and data type for the new images.  \n//  Hint: they should all have the same number of bands and the same data type.\n\nprint('CHECK 2');\n\n\n//  --------------------------------------------------------------------------------\n//  Construct a new image that contains three bands.\n//  --------------------------------------------------------------------------------\n\n//  Construct a three band image by adding the 'middle' and 'first' bands to the 2013 image.\n//\n//  Please use this names for the output:\n//    lights_change_image    \n\n\n\n//  CHECK 3\n//  Inspect your output and report the band name and data type for each band index (0, 1, 2) in the output.\n\nprint('CHECK 3');\n\n\n//  ---------------------------------------------------------------------\n//  Compose map\n//  ---------------------------------------------------------------------\n\n//  Define a point of interest.\n\nvar geometry = ee.Geometry.Point([120.603693, 31.310461]);\n\n//  Center map on point of interest and zoom level 12.\n\n\n\n//  Set basemap to satellite with labels.\n\n\n\n//  Add three-band image to map with display range from 0 to 63.\n//  Label the layer 'Changes in the night'\n\n\n\n//  ---------------------------------------------------------------------\n//  Load and filter Landsat 5 image collection.\n//  ---------------------------------------------------------------------\n\n//  Load Landsat 5 collection from ee address 'LANDSAT/LT05/C02/T1_L2'\n//  and filter collection by point of interest.\n//\n//  Please use this name for the output:\n//    L5\n\n\n\n//  Create a new image collection for each study period (as defined previously).\n//\n//  Please use these names for the outputs:\n//    red_5 (based on red_year target)\n//    green_5 (based on green_year target)\n//    blue_5 (based on blue_year target)\n\n\n//  CHECK 4\n//  Inspect results and report the size of each image collection\n\nprint('CHECK 4');\n\n//  ---------------------------------------------------------------------\n//  Sort images by cloud cover and pick the first in the list.  \n//  ---------------------------------------------------------------------\n\n//  Sort each image collection by 'CLOUD_COVER'.  \n//\n//  Please use these names for the outputs:\n//    red_5_sort (based on red_5 study period)\n//    green_5_sort (based on green_5 study period)\n//    blue_5_sort (based on blue_5 study period)\n\n\n//  Check to see that the last step worked as you expected.\n//  The images in the collection should now be sorted from least cloudy to most cloudy.\n\n\n//  Select the first image in each sorted collection.\n//\n//  Please use these names for the outputs:\n//    red_5_all_clear (based on red_5_sort)\n//    green_5_all_clear (based on green_5_sort)\n//    blue_5_all_clear (based on blue_5_sort)\n\n\n//  CHECK 5\n//  Inspect the results and report the id of the image for each time period.\n\nprint('CHECK 5');\n\n//  ---------------------------------------------------------------------\n//  Display each image as a SWIR false color composite.\n//  ---------------------------------------------------------------------\n\n//  Define a list of bands to use for a SWIR false color composite.\n//\n//  Please use this name for the outputs:\n//    bands\n\n\n//  Define viz paramters of the composite.\n//  Call the variable you made in the last step to define the bands.\n//  Set display range to be 8000 - 17000.\n//\n//  Please use this name for the outputs:\n//    viz\n\n\n\n//  Add SWIR false color composte layer for each all_clear image to map.\n//  The most recent image should be the 'top' L5 layer and the oldest image should be the 'bottom' L5 layer.\n\n\n//  CHECK 6\n//  Use the meanValue() function to check your results from the imported module to check your final results.\n//  For each time period, you should be able to report the mean value at your point of interest for each band in your composite.\n\nprint('CHECK 6');\nvar check = require('users/jhowarth/eePrimer:modules/checks.js');\n</code></pre>"},{"location":"lessons/corridor_easement_list/","title":"River corridor easement outreach","text":""},{"location":"lessons/corridor_easement_list/#introduction","title":"Introduction","text":"<p>The State of Vermont\u2019s Climate Action Plan anticipates that the next century will bring broad shifts in local patterns of precipitation and temperature. Annual temperatures are projected to increase over 2\u00b0F by 2050 and between 4 to 9\u00b0F by 2100. The number of days with extreme heat (defined by a high temperature of at least 90\u00b0F) are projected to double in frequency to nine days a year by 2050 and then increase to between 15 and 45 days a year by the century\u2019s end. Annual precipitation is projected to increase one to two inches by 2050 and between four and nine inches by 2100.  Much of this increased precipitation will be delivered in higher intensity storms, as extreme precipitation events (those with more than two inches of rain in a 24-hour period) are expected to increase.    </p> <p>These changes will directly impact the ecological function and habitat of lands for native plant and animal species. As a result, the goal of protecting 30 percent of terrestrial lands and waters by 2030 has been widely recognized as a pillar of climate change planning. The United Nations Convention on Biodiversity adopted 30 by \u201830 goal as one of ten \u2018milestones\u2019 in a global framework for managing nature through 2030. President Biden\u2019s 2021 \u201cExecutive Order on Tackling the Climate Crisis at Home and Abroad\u201d also adopted the 30 by \u201830 goal.  </p> <p>In Vermont, the River Corridor Easement Program is one instrument available to compensate private land owners for extending protections on their lands. Your goal this week is to write a script in Earth Engine that identifies property owners with at least 50 acres of land within a designated river corridor for any watershed in Vermont. This tool could be used by municipal Conservation Commissions and private Land Trusts to contact land owners and initiate conversations that help us get closer to reaching 30 by \u201830 and subsequent 50 by \u201850 conservation goals.  </p> <p>The app below illustrates that basic tool that you will make.          </p> <p> </p> <p>Here is a link to the app that will open in a separate window. </p>"},{"location":"lessons/corridor_easement_list/#new-code","title":"New code","text":"<p>The list below introduces new methods that you will use to solve this problem. Each snippet introduces a method with a toy case. Your task is to apply these new methods with methods you have learned previously to complete all sections of the starter script below.  </p> <ul> <li>Vector objects </li> <li>Inspect first feature </li> <li>Inspect unique values of one property </li> <li>Filter by nominal attribute </li> <li>Filter by numerical attribute </li> <li>Buffer a feature </li> <li>Compute area </li> <li>Intersection</li> <li>Buffer every feature in collection </li> </ul>"},{"location":"lessons/corridor_easement_list/#starter-script","title":"Starter script","text":"<pre><code>//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  TITLE:        week_02_practice_problem.js  \n//  NAME:         Your name here please\n//  DATE:         Today's date\n//  PURPOSE:      Identify opportunities for river corridor easements.      \n//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// Use the drawing tool to drop a point on the Battell Bridge.\n\n// --------------------------------------------------------------------------------\n// 1. Load watersheds and filter for Vermont and study region.    \n// --------------------------------------------------------------------------------\n\n// Load watersheds from Earth Engine data catalog. Search for 'HUC12'.  \n\n\n\n// Print first feature in collection in order to examine the table structure.  \n\n\n\n// Filter the feature collection by attribute to keep only watersheds in the state of Vermont.\n\n\n\n// Create a study region by selecting the Vermont watershed that intersects the point of interest.\n\n\n\n// --------------------------------------------------------------------------------\n// 2. Set up map and add watershed layers.   \n// --------------------------------------------------------------------------------\n\n// Center map study region and set zoom 11.  \n\n\n\n// Set base map to satellite image with labels.\n\n\n\n// Add layer of Vermont watersheds to map. Use color 'LightCyan' and 0.5 opacity.   \n\n\n\n// Add layer of study region to map. Use color 'PaleTurquoise'\n\n\n\n// ================================================================================\n// Dataset addresses that are not in Earth Engine Data Catalog.   \n// ================================================================================  \n\nvar datasets = {\nparcels: 'projects/conservation-atlas/assets/cadastre/VTPARCELS_poly_standardized_parcels_SP_v1',\nriver_corridors: 'projects/conservation-atlas/assets/hydrology/WaterHydro_RiverCorridors_poly',\n}\n;\n\n// --------------------------------------------------------------------------------\n// 3. Show river corridor that overlaps the study region.  \n// --------------------------------------------------------------------------------\n\n// Construct a feature collection from the river corridors address.\n// Filter the collection for features that intersect the study region.\n// Union the features within the collection.  \n\n\n\n// Add the result from the last step to the map. Use color 'LightSkyBlue'.\n\n\n\n// --------------------------------------------------------------------------------\n// 4. Show property parcels that overlap the river corridor in the study region.  \n// --------------------------------------------------------------------------------\n\n// Construct a feature collection from the parcels address.\n// Filter the feature collection for features that intersect the river corridors in the study region.  \n// Filter the feature collection by attribute to keep features that are parcels (not roads, water, etc).  \n\n\n\n/* Please note: to do the last step (filter by attribute), you will need to:  \n    1. Find the property keys for the features and figure out which one describes the parcel property type.\n    2. Then you need to find the list of values for this key\n        (so that you can see how the data distinguishes owned parcels from roads, water, etc).\n*/\n\n\n// Add result from last step as layer to map. Use color 'Gainsboro'.   \n\n\n\n// --------------------------------------------------------------------------------\n// 5. Show intersections of parcels and river corridors in the study region.  \n// --------------------------------------------------------------------------------\n\n// Create function to intersect each parcel (from step 3) by river corridor (from step 3).\n// Please ask for help if you get stuck here.\n\n\n\n// Apply the function to every parcel in the featue collection.  \n\n\n\n// Add the result to the map. Use color 'LightSkyBlue'.  \n\n\n\n\n// --------------------------------------------------------------------------------\n// 6. Show features that meet an area criterion.\n// --------------------------------------------------------------------------------\n\n// Write a function to compute area of each feature and append result to each feature as the property 'ACRES'.\n\n\n\n// Filter the result of above for all features that are greater than 50 acres.  \n\n\n\n// Add the result as a layer to map. Use color 'Orchid'.\n\n\n\n\n\n// --------------------------------------------------------------------------------\n// 7. Display results as a table.\n// --------------------------------------------------------------------------------\n\n// We will discuss this last step in class tomorrow.\n</code></pre>"},{"location":"lessons/global_fires/","title":"A world on fire","text":""},{"location":"lessons/global_fires/#introduction","title":"Introduction","text":"<p>Fires are always present on our planet. If you look any day of the year and any time of the day, you will always find a fire burning somewhere.          </p> <ul> <li> <p>How do fires differ physically, ecologically, and culturally?</p> </li> <li> <p>How can satellite imagery help us understand these differences and their relationships to each other? </p> </li> </ul> <p></p> <p> <p>FIRMS fire map </p> <p> </p>"},{"location":"lessons/global_fires/#background","title":"Background","text":"<ul> <li>spectral signatures</li> <li>additive color</li> <li>burn severity </li> <li>MODIS </li> <li>band dictionary </li> <li>spectral indices </li> <li>awesome spectral indices </li> </ul>"},{"location":"lessons/global_fires/#burn-severity-explorer","title":"Burn severity explorer","text":"<p>Your goal this week is to write a script that functions similar to the app shown below.  </p> <p> </p> <p>This link will open the app in a new browser tab. </p>"},{"location":"lessons/global_fires/#deliverables","title":"Deliverables","text":"<p>There are two deliverables for this lesson:  </p> <ol> <li> <p>Please complete Form 1 to interpret global fires. You should be able to use either the app above or the script that you write to answer the questions in this form.  </p> </li> <li> <p>Please complete Form 2 to submit six (6) checkpoints and a link to your script.</p> </li> </ol> <p>Please submit answers to both forms by 9:30am on Thursday (11/16).  </p> <p>You will have until 5pm on Friday (11/17) to revise your script so that it produces correct answers. (Please re-submit the Form 2 with your corrections).    </p>"},{"location":"lessons/global_fires/#new-code-snippets","title":"New code snippets","text":"<ul> <li>cloud masks </li> <li>normalized difference ratios </li> <li>reclassify with defined breaks </li> </ul>"},{"location":"lessons/global_fires/#starter-script","title":"Starter script","text":"<pre><code>/*\n\n  Title: Burn severity explorer\n  Author: Your name\n  Date: Today's date\n\n*/\n\n// --------------------------------------------------------\n// 1. Define study window and region.\n// --------------------------------------------------------\n\n//  Initial poi.\n\nvar geometry = ee.Geometry.Point([-122.29400855, 37.14993396]);\n\n// Define year (2020) and month (8) as ee number objects.\n//  Please name the outputs: study_year and study_month (respectively)\n\n\n\n//  Construct a feature collection from \"WWF/HydroSHEDS/v1/Basins/hybas_7\".\n//    \n//    Please name the output: regions  \n\n\n\n//  Create a study region by filtering regions that intersect geometry variable.\n//\n//  Please name the output:  \n//    study_region\n\n\n\n//  Center map on study_region at zoom level 10.\n\n\n\n//  Set base map to 'TERRAIN'.\n\n\n\n\n\n// --------------------------------------------------------\n// Visualize global fire scars for the study window.    \n// --------------------------------------------------------\n\n// Create list of bands to work with.\n\nvar bands = ['SWIR','NIR','Green'];\n\n// Create a list of the MODIS bands (from \"MODIS/061/MOD09A1\") that are equivalent to the bands list.\n//\n//  Name the variable:\n//    MODIS_bands  \n\n\n\n// Load image_tools module to access cloud masks.\n\nvar tools = require(\"users/jhowarth/eePrimer:modules/image_tools.js\");\n\n// Load image collection from \"MODIS/061/MOD09A1\".\n//  Filter by calendar year for study year variable.  \n//  Filter by calendar data with month variable as start and month plus one as end.\n//  Apply the cloud filter (tools.cloudMask_MODIS) to every image in the collection.  \n//  Reduce each pixel value to the pixel's minimum in the collection.  \n//  Apply the scaling factor (0.0001) to the image.  \n//  Select the MODIS bands from the image and rename these bands as defined in first step of section.  \n//\n//  Please name the output:\n//    after_fire_MODIS  \n\n\n\n// Define viz parameters for false color swir.\n\nvar viz = {\nmin: [0, 0, 0],\nmax: [0.6, 0.65, 0.5],\nbands: bands,\ngamma: 1.2\n};\n\n//  Add image as layer to map with viz parameters.\n//  Name the layer 'MODIS for study window'.\n\n\n\n//  *******************************************************\n//  CHECK 1\n//  *******************************************************\n\n// Load module.\n\nvar check = require('users/jhowarth/eePrimer:modules/checks.js');\n\n// Use meanValue() function to print mean value of an image (dough) with a geometry (cutter).\n\n// check.meanValue(                        // Call function\n//   after_fire_MODIS,                     // Image to check\n//   bands,                                // Bands to select in image as a list\n//   geometry,                         // Geometry to use as a cutter\n//   1000,                                 // Pixel resolution (scale) of image (dough)\n//   'CHECK 1'                             // Label to print to console above result.\n//   )\n// ;\n\n// --------------------------------------------------------\n// 2. Display global fires for a study window.    \n// --------------------------------------------------------\n\n//  Load FIRMS image collection from 'FIRMS' address.  \n//  Filter for calendar year with start and end as defined above.\n//  Filter for calendar month with start as defined above and end as above plus 1.  \n//  Select the 'T21' band.\n//  Reduce each pixel value to each pixel's maximum in the collection.\n//  Convert from Kelvin to Celsius.\n//\n//  Please name the ouput:  \n//    fire  \n\n\n\n//  Define viz parameters for the fire image.  \n//  Stretch values from 50 to 225 and use yellow, orange, and red colors to make the palette.\n\n\n\n//  Add the fire layer with the fire viz and label the layer 'Fires'.\n\n\n\n// Load cart module.\n\nvar cart = require('users/jhowarth/eePrimer:modules/cart.js');\n\n// Construct a gradient legend with the fire viz parameters.\n//  Title the legend 'Brightness temp (C) of fires in study month' so that 'in study month' prints on a new line.\n//  Place the legend in the bottom left corner of the map.\n\n\n\n// Add legend to map.  \n\n\n\n\n//  *******************************************************\n//  CHECK 2\n//  *******************************************************\n\n// Use meanValue() function to print mean value of an image (dough) with a geometry (cutter).\n\n// check.meanValue(                        // Call function\n//   fire,                     // Image to check\n//   'T21',                                // Bands to select in image as a list\n//   geometry,                         // Geometry to use as a cutter\n//   1000,                                 // Pixel resolution (scale) of image (dough)\n//   'CHECK 2'                             // Label to print to console above result.\n//   )\n// ;\n\n// -------------------------------------------------------------\n// 3. Investigate at finer scale with Sentinel 2.   \n// -------------------------------------------------------------\n\n//  Make list of S2 bands that match band list.  \n//\n//  Name variable:\n//    S2_bands\n\n\n\n// Write a function that takes year and month arguments\n//  and chains the following:\n//    Construct image collection from \"COPERNICUS/S2_SR_HARMONIZED\".\n//    Filter collection for images that intersect study_region.  \n//    Filter collection by calendar year (from argument).\n//    Filter collection by calendar month, where start is month from argument and end is this month plus one.\n//    Apply tools.cloudMask_S2 to every image in the collection\n//    Reduce collection to minimum value at each pixel.  \n//    Scale the pixel values by 0.0001.\n//    Select the S2_bands and rename them regular band names (defined earlier).\n\n\n\n//  Call function to make after fire image with study window year and month.  \n//\n//    Name the variable: after_fire_S2       \n\n\n\n//  Call function to make before fire image with study window same month but year minus one.  \n//\n//    Name the variable: before_fire _S2  \n\n\n\n\n//  Add after fire and before fire layers to map as false color SWIR.\n//  Apply the same viz parameters that you used with layer image.\n//  Name each layer 'S2 after' or 'S2 before' as appropriate.\n\n\n\n//  *******************************************************\n//  CHECK 3 &amp; 4\n//  *******************************************************\n\n// Use meanValue() function to print mean value of an image (dough) with a geometry (cutter).\n\n// check.meanValue(                        // Call function\n//   after_fire_S2,                     // Image to check\n//   bands,                                // Bands to select in image as a list\n//   geometry,                         // Geometry to use as a cutter\n//   10,                                 // Pixel resolution (scale) of image (dough)\n//   'CHECK 3'                             // Label to print to console above result.\n//   )\n// ;\n//\n// check.meanValue(                        // Call function\n//   before_fire_S2,                     // Image to check\n//   bands,                                // Bands to select in image as a list\n//   geometry,                         // Geometry to use as a cutter\n//   10,                                 // Pixel resolution (scale) of image (dough)\n//   'CHECK 4'                             // Label to print to console above result.\n//   )\n// ;\n\n// -------------------------------------------------------------\n// 4. Estimate burn severity index for before and after images.    \n// -------------------------------------------------------------\n\n// Compute burn ratio (normalized difference between NIR and SWIR) for before_fire_S2 and after_fire_S2\n\n//  Name the outputs:\n//    br_before_S2\n//    br_after_S2\n\n\n\n// Subtract br_after_S2 from br_before_S2.\n//\n//  Name the output: dbr (for delta burn ratio)\n\n\n\n// Load community palettes.\n\nvar palettes = require('users/gena/packages:palettes');\n\n// Store the colorbrewer.BrBG[11] palette.\n//  Reverse the color ramp so brown shows higher values and teal shows lower values.\n//\n//  Name the variable: dbr_palette\n\n\n\n//  Define viz parameters stretched from -0.75 to 0.75.\n//  Display with palette.\n//\n//  Name the variable: dbr_viz\n\n\n// Create a land mask from \"NASA/NASADEM_HGT/001\".\n//  All pixels with elevation value greater than 0 should be 1.\n//  All other pixels should be 0.\n\nvar landMask = ee.Image(\"NASA/NASADEM_HGT/001\")\n.select('elevation')\n.gt(0);\n\n//  Add dbr as layer to map and apply land mask,\n//  display with dbr_viz,\n//  name the layer 'Difference normalized burn ratio',\n//  make not visible by default.\n\n\n\n// Construct a gradient legend with the dbr viz parameters.\n//  Title the legend 'Difference normalized burn ratio'.\n//  Place the legend in the bottom left corner of the map.\n//\n//  Please name the output: dbr_legend\n\n\n\n// Add legend to map.  \n\n\n\n//  *******************************************************\n//  CHECK 5\n//  *******************************************************\n\n// Use meanValue() function to print mean value of an image (dough) with a geometry (cutter).\n\n// check.meanValue(                        // Call function\n//   dbr,                                  // Image to check\n//   'nd',                                // Bands to select in image as a list\n//   geometry,                             // Geometry to use as a cutter\n//   10,                                   // Pixel resolution (scale) of image (dough)\n//   'CHECK 5'                             // Label to print to console above result.\n//   )\n// ;\n\n// -------------------------------------------------------------\n// Classify burn severity index based on USGS thresholds.  \n// -------------------------------------------------------------\n\n// Classify burn severity image according to USGS thresholds.\n//\n//  Name output: burn_severity_class  \n\nvar burn_severity_class = dbr\n.gte(-0.25)\n.add(dbr.gte(-0.1))\n.add(dbr.gte(0.1))\n.add(dbr.gte(0.27))\n.add(dbr.gte(0.44))\n.add(dbr.gte(0.66))\n;\n\n\n// Define burn severity class palette (give this to them).\n\nvar burn_severity_palette =[\n'#778735',\n'#a7c04f',\n'#07e444',\n'#f6fc0d',\n'#f7b140',\n'#f86819',\n'#a601d4'\n]\n;\n\n// Define vis parameters for classified burn severity index.\n//  The min value should be 0 and the max should be 6.\n//  Apply the palette defined above.\n//  \n//  Name the variable: burn_severity_viz  \n\n\n// Add burn severity classes layer to map with land mask.\n//  Apply burn_severity_viz and label the layer 'Classified values from S2'.\n\n\n\n// Create a list of labels for classes.\n// The length of this list must equal the length of class values.  \n\nvar burn_severity_labels = [\n'High post-fire regrowth',\n'Low post-fire regrowth',\n'Unburned',\n'Low Severity',\n'Moderate-low Severity',\n'Moderate-high Severity',\n'High Severity'];\n\n\n// Make a qualitative legend for burn severity layer.  \n//  Place the legend in the bottom-left.\n//\n//  Name the legend: severity_legend\n\n\n\n// Add severity legend to the map.\n\n\n\n//  *******************************************************\n//  CHECK 6\n//  *******************************************************\n\n// Use meanValue() function to print mean value of an image (dough) with a geometry (cutter).\n\n// check.meanValue(                        // Call function\n//   burn_severity_class,                                  // Image to check\n//   'nd',                                // Bands to select in image as a list\n//   geometry,                             // Geometry to use as a cutter\n//   10,                                   // Pixel resolution (scale) of image (dough)\n//   'CHECK 6'                             // Label to print to console above result.\n//   )\n// ;\n</code></pre>"},{"location":"lessons/global_forest_loss/","title":"Global forest loss","text":"<p> <p>source </p> <p> </p>"},{"location":"lessons/global_forest_loss/#introduction","title":"Introduction","text":"<ul> <li> <p>Over the last twenty years, how has the rate of deforestation changed in different regions of the world?  </p> </li> <li> <p>How can satellite imagery distinguish different human and environmental factors that cause deforestation?</p> </li> <li> <p>How does the size and shape of study regions influence the calculation of deforestation?  </p> </li> </ul>"},{"location":"lessons/global_forest_loss/#background","title":"Background","text":"<ul> <li> <p>Motivation </p> </li> <li> <p>Earth observatory stories </p> </li> <li> <p>High-Resolution Global Maps of 21st-Century Forest Cover Change</p> </li> <li> <p>Hansen Global Forest Change (2000 - 2021)</p> </li> <li> <p>Global Forest Change</p> </li> </ul>"},{"location":"lessons/global_forest_loss/#global-forest-loss-explorer","title":"Global forest loss explorer","text":"<p>Your goal this week is to write a script that reproduces the app shown below.  </p> <p> </p> <p>This link will open the app in a new browser tab. </p>"},{"location":"lessons/global_forest_loss/#deliverables-part-1","title":"Deliverables (part 1)","text":"<p>Before the start of lab on Wednesday (11/30), please complete Form 1 to submit answers for the four checkpoints and a link to your script.      </p>"},{"location":"lessons/global_forest_loss/#starter-script-part-1","title":"Starter script (part 1)","text":"<pre><code>//  NAME:     Global forest loss Part 1\n//  AUTHOR:   your name\n//  DATE:     today's date\n\n//  Construct image from address: \"UMD/hansen/global_forest_change_2021_v1_9\"\n//  Name the output: dataset\n\n\n\n//  Threshold image so that land is 1 and everything else is 0\n//  Name the output: land_mask\n\n\n\n//  Add land mask as layer.\n//  Make land 'black' and not land 'DarkSlateGray'.\n//  Name the layer 'land'.\n\n\n\n//  Create viz parameters for 'treecover2000' band.\n//  Display range from 0 to 100.\n//  Use 'black' to display min and '#00992B' to display max.\n//  Name the variable: tree_viz\n\n\n\n//  Add dataset to map as a layer and apply land_mask and tree_viz.\n//  Name the layer 'tree cover' and make not shown by default.\n\n\n\n//  Define the loss palette. (Give this to them).\n\nvar loss_palette = [\n'#19faaf',\n'#4ff398',\n'#6cec81',\n'#82e46c',\n'#95dc57',\n'#a5d344',\n'#b4ca32',\n'#c2c020',\n'#cfb610',\n'#daab04',\n'#e59f06',\n'#ef9313',\n'#f78620',\n'#fd782d',\n'#ff693a',\n'#ff5a47',\n'#ff4b55',\n'#ff3b63',\n'#ff2b72',\n'#fb1d81',\n'#f11590',\n'#e5179f'\n]\n;\n\n//  Define viz parameters for 'lossyear' band\n//  Display range from 0 to 21 and call loss_palette.\n//  Name the variable: loss_viz.\n\n\n\n//  Add dataset as layer to map and apply loss_viz.\n//  Name the layer 'tree loss year' and make shown by default.\n\n\n\n//  Select swir2, nir, and red bands from the last year and rename SWIR2, NIR, and Red.\n//  Name the variable: last_composite.\n\n\n\n//  Add last_composite as a layer to the map and apply land_mask as a mask.  \n//  Display as a SWIR2 false color composite with display range from 0 to 100.\n//  Name the layer 'Last image' and make shown by default.\n\n\n\n//  Compute the normalized difference in vegetation index (NDVI) with the 'NIR' and 'Red' bands from the last_composite.\n//  Name the variable: last_ndvi.\n\n\n\n//  Load the community palettes from 'users/gena/packages:palettes'.\n\nvar palettes = require('users/gena/packages:palettes');\n\n//  Define viz parameters for the NDVI layer.\n//  Display the colorbrewer.PRGn[11] community palette stretched from -0.8 to 0.8.\n//  Name the variable: ndvi_viz\n\n\n\n//  Add last_ndvi as a layer and apply the land_mask and ndvi_viz.\n//  Name the layer 'Last ndvi' and do not show layer by default.\n\n\n\n//  Compute the normalized burn ratio from last_composite.\n//  Name the variable: last_nbr\n\n\n\n//  Define viz paramters for the normalized burn ratio.\n//  Apply the colorbrewer.BrBG[11] palette and stretch from -0.8 to 0.8.\n//  Name the variable: nbr_viz\n\n\n\n//  Add last_nbr as a layer to the map and apply land_mask as a mask and nbr_viz.\n//  Name the layer 'Last burn ratio' and make not shown by default.  \n\n\n\n//  Construct a feature collection from address: \"FAO/GAUL/2015/level1\".\n//  Name the variable: regions\n\n\n//  Add regions to the map as a layer.\n//  Display the regions with a white color and name the layer 'Regions'.\n//  Do not show layer by default.\n\n\n\n//  Construct a feature collection from address: \"WCMC/WDPA/current/polygons\"\n//  Filter the feature collection for features where the 'STATUS' is not 'proposed'\n//  And where the 'IUCN_CAT' is not 'VI'.\n//  Name the variable: protected_lands\n\n\n\n//  Add protected lands as a layer to the map. Display with color: '#17E551'.\n//  Label the layer 'Protected Lands' and do not show by default.\n\n\n\n//  *******************************************************\n//  CHECKS\n//  *******************************************************\n\n//  Please uncomment all the lines below and run.\n//  (If you followed the naming prompts, the code below should run.)\n\n// var check = require('users/jhowarth/eePrimer:modules/checks.js');\n//\n// var poi = ee.Geometry.Point([-53.56837074828233, -6.485893364659269]);\n//\n// check.meanValue(                                // Call function\n//   dataset,                                      // Image to check\n//   ['treecover2000', 'lossyear', 'datamask'],    // Bands to select in image as a list\n//   poi,                                     // Geometry to use as a cutter\n//   900,                                          // Pixel resolution (scale) of image (dough)\n//   'CHECK 1'                                     // Label to print to console above result.\n//   )\n// ;\n//\n// check.meanValue(                                // Call function\n//   last_ndvi,                                    // Image to check\n//   'nd',                                         // Bands to select in image as a list\n//   poi,                                     // Geometry to use as a cutter\n//   900,                                          // Pixel resolution (scale) of image (dough)\n//   'CHECK 2'                                     // Label to print to console above result.\n//   )\n// ;\n//\n// check.meanValue(                                // Call function\n//   last_nbr,                                     // Image to check\n//   'nd',                                         // Bands to select in image as a list\n//   poi,                                     // Geometry to use as a cutter\n//   900,                                          // Pixel resolution (scale) of image (dough)\n//   'CHECK 3'                                     // Label to print to console above result.\n//   )\n// ;\n//\n// print('CHECK 4', 'size', protected_lands.size());\n</code></pre>"},{"location":"lessons/global_forest_loss/#starter-scripts-part-2","title":"Starter scripts (part 2)","text":"<p>Making the Global Forest Loss app involves the following steps:  </p> <ol> <li> <p>Initialize widgets for the layout (a side panel and a split panel that holds two linked maps).  </p> </li> <li> <p>Initialize and add widgets to the side panel (for the title, instructions, cart panel, and credits).</p> </li> <li> <p>Make and add image layers for the left map (land, tree cover, tree loss year).    </p> </li> <li> <p>Make and add image layers for the right map (last image, last ndvi, last burn ratio).   </p> </li> <li> <p>Make and add reference feature layers for both maps (regions, protected lands).    </p> </li> <li> <p>Prepare an image to chart change over time.    </p> </li> <li> <p>Select a study region and center map on it.    </p> </li> <li> <p>Chart change over time in selected region and add to side panel.  </p> </li> <li> <p>Write functions to make app interactive.</p> </li> </ol> <p>In the sections below, I have posted a starter script for each step of the solution. Some of the chunks require you to fill in missing code blocks. Other chunks are complete and should run as long as you follow the naming conventions.  </p>"},{"location":"lessons/global_forest_loss/#1-initialize-widgets-for-the-layout","title":"1. Initialize widgets for the layout.","text":"<p>This step works with widgets (user interface objects). Widgets are the basic elements for creating panels, labels, charts, even maps and map layers.   </p> <p>New code:  </p> <ul> <li>Panel widget </li> <li>Map widget </li> <li>Wipe maps </li> </ul> <pre><code>//  NAME:     Global forest loss app\n//  AUTHOR:   Jeff Howarth\n//  DATE:     1/28/2022  \n\n//  ----------------------------------------------------------------------------\n//  1. Initialize layout\n//  ----------------------------------------------------------------------------\n\n//  Initialize side panel. Define width as 20%.\n//  Name the variable: side_panel\n\n\n\n//  Initialize a map widget for the left map.\n//  Set basemap to SATELLITE.\n//  Name the variable: left_map\n\n\n\n//  Initialize a map widget for the right map.\n//  Set basemap to SATELLITE.\n//  Name the variable: right_map.\n\n\n\n//  Initialize a map linker widget and link left_map and right_map.\n//  Name the variable: map linker   \n\n\n\n//  Initialize a split panel widget to hold the two linked maps.   \n//  Define the orientation as 'horizontal' and wipe as true.\n//  Name the variable: split_panel  \n\n\n\n//  Clear root.\n//  Then add side panel and split panel to root.\n</code></pre>"},{"location":"lessons/global_forest_loss/#2-initialize-widgets-for-the-side-panel","title":"2. Initialize widgets for the side panel.","text":"<p>New code:  </p> <ul> <li>Label widgets </li> </ul> <pre><code>//  ----------------------------------------------------------------------------\n//  2. Initialize and add widgets to the side panel.\n//  ----------------------------------------------------------------------------\n\n//  Initialize style parameters for title labels.\n//  Name the variable: title_style\n\n\n\n//  Initialize a label widget for the title and apply title_style.\n//  Name the variable: title\n\n\n\n//  Initialize style parameters for instructions.\n//  Name the variable: instructions_style\n\n\n\n//  Initialize a label widget for instructions and apply instructions_style.\n//  Name the variable: chart_instructions\n\n\n\n//  Initialize a panel widget to put the chart.\n//  Name the variable: chart_panel\n\n\n\n//  Define style parameters for region labels.\n//  Name the variable: region_style  \n\n\n\n//  Initialize label widget for level 1 name and apply style parameters.   \n//  Name the variable: a1_label\n\n\n//  Initialize label widget for level 0 name and apply style parameters.   \n//  Name the variable: a0_label\n\n\n\n//  Define style parameters for credits.\n//  Name the variable: credits_style\n\n\n\n//  Initialize label widget for credits and apply credits style.\n//  Name the variable: credits  \n\n\n\n//  Add label widgets to the side_panel.\n</code></pre>"},{"location":"lessons/global_forest_loss/#3-make-and-add-image-layers-for-left-map","title":"3. Make and add image layers for left map.","text":"<p>The code below creates and displays the global forest data layers from part 1 onto the left map.  </p> <pre><code>//  ----------------------------------------------------------------------------\n//  3. Make and add image layers for left map.\n//  ----------------------------------------------------------------------------\n\n//  Construct image from address: \"UMD/hansen/global_forest_change_2021_v1_9\"\n//  Name the output: dataset\n\nvar dataset = ee.Image('UMD/hansen/global_forest_change_2021_v1_9');\n\n//  Threshold image so that land is 1 and everything else is 0\n//  Name the output: land_mask\n\nvar land_mask = dataset.select('datamask').eq(1);\n\n//  Add land mask as layer.\n//  Make land 'black' and not land 'DarkSlateGray'.\n//  Name the layer 'land'.\n\nleft_map.addLayer(land_mask, {palette: ['DarkSlateGray', 'Black']}, 'Land');\n\n//  Create viz parameters for 'treecover2000' band.\n//  Display range from 0 to 100.\n//  Use 'black' to display min and '#00992B' to display max.\n//  Name the variable: tree_viz\n\nvar tree_viz = {\nbands: ['treecover2000'],\nmin: 0,\nmax: 100,\npalette: ['black', '#00992B']\n};\n\n//  Add dataset to map as a layer and apply land_mask and tree_viz.\n//  Name the layer 'tree cover' and make not shown by default.\n\nleft_map.addLayer(dataset.updateMask(land_mask), tree_viz, 'tree cover',0);\n\n//  Define the loss palette. (Give this to them).\n\nvar loss_palette = [\n'#19faaf',\n'#4ff398',\n'#6cec81',\n'#82e46c',\n'#95dc57',\n'#a5d344',\n'#b4ca32',\n'#c2c020',\n'#cfb610',\n'#daab04',\n'#e59f06',\n'#ef9313',\n'#f78620',\n'#fd782d',\n'#ff693a',\n'#ff5a47',\n'#ff4b55',\n'#ff3b63',\n'#ff2b72',\n'#fb1d81',\n'#f11590',\n'#e5179f'\n]\n;\n\n//  Define viz parameters for 'lossyear' band\n//  Display range from 0 to 21 and call loss_palette.\n//  Name the variable: loss_viz.\n\nvar loss_viz = {\nbands: ['lossyear'],\nmin: 0,\nmax: 21,\npalette: loss_palette\n};\n\n//  Add dataset as layer to map and apply loss_viz.\n//  Name the layer 'tree loss year' and make shown by default.\n\nleft_map.addLayer(dataset, loss_viz, 'tree loss year');\n</code></pre>"},{"location":"lessons/global_forest_loss/#4-make-and-add-image-layers-for-right-map","title":"4. Make and add image layers for right map.","text":"<p>The code below creates and displays the global forest data layers from part 1 onto the right map.  </p> <pre><code>//  ----------------------------------------------------------------------------\n//  4. Make and add image layers for the right map.\n//  ----------------------------------------------------------------------------\n\n//  Select swir2, nir, and red bands from the last year and rename SWIR2, NIR, and Red.\n//  Name the variable: last_composite.\n\nvar last_composite = dataset\n.select(['last_b70', 'last_b40', 'last_b30'], ['SWIR2', 'NIR', 'Red']);\n\n//  Add last_composite as a layer to the map and apply land_mask as a mask.  \n//  Display as a SWIR2 false color composite with display range from 0 to 100.\n//  Name the layer 'Last image' and make shown by default.\n\nright_map.addLayer(last_composite.updateMask(land_mask), {min:0, max:100}, 'Last image',1);\n\n//  Compute the normalized difference in vegetation index (NDVI) with the 'NIR' and 'Red' bands from the last_composite.\n//  Name the variable: last_ndvi.\n\nvar last_ndvi = last_composite.normalizedDifference(['NIR', 'Red']);\n\n//  Load the community palettes from 'users/gena/packages:palettes'.\n//  Name the variable: palettes.\n\nvar palettes = require('users/gena/packages:palettes');\n\n//  Define viz parameters for the NDVI layer.\n//  Display the colorbrewer.PRGn[11] community palette stretched from -0.8 to 0.8.\n//  Name the variable: ndvi_viz\n\nvar ndvi_viz = {\nmin: -0.8,\nmax: 0.8,\npalette: palettes.colorbrewer.PRGn[11]\n};\n\n//  Add last_ndvi as a layer and apply the land_mask and ndvi_viz.\n//  Name the layer 'Last ndvi' and do not show layer by default.\n\nright_map.addLayer(last_ndvi.updateMask(land_mask), ndvi_viz, 'Last ndvi',0);\n\n//  Compute the normalized burn ratio from last_composite.\n//  Name the variable: last_nbr\n\nvar last_nbr = last_composite.normalizedDifference(['NIR', 'SWIR2']);\n\n//  Define viz paramters for the normalized burn ratio.\n//  Apply the colorbrewer.BrBG[11] palette and stretch from -0.8 to 0.8.\n//  Name the variable: nbr_viz\n\nvar nbr_viz = {\nmin: -0.8,\nmax: 0.8,\npalette: palettes.colorbrewer.BrBG[11]\n};\n\n//  Add last_nbr as a layer to the map and apply land_mask as a mask and nbr_viz.\n//  Name the layer 'Last burn ratio' and make not shown by default.  \n\nright_map.addLayer(last_nbr.updateMask(land_mask), nbr_viz, 'Last burn ratio',0);\n</code></pre>"},{"location":"lessons/global_forest_loss/#5-make-and-add-reference-layers","title":"5. Make and add reference layers","text":"<p>New code:</p> <ul> <li>Show feature outlines without fill </li> </ul> <pre><code>//  ----------------------------------------------------------------------------\n//  5. Make reference feature layers for both maps.\n//  ----------------------------------------------------------------------------\n\n//  Construct a feature collection from address: \"FAO/GAUL/2015/level1\".\n//  Name the variable: regions\n\nvar regions = ee.FeatureCollection(\"FAO/GAUL/2015/level1\");\n\n//  Define style parameters for region layer.  \n//  Name the variable: style_regions\n\n\n\n//  Initialize map layer as a widget.\n//  Call style_regions with .style method.\n//  Label the layer 'regions_layer'.\n\n\n\n//  Add map layer widget to left map.\n\n\n\n\n//  Write a function to make map layer as a widget.\n//  We will discuss on Thursday.\n\nvar makeLayer = function(fc, style, name, show) {\nreturn ui.Map.Layer(fc.style(style), {}, name, show);\n};\n\n//  Call function to add regions layer as a widget to the right map.\n\nright_map.add(makeLayer(regions, style_regions, 'Regions', 1));\n\n//  Construct a feature collection from address: \"WCMC/WDPA/current/polygons\"\n//  Filter the feature collection for features where the 'STATUS' is not 'proposed'\n//  And where the 'IUCN_CAT' is not 'VI'.\n//  Name the variable: protected_lands\n\n\n\n//  Define style parameters for the protected lands layer.\n//  Use color '#17E551' for strokes.\n//  Name the variable: pro_lands_style\n\n\n\n//  Call makeLayer() to add protected lands with pro_lands_style to both left and right maps.\n//  Label the layers 'Protected Lands' and do not show by default.\n</code></pre>"},{"location":"lessons/global_forest_loss/#6-prepare-image-to-chart-change-over-time","title":"6. Prepare image to chart change over time.","text":"<p>Most of this step you have done previously and involves converting a feature collection into a binary image.  </p> <p>The last step involves create an image for charting and I give you the code for this. We will discuss how this works in class tomorrow.  </p> <pre><code>//  ----------------------------------------------------------------------------\n//  6. Prepare image to chart change over time.\n//  ----------------------------------------------------------------------------\n\n// Write a function to give a feature a property named 'tag' and a specified value.  \n\n\n\n// Apply function to all features in a feature collection (fc).  \n\n\n\n// Create a function to convert feature collection to binary image.\n\n\n\n// Use function to convert a feature collection to an image.  \n//  Name the variable: pro_binary  \n\n\n\n//  Create image with a band stack to chart.\n//  Last band must be integers that define classes.\n//  Uncomment the sbippet below - it should run if you followed naming conventions.  \n//  We will discuss in class on Thursday.  \n\n// var loss = ee.Image.pixelArea().multiply(0.000001)\n//   .addBands(ee.Image.pixelArea().multiply(0.000001).updateMask(pro_binary))\n//   .addBands(dataset.select(['lossyear'])\n//   );\n</code></pre>"},{"location":"lessons/global_forest_loss/#7-select-a-study-region-and-center-map-on-it","title":"7. Select a study region and center map on it.","text":"<pre><code>//  ----------------------------------------------------------------------------\n//  7. Select a study region and center map on it.\n//  ----------------------------------------------------------------------------\n\n//  Define poi.\n//  Name the variable: poi\n\nvar poi = ee.Geometry.Point([-56.64116785106647, -13.042136580282266]);\n\n//  Filter regions by poi to define study region\n//  Name the variable: study_region\n\n\n\n//  Center the left map on the selected study region at zoom level 6.\n\n\n\n//  Define style parameters for selected region (show outlines without interiors).\n//  Make the outlines 'yellow' and the width 1.\n//  Name the variable: style_selected_region.\n\n\n\n\n//  Add the selected study region as layer to both left and right maps and apply style parameters.\n\n\n\n//  Print region names to labels (initialized previously).\n//  Please uncomment the code block below. It should run if you have followed the naming conventions.\n\nvar cart = require('users/jhowarth/eePrimer:modules/cart.js');  // cart.printFeaturePropertyLabel(study_region, 'ADM1_NAME', a1_label);\n// cart.printFeaturePropertyLabel(study_region, 'ADM0_NAME', a0_label);\n\n//  Add labels to the chart panel.\n</code></pre>"},{"location":"lessons/global_forest_loss/#8-chart-change-over-time-in-selected-region-and-add-to-side-panel","title":"8. Chart change over time in selected region and add to side panel.","text":"<p>If you have followed the naming conventions, then the code block below should run. We will discuss how this steps work on Thursday.  </p> <pre><code>//  ----------------------------------------------------------------------------\n//  8. Chart change over time in selected region and add to side panel.   \n//  ----------------------------------------------------------------------------\n\n//  Define labels for the integer clases.\n//  Name the variable: loss_labels\n\nvar loss_labels = [\n'2000',\n'2001',\n'2002',\n'2003',\n'2004',\n'2005',\n'2006',\n'2007',\n'2008',\n'2009',\n'2010',\n'2011',\n'2012',\n'2013',\n'2014',\n'2015',\n'2016',\n'2017',\n'2018',\n'2019',\n'2020',\n'2021'\n]\n;\n\n//  Define chart computation parameters.\n//  Name the variable: loss_chart_params\n\nvar loss_chart_params = {\nimage: loss,                          //  Image stack with\nclassBand: 'lossyear',                //  Band that defines nominal zones.\nregion: study_region,                //  Cutter feature\nreducer: ee.Reducer.sum(),            //  Reducer for zonal statistic\nscale: 900,                           //  Scale for reducer\nclassLabels: loss_labels,             //  Labels for values in dough band\nxLabels: [                            //\n'loss in whole region',\n'loss in protected areas'\n]\n}\n;\n\n//  Define chart style parameters.\n//  Name the variable: loss_chart_style\n\nvar loss_chart_style = {\ncolors: loss_palette,\nlegend: {\nposition: 'none'\n},\nvAxis: {\ntitle: 'area (sq km)',\ntitleTextStyle: {italic: true, bold: false}\n},\n}\n;\n\n//  Make the chart with the computation parameters and set the style options.\n//  Name the variable: chart\n\nvar chart = ui.Chart.image.byClass(loss_chart_params)\n.setOptions(loss_chart_style);\n\n//  Add the chart to the chart panel  \n\nchart_panel.add(chart);\n</code></pre>"},{"location":"lessons/global_forest_loss/#9-write-functions-to-make-app-interactive","title":"9. Write functions to make app interactive.","text":"<p>The code block below should run if you have followed the naming conventions. We will discuss on Thursday, but don\u2019t get too nervous about this chunk. I will not ask you to create an app that can handle map clicks as part of an IP.  </p> <pre><code>//  ----------------------------------------------------------------------------\n//  9. Write functions to make app interactive.   \n//  ----------------------------------------------------------------------------\n\n//  Initialize a configuration object to store temporary variables.\n//  Name the variable: config\n\nvar config = {};\n\n// Write a function to store study region in config object.\n//  Name the variable: makeStudyRegion\n\nvar makeStudyRegion = function() {\nconfig.region = regions.filterBounds(config.poi);\n};\n\n//  Write a function that returns a chart using study region in config object.\n//  Name the variable: makeLossChart\n\nvar makeLossChart = function() {\n\n//  Define chart computation parameters.\n\nvar loss_chart_params = {\nimage: loss,                          //  Image stack with\nclassBand: 'lossyear',                //  Band that defines nominal zones.\nregion: config.region,                //  Cutter feature\nreducer: ee.Reducer.sum(),            //  Reducer for zonal statistic\nscale: 900,                           //  Scale for reducer\nclassLabels: loss_labels,             //  Labels for values in dough band\nxLabels: [                            //\n'loss in whole region',\n'loss in protected areas'\n]\n}\n;\n\n//  Define chart style parameters.\n\nvar loss_chart_style = {\ncolors: loss_palette,\nlegend: {\nposition: 'none'\n},\nvAxis: {\ntitle: 'area (sq km)',\ntitleTextStyle: {italic: true, bold: false}\n},\n}\n;\n\nreturn ui.Chart.image.byClass(loss_chart_params)\n.setOptions(loss_chart_style);\n};\n\n//  Write a function to update the chart based on study region from config object.\n//  Name the variable: updateChart\n\n\nvar updateChart = function() {\nchart_panel.clear();                                                        // Clear widgets from the panel.\ncart.printFeaturePropertyLabel(config.region, 'ADM1_NAME', a1_label);       // Print admin1 property to label.\ncart.printFeaturePropertyLabel(config.region, 'ADM0_NAME', a0_label);       // Print admin0 property to label.\nchart_panel.add(a1_label).add(a0_label);                                    // Add labels to chart panel        \nchart_panel.add(makeLossChart());                                           // Add makeLossChart() to panel\n};\n\n//  Write a function to update the map with study region from config object.  \n//  Name the variable: updateMap\n\nvar updateMap = function() {\nleft_map.centerObject(config.region, 6);\nleft_map.layers().set(5, makeLayer(config.region, style_selected_region, 'Selected region',1));  right_map.layers().set(5, makeLayer(config.region, style_selected_region, 'Selected region',1));  };\n\n//  Write a function that adds the clicked point to the config object\n//  and updates the chart and map based on the new study region.\n//  Name the variable: handleMapClick\n\nvar handleMapClick = function(coordinates) {\nconfig.poi = ee.Geometry.Point([coordinates.lon, coordinates.lat]);\nmakeStudyRegion();\nupdateChart();\nupdateMap();\n};\n\n//  Call the function when user clicks the left map.  \n\nleft_map.onClick(handleMapClick);\n</code></pre>"},{"location":"lessons/global_forest_loss/#deliverables-part-2","title":"Deliverables (part 2)","text":"<p>Please submit a link to your completed code in this DROPBOX by 9am on Thursday (12/1). We will discuss how to publish you code as an app in class.</p>"},{"location":"lessons/global_forest_loss/#explore-global-forest-loss","title":"Explore global forest loss","text":"<p>For each region listed below, please use the App and try to answer these questions:  </p> <ul> <li>how has the location of deforestation changed over time in the region?  </li> <li>are the proximate drivers of deforestation from wildfire, farming, ranging, mining, or another kind of land use?  </li> <li>how has the location of deforestation in protected areas changed over time?   </li> </ul> <p>Regions:  </p> <ul> <li>Mato Grosso, Brazil  </li> <li>Para, Brazil  </li> <li>Rondonia, Brazil  </li> <li>Madre de Dios, Peru  </li> <li>Equateur, Democratic Republic of Congo  </li> <li>Kasai, Democratic Republic of Congo  </li> <li>Kalimantan Timur, Indonesia  </li> <li>Nimrod, Oregon  </li> <li>Panama City, Florida  </li> </ul>"},{"location":"lessons/global_forest_loss/#deliverables-part-3","title":"Deliverables (part 3)","text":"<p>Please choose one region in the world to investigate (not from the list above) and respond to the prompts in this form. Thank you.   </p>"},{"location":"lessons/global_oceans/","title":"Global oceans","text":""},{"location":"lessons/global_oceans/#motivating-questions","title":"Motivating questions","text":"<ul> <li>How does the elevation of the ocean\u2019s floor relate to phytoplankton blooms?</li> <li>How does sea surface temperature relate to phytoplankton blooms?  </li> <li>How does one season differ from a long term average?  </li> <li>How do these anomalies in sea surface temperature relate to hurricanes?  </li> <li>How does SST relate to El Ni\u00f1o and La Ni\u00f1a events (hint)?  </li> <li>How do sea surface temperatures and phytoplankton blooms change over seasons(hint)?      </li> </ul>"},{"location":"lessons/global_oceans/#map-goal","title":"Map goal","text":"<p>This week, we will use Earth Engine to compile map layers that allow us to explore these kinds of questions about global ocean systems.</p> <p> </p> <p>Here is a link to the app that will open in a separate window.</p>"},{"location":"lessons/global_oceans/#background-resources","title":"Background resources","text":"<ul> <li>Global Circulation<ul> <li>Part one: differential heating </li> <li>Part two: the three cells </li> <li>Part three: the Coriolis effect and winds </li> </ul> </li> <li>Ocean\u2019s Green Machines</li> <li>SST and Hurricanes </li> <li>Earth Engine datasets <ul> <li>\u2018NOAA/NGDC/ETOPO1\u2019 </li> <li>\u2018NASA/OCEANDATA/MODIS-Terra/L3SMI\u2019 </li> </ul> </li> <li>MODIS </li> </ul>"},{"location":"lessons/global_oceans/#starter-script-1","title":"Starter script (1)","text":"<p>Please try to complete this script and submit a link to your code in this DROPBOX by the end of class.</p> <p>If you have worked until the end of lab and have not finished the script, please still submit a link to your script to the dropbox and try to complete the script before lecture tomorrow.  </p> <pre><code>// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// TITLE:        week_05_practice_problem.js\n// NAME:         Jeff Howarth\n// DATE:         10/12/22\n// PURPOSE:      Explore sst and chlorophyll-a of global oceans.\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// ------------------------------------------------------------------------\n// 1. BATHYMETRY\n// ------------------------------------------------------------------------\n\n// Load bathymetry dataset from 'NOAA/NGDC/ETOPO1' and select for 'bedrock' band.\n\n\n\n// Create a land mask.\n\n\n\n// Load the community palette module.\n\n\n\n// Select a community palette.\n// Please use cmocean.Deep[7].\n// Please be sure deeper is darker colors and shallower elevations are lighter colors.\n\n\n\n// Config viz parameters. Stretch color palette over -5000 - 0 data values.\n\n\n\n// Add layer to map with land mask.\n\n\n\n// // ------------------------------------------------------------------------\n// // 2. OCEAN WATER\n// // ------------------------------------------------------------------------\n\n// Load 'NASA/OCEANDATA/MODIS-Terra/L3SMI'. Select 'sst' and 'chlor_a' bands.\n\n\n\n// Inspect first record and print size (number of images) of collection.\n\n\n\n// To filter image collection by calendarRange to make long term record.\n// 1. Define variables to make August and November the start and end months.\n\n\n\n// 2. Define 2000 and 2020 as start and end years for long term record.\n\n\n\n// 3. Filter by calendar range and call the startYear, endYear, startMonth, and endMonth variables defined above.\n\n\n\n// Reduce image collection into an image that represents the long term average (average value for each pixel).\n\n\n\n// Select community palette for sst. Please use colorbrewer.Spectral[11].\n// Please make sure cool to warm colors map to cool to warm temperatures.\n\n\n\n// Define vis parameters for sst. Stretch palette from 10 to 30 data values.\n\n\n\n// Draw layer of sst long term average with land mask.\n\n\n\n// Select community palette for chorophyll-a.\n// Please use only the first six colors of niccoli.linearl[7].\n\n\n\n// Define vis parameters for chlorophyl. Stretch values from 0 to 1 data values.\n\n\n\n// Draw chlorophyll-a layer with land mask.\n\n\n\n// ------------------------------------------------------------------------\n// 3. ANOMALIES\n// ------------------------------------------------------------------------\n\n// Define 2017 as the target year (or short term record).\n\n\n\n// Filter for the target year (defined above).\n\n\n\n// Inspect results.\n\n\n\n// Take the mean of the target and subtract the mean of the long term record.\n\n\n\n// Select community palette for sst anomaly.\n// Please use colorbrewer.RdBu[9].\n// Please be sure cooler to warmer colors match cooler to warmer temperatures.\n\n\n\n// Define viz parameters. Stretch palette from -2 to 2 data values.\n\n\n\n// Select community palette for chlorophyll-a anomaly.\n\n\n\n// Define viz parameters. Stretch palette from -0.1 to 0.1.\n\n\n\n// Add anomaly layers to map.\n</code></pre>"},{"location":"lessons/global_oceans/#new-code-snippets","title":"New code snippets","text":"<p>The list below introduces new methods that you need to solve this problem.   </p> <ul> <li>Community palette module  </li> <li>Palettes for multiband images  </li> <li>Load image collection  </li> <li>Select bands  </li> <li>Inspect image collection  </li> <li>Filter by dates  </li> <li>Reduce with local operations  </li> </ul>"},{"location":"lessons/global_oceans/#starter-script-2","title":"Starter script (2)","text":"<p>This script is already complete for you. You should be able to append it to the end of your part 1 script, update the name for the target year, and run.</p> <pre><code>// ========================================================================\n// 4. HURRICANES\n// ========================================================================\n\n// Load and filter feature collection for target year (defined previously).\n// Also remove all features with 'max_wind_kts' equal to -99.\n\nvar canes_fc = ee.FeatureCollection(\"NOAA/NHC/HURDAT2/atlantic\")\n.filter(ee.Filter.eq('year', targetYear))             // rename targetYear to match your script from part 1\n.filter(ee.Filter.neq('max_wind_kts',-99))\n;\n\n// Print the first feature in the collection.\n// Also print the 'min' and 'max' values of the 'max_wind_kts' property in the collection.\n\nprint(\n'canes', canes_fc.first(),\n'min', canes_fc.aggregate_min('max_wind_kts'),\n'max', canes_fc.aggregate_max('max_wind_kts')\n)\n;\n\n// Center the map on the feature collection at zoom level 4.\n\nMap.centerObject(canes_fc, 4);\n\n// Set base map to satellite with labels.\n\nMap.setOptions('HYBRID');\n\n// Add feature collection to map as layer with color 'Ivory'.\n\nMap.addLayer(canes_fc, {color: 'Ivory'}, 'Hurricane points',0);\n\n// ------------------------------------------------------------------------\n// Prep and display canes as lines.\n// ------------------------------------------------------------------------\n\n// Import a module for visualizing the hurricane data from 'users/jhowarth/eePrimer:modules/caneViz.js'.\n\nvar caneViz = require('users/jhowarth/eePrimer:modules/caneViz.js');\n\n// Call makeCaneLines() function from module to create hurricane track lines for each named storm.\n\nvar caneLines = caneViz.makeCaneLines(canes_fc);\n\n// Print a list of the named storms for the target year.\n\nprint(\n'cane lines',\ncaneLines.aggregate_array('name')\n.distinct()\n.sort()\n)\n;\n\n// Add the track lines to the map as a layer. Display with 'DarkSlateGray' color.\n\nMap.addLayer(caneLines, {color: 'DarkSlateGray'}, 'Cane lines', 1);\n\n// ------------------------------------------------------------------------\n// Set up map\n// ------------------------------------------------------------------------\n\n// Display feature collection as graduated circles.\n\n\n// Step 1. Define viz paramters.\n// Call makeGraduatedCircles() function from module with four arguments.\n\nvar caneGradSize = caneViz.makeGraduatedCircles(\ntargetYear,       // Feature collection to symbolize.\n6,                // Size of smallest point symbol.\n'DarkRed',        // Color of point symbols.\n0.5               // Opacity of point symbols.\n);\n\n// Step 2. Create feature view layer.\n\nvar gradCircles = caneViz.makeCaneLayer(\n\"NOAA/NHC/HURDAT2/atlantic_FeatureView\",    // Address of featureView layer.\ncaneGradSize,                               // Viz parameters for graduated cricles (you made this in the last step).\n'Hurricane class'                           // Label for the layer.\n)\n;\n\n// Step 3. Add featureView layer to map.\n\nMap.add(gradCircles);                         // Note: use .add() with the object you made above as argument (rather than addLayer().\n</code></pre>"},{"location":"lessons/longest_haul/","title":"The Shortest Route for the Longest Haul","text":""},{"location":"lessons/longest_haul/#introduction","title":"Introduction","text":"<p>Currently, the longest non-stop commercial flight connects Singapore (SIN) to Newark (EWR). Does the flight path follow the great circle route between the two airports? In theory, this route represents the shortest geographic distance between these two locations.       </p> <p>To begin to answer this question, please create a map that shows the great circle route between the two airports. Please copy and paste the starter script (below) into the code editor and then save it to your repo. Please write one or more lines of code to \u2018answer\u2019 each prompt.  </p> <p>We will discuss both your solution (script) and our original question (does the flight follow the great circle route?) in our next class meeting. At that time, I will also show you how to submit your scripts and document your coursework this semester.      </p>"},{"location":"lessons/longest_haul/#code-key","title":"Code key","text":"<p>To solve this problem, please reference the following new code snippets:      </p> <ul> <li>Get map center </li> <li>Get zoom </li> <li>Set map center and zoom </li> <li>Construct point geometry </li> <li>Add layer to map</li> <li>Center map on object </li> <li>Construct a feature</li> <li>Construct line geometry </li> <li>Calculate line length </li> <li>Convert units </li> </ul>"},{"location":"lessons/longest_haul/#concepts","title":"Concepts","text":"<p>To understand these code snippets, we will discuss these concepts in lecture.    </p>"},{"location":"lessons/longest_haul/#starter-script","title":"Starter script","text":"<pre><code>//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  Problem:      The longest haul  \n//  Date:         Today's date\n//  Student:      Your name here please\n//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n//  Construct point geometry objects for SIN and EWR.   \n\n//  Construct line geometry object between the two airports.  \n\n//  Calculate the length of the route.  \n\n//  Make a feature called 'longest_haul' with the line geometry and the distance of the flight as an attribute.  \n\n//  Inspect the result by printing to Console.\n\n//  Center the map as follows:  \n//    latitude: -0.9678795804756186  \n//    longitude: -82.83931467161779  \n//    zoom level: 3  \n\n//  Change the base map to hybrid.\n\n//  Add the line feature to the map, display it with red, and label the layer 'Longest haul route'.\n</code></pre>"},{"location":"lessons/longest_haul/#airport-support","title":"Airport support","text":"<p>To help you find the airports, here is a screen shot that shows the location of SIN:  </p> <p></p> <p>And here is another that shows the location of EWR.</p> <p></p>"},{"location":"lessons/longest_haul/#discussion","title":"Discussion","text":"<ul> <li>Drawing lines on Mercator </li> <li>The True Size of</li> <li>SIN-EWR on sphere</li> <li>SIN-EWR last weekend </li> <li>Geographic friction</li> <li>EWR-SIN last weekend </li> <li>Geopolitical friction</li> </ul>"},{"location":"lessons/lst/","title":"Land surface temperature","text":""},{"location":"lessons/lst/#introduction","title":"Introduction","text":"<p>This week we will estimate land surface temperature from Landsat imagery and then compare how parts of a region differ from the whole region.  </p> <p>Our key technical questions this week include:  </p> <ul> <li>What are scenes?  </li> <li>What are common sources for image scenes and how do they differ?</li> <li>How does a mosaic differ from a composite?</li> </ul> <p>Link to background materials </p> <p>Our thematic questions include:  </p> <ul> <li>What is land surface temperature (LST)?  </li> <li>What is a spatial anomaly and how does this differ from the anomalies that we derived last week?  </li> <li>How are spatial anomalies related to the principle of distributive justice?  </li> </ul> <p>Link to background materials </p>"},{"location":"lessons/lst/#readings","title":"Readings","text":"<p>In prep for this week\u2019s problem, please read this article from The New York Times.   </p>"},{"location":"lessons/lst/#map-goal","title":"Map goal","text":"<p>Here is a link to the app that will open in a separate window. </p>"},{"location":"lessons/lst/#dropbox","title":"Dropbox","text":"<p>By the end of lab, please submit a link to your solution in this DROPBOX. If you have worked through the end of lab and have not completed the solution, please try to complete the work and submit a link that updates your solution to the same dropbox before the start of lecture tomorrow.  </p>"},{"location":"lessons/lst/#new-methods","title":"New methods","text":"<p>The starter script below draws on many methods that you have learned previously. Here is a list of the new methods that you will need for this problem:  </p> <ul> <li>Filter image collection by image property </li> <li>Reduce image by regions</li> <li>Convert feature collection to image</li> <li>Construct a gradient legend</li> <li>Construct a qualitative legend </li> <li>Check image output during workflow</li> <li>Check feature collection during workflow </li> </ul>"},{"location":"lessons/lst/#starter-script","title":"Starter script","text":"<pre><code>//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  Problem:      LST and HOLC in US Cities\n//  Date:         10/19/2022\n//  Author:       Your name here please\n//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// -------------------------------------------------------------------\n// 1. LOAD HOLC ZONES FOR A STUDY REGION\n// -------------------------------------------------------------------\n\n// Import feature collection of HOLC maps from 'projects/ee-primer/assets/holc_numeric_grades'\n\nvar holc = ee.FeatureCollection('projects/ee-primer/assets/holc_numeric_grades');\n\n// Inspect feature collection.\n//  Print first feature in collection.\n//  And print list of US cities in 'city' property of the feature collection.\n//    This list should show every distinct city name sorted alphabetically.\n//    Your result should contain 196 elements (city names).\n\n\n\n// Filter feature collection for a study region.\n// To start, please filter for features where 'city' property is 'Baltimore'.\n\n\n\n// -------------------------------------------------------------------\n// 2. Load Landsat image collection.\n// -------------------------------------------------------------------\n\n// Import module for LST computation from 'users/sofiaermida/landsat_smw_lst:modules/Landsat_LST.js'\n\nvar LandsatLST = require('users/sofiaermida/landsat_smw_lst:modules/Landsat_LST.js');\n\n// Apply module to produce image collection.\n// Use the 'L8' collection.\n// Start: 2020-07-01'. End: '2022-09-01'\n\nvar collection = LandsatLST\n.collection\n(\n'L8',                               // landsat collection\n'2020-07-01',                       // start date\n'2022-09-01',                       // end date\nfc                                  // name of study region to filter images  \n)\n;\n\n// Print first image in collection and size of collection.\n// If you used Baltimore as study city,\n// the collection should contain 42 images.\n\n\n\n// -------------------------------------------------------------------\n// 3. Filter Landsat image collection.\n// -------------------------------------------------------------------\n\n// Filter the collection from last step (output of LandsatLST)\n// for images collected in summer months (July and August)\n// with cloud cover less that 10 percent.\n// Also select only the 'LST' band from the images.\n\n\n\n// Print first image and size of collection.\n// If you used Baltimore as study city,\n// the collection should now contain 4 images.\n\n\n\n// --------------------------------------------------------------------------------\n// 4. Reduce image collection to image.\n// --------------------------------------------------------------------------------\n\n// Write a function that does two things:\n//  (1) reduce summer month collection to mean image (grr!)\n//  (2) convert units of reduced image from Kelvin to Fahrenheit.\n//\n// K to F conversion involves three steps:\n//  (1) Subtract 273.15 from Kelvin temperature\n//  (2) Multiply by 1.8\n//  (3) Add 32\n\n\n\n// Apply function to summer month image collection.\n\n\n\n// Print your result.\n// The output should now be an Image rather than an Image collection.\n// If you check for min and max values, your min should be 68.2 and your max 118.8.\n\n\n\n// --------------------------------------------------------------------\n// 5. Reduce image by regions.\n// --------------------------------------------------------------------\n\n// First you want to find the mean temp in each part of your study city.\n// To do this, reduce mean summer temperature values within each study city HOLC feature.\n//  where HOLC features are cookie cutters,\n//  and mean summer month LST is dough.\n//\n// Set the scale so that it is the same as the 'dough'.\n\n\n\n// Inspect the result.\n// This should be a feature collection.\n// For Baltimore, you should have 59 features in collection.\n// Each feature will have a new property called 'mean' that holds mean temp of feature.\n// The min value should be 92.4 and the max should be 110.7.   \n\n\n\n// Now you want to represent the 'whole' study region as a single feature.\n// To do this, union all HOLC features in study city.\n\n\n\n// Inspect result. You should have a Feature Collection with 1 Feature in it.\n\n\n\n// Now you can find the mean temp in your whole study region.\n// Reduce mean summer month land surface temperature within union of holc features\n\n\n\n\n// Inspect result. This should be a feature collection with one feature.\n// Again, the feature should have a property 'mean'\n// that holds the mean LST in the whole study region.\n// The min and max should be 102.1.\n\n\n\n// --------------------------------------------------------------------\n// 6. Convert vector to raster.\n// --------------------------------------------------------------------\n\n// Create a function to convert feature collection to image.\n\n\n\n// Apply function to convert mean summer temperature in each HOLC feature into an image.\n\n\n\n// Inspect result. Output should now be an Image.\n// The min should be 110.7 and the max should be 92.4.\n\n\n\n// Apply function to convert mean summer temperature for the union of HOLC features into an image.\n\n\n\n// Inspect result. Again, output should now be an Image.\n// The min and max should both be 102.1.\n\n\n\n// --------------------------------------------------------------------\n// 7. Compute spatial anomalies as percent difference.\n// --------------------------------------------------------------------\n\n// Use map algebra to estimate the 'percent difference' between parts and whole:\n//  percent_diff =  (mean_part - mean_whole) / mean_whole * 100\n\n\n// If you check, the min should be -9.5 and the max 8.5.\n\n// --------------------------------------------------------------------\n// 8. Compose map.\n// --------------------------------------------------------------------\n\n// Load modules.\n\nvar customBase = require('users/jhowarth/eePrimer:modules/darkBase.js');\nvar palettes = require('users/gena/packages:palettes');\n\n// Set base map to 'darkBase'.\n\nMap.setOptions('darkBase', {'darkBase': customBase.darkBase});\n\n// Center map on study city HOLC collection at zoom level 11.\n\n\n\n// Configure visualization parameters for percent different image.\n//  Show values from -7 to 7\n//  and use crameri.vik[25] from ee-palettes.\n\n\n\n// Add percent difference image as layer to map.\n//  Label layer 'Percent difference from average'.\n//  Make layer display 0.5 opacity by default.\n\n\n// --------------------------------------------------------------------\n// 9. Construct HOLC zone reference map and masked layers.\n// --------------------------------------------------------------------\n\n// Convert HOLC study city feature collection into an image.\n// Use the 'grade' property to paint image values.\n\n\n\n// Inspect the result from above.\n\n\n\n\n// Add layer of percent differences that only shows the redlined zones.\n// Label this layer 'Redlined neighborhoods'.\n\n\n\n// Add layer of percent differences that only shows the non-redlined zones.\n// Label this layer 'Not redlined neighborhoods'.\n\n\n// Define vis parameters for HOLC zones.\n// Here is a palette based on the original HOLC color scheme:\n// ['#74a161','#7caeb6','#d5c958','#d97867']\n\n\n\n// Add HOLC reference layer to map with vis parameters defined in last step.\n\n\n\n\n// --------------------------------------------------------------------\n// 10. Add map keys (legends) for map layers.\n// --------------------------------------------------------------------\n\n// Load cart module.\n\nvar cart = require('users/jhowarth/eePrimer:modules/cart.js');\n\n// Construct gradient legend for percent difference of LST layer.\n\n\n\n// Add legend to map.\n\n\n\n// Make labels for HOLC grades.\n\nvar holc_grades = [\n'A: Best',\n'B: Still desirable',\n'C: Definitely declining',\n'D: Hazardous'\n]\n;\n\n// Construct qualitative legend for HOLC reference map.\n\n\n\n// Add legend to map.\n</code></pre>"},{"location":"lessons/lst/#further-resources","title":"Further resources","text":"<p>This topic was also covered by National Public Radio soon after publication of this academic research article.   </p> <p>In fall 2020, Zach Levitt \u201820.5 developed the earth engine app shown below as an independent study with me in Geography. The study compared graphical presentations of data in news and academic outlets, reproduced the presentations in one or more source, and piloted designs to support novice readers. Zach is currently a graphics editor at The New York Times.</p> <p> </p> <p>Here is a link to the app that will open in a separate window. </p>"},{"location":"lessons/natural_false_color/","title":"Natural and false color","text":""},{"location":"lessons/natural_false_color/#introduction","title":"Introduction","text":"<p>In this lesson, you will construct natural and false color composites with the Landsat 5 collection.  </p> <p>Before you get started, please write down the descriptions for the first six bands of images in this collection.       </p>"},{"location":"lessons/natural_false_color/#concepts","title":"Concepts","text":"<ul> <li>Band and Image </li> <li>Contrast enhancement</li> <li>RGB composites </li> <li>Additive color </li> <li>Band combinations </li> </ul>"},{"location":"lessons/natural_false_color/#app","title":"App","text":"<p>Please use this app for the activities described below. It may be helpful to open the app in a new browser tab with this link.  </p> <p> </p>"},{"location":"lessons/natural_false_color/#construct-a-natural-color-composite","title":"Construct a natural color composite","text":"<p>With the app below, please load an image and then do the following:  </p> <ol> <li>Select the \u2018SR_B3\u2019 band for the red channel and enhance the contrast.</li> <li>Select the \u2018SR_B2\u2019 band for the green channel and enhance the contrast.</li> <li>Select the \u2018SR_B1\u2019 band for the blue channel and enhance the contrast.  </li> <li>Click the Add RGB composite button.  </li> </ol> <p>Why does the resulting image look like a \u2018natural\u2019 image?  </p>"},{"location":"lessons/natural_false_color/#construct-a-nir-false-color-composite","title":"Construct a (NIR) false color composite.","text":"<p>Repeat the steps, but this time use:  </p> <ol> <li>\u2018SR_B4\u2019 for the red channel,</li> <li>\u2018SR_B3\u2019 for the green channel,</li> <li>\u2018SR_B2\u2019 for the blue channel.</li> </ol> <p>Then click the Add RGB composite button.   </p> <p>Why does the resulting image look different?  </p> <p>Zoom into the map and click a location to chart the pixel values in each band.</p> <p>Why does a location look bright red? What land cover does this represent?  </p> <p>Why does a location look white?  What land cover does this represent?  </p>"},{"location":"lessons/natural_false_color/#construct-a-swir-false-color-composite","title":"Construct a (SWIR) false color composite.","text":"<p>Repeat the steps, but this time use:  </p> <ol> <li>\u2018SR_B5\u2019 for the red channel,</li> <li>\u2018SR_B4\u2019 for the green channel,</li> <li>\u2018SR_B2\u2019 for the blue channel.</li> </ol> <p>Then click the Add RGB composite button.   </p> <p>Why does the resulting image look different?  </p> <p>Zoom into the map and click a location to chart the pixel values in each band.  </p> <p>Why does a location look bright green? What land cover does this represent?  </p> <p>Why does a location look magenta? What land cover does this represent?   </p> <p>What does a location look bright blue? What land cover does this represent?  </p>"},{"location":"lessons/protected_lands/","title":"Area-based conservation goals at the town scale","text":""},{"location":"lessons/protected_lands/#introduction","title":"Introduction","text":"<p>In January 2022, Amy Sheldon of Middlebury introduced H.606 to the Committee on Natural Resources, Fish, and Wildlife in Montpelier, Vermont. \u201cAn act relating to community resilience and biodiversity protection\u201d would require the State of Vermont to protect 30 percent of lands and waters in the state by 2030 and 50 percent by 2050. The conserved land would permanently protect natural landcover with different degrees of human use and resource extraction and include a mixture of ecological reserve areas, biodiversity conservation areas, natural resource management areas, and sustainable forest management areas. For much of Vermont, natural land cover is forested land cover or early-successional forest cover, in contrast to open, bare, and impervious land cover maintained by agriculture and development.  </p> The bill passed the House in March and then passed the Senate two months later. On May 12, 2022, the bill was delivered to Governor Scott for his signature. On June 2, the Governor vetoed the bill and wrote:   <p>\u201cVermont has a long history of effective land conservation that has significantly contributed to the state\u2019s vibrant, resilient working landscape of farms and forests, vast natural areas, and world class opportunities for outdoor recreation. This is a result of flexible and innovative tools like our current use program and the payment-for-ecosystem-services model. These programs are critical to achieving our conservation priorities because they combine conservation planning with incentives \u2013 making it more attractive and affordable for Vermont families to keep and conserve their land, farms and forests.  </p> <p>\u201cOver the course of the legislative session, the Agency of Natural Resources testified multiple times against this bill. Among the objections, the Agency pointed to the conservation goals established in H.606 are unnecessarily tied to \u2013 and unreasonably limited to \u2013 permanent protection. The Agency has repeatedly said that permanent preservation has not been, and cannot be, the state\u2019s exclusive conservation tool and this bill, intentional or not, would diminish the existing and successful conservation tools we have. Based on the objections outlined above, I am returning this legislation without my signature pursuant to Chapter II, Section 11 of the Vermont Constitution.\u201d  </p> <p>Your goal for this week is to develop a tool to assess the landcover of lands with permanent protections and lands registered in the Current Use and Value Appraisal Program within any Vermont town and create a chart to evaluate 30 by \u201830 and 50 by \u201850 goals at the town scale.    </p> <p>The app below illustrates the basic tool that you will make using the case of Middlebury, Vermont.</p> <p> </p> <p>Here is a link to the app that will open in a separate window.</p>"},{"location":"lessons/protected_lands/#starter-script","title":"Starter script","text":"<pre><code>//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  TITLE:        week_03_practice_problem.js  \n//  NAME:         Your name here please\n//  DATE:         Today's date\n//  PURPOSE:      Town-scale analysis of protected and current use land cover.      \n//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n// Use the drawing tool to drop a point on Battell Bridge.\n\n// ----------------------------------------------------------------------------\n// Data dictionary for problem.\n// ----------------------------------------------------------------------------\n\nvar data = {\ntowns: 'projects/conservation-atlas/assets/cadastre/Boundary_TWNBNDS_poly',\nlc: 'users/jhowarth/middCC/LandLandcov_BaseLC2016',\nag: 'projects/conservation-atlas/assets/landCover/lcAg_2016',\npro: 'projects/conservation-atlas/assets/protections/VT_Protected_Lands_Database',\nuva: 'projects/conservation-atlas/assets/cadastre/Use_Value_Appraisal_Parcels'\n}\n;\n\n// ----------------------------------------------------------------------------\n// Create a map centered on a study region.\n// ----------------------------------------------------------------------------\n\n// Load town feature collection from data.towns.\n\n// Filter study region by a poi.\n\n// Center on study region at zoom level 11.\n\n// Set base map to satellite with labels.\n\n// Add study region as a layer to map.\n\n// ----------------------------------------------------------------------------\n// Display raster image as a map layer.  \n// ----------------------------------------------------------------------------\n\n// Construct a land cover image from data.land_cover.\n\n// Inspect image.\n\n// Define a palette to display land cover values.  \n\nvar lc_palette = [\n'#A1E67E',    //   1. Tree Canopy  \n'#F2F179',    //   2. Grass/Shrub\n'#f7f7f7',    //   3. Bare soil\n'#95C6E6',    //   4. Water\n'#525252',    //   5. Buildings    \n'white',      //   6. Roads\n'#cccccc',    //   7. 0ther pavement\n'white',      //   8. Railroads  \n];\n\n// Define visualization parameters.\n\n// Add layer to map.\n\n// ----------------------------------------------------------------------------\n// Convert feature collection to a binary image.\n// ----------------------------------------------------------------------------\n\n// Load a feature collection from data.ag.\n\n// Inspect first record of collection.\n\n// Add layer to map.  \n\n// Create a function that gives each feature the property 'tag' with the value 1.\n\n// Apply function to all features in collection.  \n\n// Inspect first record of collection.  \n\n// Create a function to convert feature collection to image.\n\n// Apply function to feature collection.\n\n// Add binary image to map.\n\n// ----------------------------------------------------------------------------\n// Map algebra: local operations between two raster layers.\n// ----------------------------------------------------------------------------\n\n// Invert binary.\n\n// Erase inverted binary from landcover\n\n// Add a color for agriculture to palette list.\n\n// Inspect the palette.\n\n// Define vis parameters.\n\n// Add layer to map.\n\n// ----------------------------------------------------------------------------\n// Generalize nominal attributes (aka reclassify).  \n// ----------------------------------------------------------------------------\n\n// Reclassify land cover\n\n// OLD VALUE    OLD NAME            NEW NAME              NEW VALUE\n// 0            Ag                  Active Field          4\n// 1            Tree canopy         Forest                1\n// 2            Grass/Shrub         Old field             3\n// 3            Bare soil           Developed             5\n// 4            Water               Water                 2\n// 5            Buildings           Developed             5\n// 6            Roads               Developed             5\n// 7            Other pavement      Developed             5\n// 8            Railroads           Developed             5\n\n// Create list of old values.\n\n// Create list of new values.\n\n// Reclassify new values from old values.\n\n// Define palette for generalized layer.\n\n// Define vis parameters for generalized layer.\n\n// Add generalized layer to map.\n\n// ----------------------------------------------------------------------------\n// Convert feature collection to binary image and apply as a mask layer.  \n// ----------------------------------------------------------------------------\n\n// Construct feature collection from data.pro.\n\n// Tag features.\n\n// Make image from tagged features.\n\n// Inspect result.\n\n// Add binary layer to map.\n\n// Add generalized layer to map with protected lands mask.  \n\n// ----------------------------------------------------------------------------\n// Convert feature collection to binary image and apply mask layers.\n// ----------------------------------------------------------------------------\n\n// Construct feature collection from data.uva.\n\n// Tag features.\n\n// Make image from tagged features.\n\n// Inspect result.\n\n// Add binary layer to map.\n\n// Add generalized layer to map with protected lands mask.  \n\n// Create a layer that represents UVA lands without permanent protections.\n\n// ----------------------------------------------------------------------------\n// Compute area of a zone.  \n// ----------------------------------------------------------------------------\n\n// Create layer of pixel areas.\n\n// Inspect result.\n\n// Create parameters of zonal statistic.\n\n// Compute zonal statistic.\n\n// Inspect result.\n\n// ----------------------------------------------------------------------------\n// Chart area of regions as a percent of zone.  \n// ----------------------------------------------------------------------------\n\n// Represent the percentage of the study region's area represented by the area of each pixel.  \n// In other words, divide the area of each pixel by the area of the study region.\n// Rename this layer 'all of town'.\n\n// Inspect results.\n\n// Construct image with three dough bands and one cutter band.   \n//  Band 1 = pixel percentages  \n//  Band 2 = pixel percentages masked by protected lands  \n//  Band 3 = pixel percentages masked by uva lands without permanent protections  \n//  Band 4 = generalized land cover classes.\n\n// Inspect result.\n\n// ----------------------------------------------------------------------------\n// Chart zonal statistic of each dough band with cutter zones.\n// ----------------------------------------------------------------------------\n\nvar lc_labels = [\n'',\n'Tree canopy',\n'Water',\n'Old field',\n'Active field',\n'Developed'\n]\n;\n\nvar chart_params = {\nimage: simple_lc_area,\nclassBand: 'land cover',\nregion: study_region,\nreducer: ee.Reducer.sum(),\nscale: 10,\nclassLabels: lc_labels,\n}\n;\n\nvar chart = ui.Chart.image.byClass(chart_params)\n.setChartType('BarChart')\n.setOptions({\ntitle: 'Land cover in study region',\nhAxis: {\ntitle: 'Percent of study region',\ntitleTextStyle: {italic: false, bold: true},\n},\ncolors: simple_lc_palette,\n}\n)\n;\n</code></pre>"},{"location":"lessons/protected_lands/#new-code-snippets","title":"New code snippets","text":"<p>The list below introduces new methods that you need to solve this problem.  </p> <ul> <li>Construct image from address  </li> <li>Inspect image  </li> <li>Add image as layer to map  </li> <li>Convert feature collection to binary image  </li> <li>Threshold an image  </li> <li>Map algebra  </li> <li>Generalize (reclassify) image  </li> <li>Apply mask to image  </li> <li>Compute area of a zone  </li> <li>Chart area of regions as percent of zone    </li> </ul>"},{"location":"lessons/seaside_town_in_the_desert/","title":"Seaside town in the desert","text":""},{"location":"lessons/seaside_town_in_the_desert/#introduction","title":"Introduction","text":"<p>The goal today is to visualize changes over the last 30 years in the vicinity of Muynak, Uzbekistan by making a gif animation similar to Google\u2019s Time Lapse.  </p>"},{"location":"lessons/seaside_town_in_the_desert/#dropbox","title":"Dropbox","text":"<p>Please paste a copy of your final script in the dropbox below by 5pm on Friday 11/11. As announced in class on Wed, we will not distribute copies of the script in class on Thursday and there will be no correction phase this week.  </p> <p>DROPBOX </p>"},{"location":"lessons/seaside_town_in_the_desert/#background","title":"Background","text":"<ul> <li>What is Landsat? </li> <li>Mother of Landsat </li> <li>Landsat lexicon </li> </ul>"},{"location":"lessons/seaside_town_in_the_desert/#new-code","title":"New code","text":"<ul> <li>Landsat scaling function </li> </ul>"},{"location":"lessons/seaside_town_in_the_desert/#starter-script","title":"Starter script","text":"<pre><code>/*\n    TITLE:  Changes near Muynak, Uzbekistan with Landsat  \n    AUTHOR: Jeff Howarth  \n    UPDATE: 11/9/2022  \n\n*/\n\n// -----------------------------------------------------------------------------------\n// Define study region\n// -----------------------------------------------------------------------------------\n\n// Create a point on Muynak, Uzbekistan and buffer by 400 kilometers\n//  Name the output: roi\n//  Short for \"region of interest\"  \n\n\n\n// Center the map on the roi and zoom level 7.  \n\n\n\n// Change the base layer to 'TERRAIN'.  \n\n\n\n// -----------------------------------------------------------------------------------\n// Test a workflow\n// -----------------------------------------------------------------------------------\n\n// Write a function to apply scaling factors for Landsat collections.\n\n\n\n// Step 1: Chain a workflow that does the following steps:  \n//  1. Constructs an image collection from the 'LANDSAT/LT05/C02/T1_L2' address\n//  2. Filters by roi\n//  3. Filters by calendar year 1989\n//  4. Filters by 'CLOUD_COVER' less than 20\n//  5. Maps the applyScaleFactors function over the image collection\n//  6. Sorts by 'CLOUD_COVER'\n//  Name the output: test\n\n\n\n\n// Step 2: Print the following to console:\n//  1. The year as a string,\n//  2. The size of the collection,\n//  3. All of the images in the collection.   \n\n\n\n// Step 3: Reduce the image collection by median value of each pixel.\n//  Name the output: median_test  \n\n\n\n// Step 4: Print the year as string and the image to Console.\n\n\n\n// Step 5: Define viz parameters for the image collection to display a natural color composite from 0.0 and 0.3.\n//  Name the variable: viz_nc  \n\n\n\n// Step 6: Add the median_test layer to the map\n//  Apply viz_nc\n//  Name the layer 'test'\n\n\n\n// Define a swir false color composite that ranges from 0.0 to 0.5.  \n\n\n\n\n// -----------------------------------------------------------------------------------\n// Generalize workflow as a function.\n// -----------------------------------------------------------------------------------\n\n// Define a global variable for cloud cover criterion as 25.\n//  Name the variable: cloud\n\n\n\n// Write a function that implements your test workflow and takes three arguments:\n//  ic: image collection address\n//  yr: year for calendar range\n//  vp: viz parameters\n//\n// This function should implement:\n//  Step 1\n//  Step 2\n//  Step 3\n//  Step 4\n//  Step 6\n//\n// And it should return the image.\n\n// Name the function:\n//  doItAll\n\n\n\n// -----------------------------------------------------------------------------------\n// Apply the function to make a time series.\n// -----------------------------------------------------------------------------------\n\n// Use the following collections and years with viz_fc:\n//  \"LANDSAT/LT05/C02/T1_L2\", 1989\n//  \"LANDSAT/LT05/C02/T1_L2\", 1994\n//  \"LANDSAT/LT05/C02/T1_L2\", 2000\n//  \"LANDSAT/LE07/C02/T1_L2\", 2004\n//  \"LANDSAT/LE07/C02/T1_L2\", 2009\n//\n// Name each output to identify Landsat mission and image year:\n//  For example: L4_1989\n\n\n\n\n// Create another viz parameters for L8 and later missions\n//  Name the variable: viz_L8_fc\n\n\n// Use the following collections and years with viz_fc:\n//  \"LANDSAT/LC08/C02/T1_L2\", 2014\n//  \"LANDSAT/LC08/C02/T1_L2\", 2019\n//  \"LANDSAT/LC09/C02/T1_L2\", 2022\n// Following naming convention as above.\n</code></pre>"},{"location":"lessons/seaside_town_in_the_desert/#make-animation","title":"Make animation","text":"<p>If you followed the naming conventions in the starter script, then the script below should print a gif animation to the Console.  </p> <pre><code>// -----------------------------------------------------------------------------------\n// MAKE ANIMATION\n// -----------------------------------------------------------------------------------\n\n// Combine time series of images that use viz_fc into an image collection;\n\nvar time_series_01 = ee.ImageCollection.fromImages([\nL5_1989,\nL5_1994,\nL5_2000,\nL7_2004,\nL7_2009\n]\n);\n\n// Combine time series of images that use viz_fc_L* into a second image collection;\n\n\nvar time_series_02 = ee.ImageCollection.fromImages(\n[\nL8_2014,\nL8_2019,\nL9_2022\n]\n);\n\n// Define a function to convert an image to an RGB image and copy\n// properties from the original image to the new RGB image.\n\nvar convert_1 = function(img) {\nreturn img.visualize(viz_fc).copyProperties(img, img.propertyNames());\n};\n\nvar convert_2 = function(img) {\nreturn img.visualize(viz_fc_L8).copyProperties(img, img.propertyNames());\n};\n\n// Map over the image collection to convert each image to an RGB visualization\n// using the previously defined visualization function.\n\nvar time_series_rgb = time_series_01.map(convert_1);\nvar time_series2_rgb = time_series_02.map(convert_2);\n\n\n// Merge two image collections\n\nvar time_series_merge = time_series_rgb.merge(time_series2_rgb);  // Check to see if everything worked.\n\nprint(\"Going ok?\", time_series_merge);\n\n// Define arguments for animation function parameters.\n\nvar videoArgs = {\ndimensions: 720,\nframesPerSecond: 0.5,\nregion: roi\n};\n\n// Print thumbnail to the Console.\n\nprint(ui.Thumbnail(time_series_merge, videoArgs));\n</code></pre>"},{"location":"lessons/spectral_signatures/","title":"Spectral signature scavenger hunt","text":""},{"location":"lessons/spectral_signatures/#introduction","title":"Introduction","text":"<p>What is a spectral signature chart and how do these charts serve as guides for making and reading RGB composites?    </p>"},{"location":"lessons/spectral_signatures/#background","title":"Background","text":"<ul> <li>Remote sensing systems </li> <li>Reflectance </li> <li>Electromagnetic spectrum </li> <li>Spectral signatures</li> <li>Sentinel</li> </ul>"},{"location":"lessons/spectral_signatures/#spectral-signature-app","title":"Spectral signature app","text":"<p>We will explore spectral signatures from Sentinel 2 images with this app.      </p>"},{"location":"lessons/spectral_signatures/#start-with-familiar","title":"Start with familiar","text":"<ol> <li>Pan and zoom to playing fields at Middlebury College.</li> <li>Sample two locations in the field encircled by the track.  </li> <li>Use this key to interpret how reflectance changes with wavelength.  </li> <li>Create NIR and SWIR  false color composites and explain what the colors mean.  </li> </ol>"},{"location":"lessons/spectral_signatures/#revisit-muynak","title":"Revisit Muynak","text":"<ol> <li>Type \u201cMuynak, Uzbekistan\u201d into the app\u2019s Search bar.</li> <li>Pan out a little and redraw the scene.</li> <li>Clear chart and samples.</li> <li>Create signature charts for bright green, bright cyan, black, and white pixels.</li> <li>Move between false color and natural color composites.</li> <li>What do you think the different colors represent?  </li> </ol>"},{"location":"lessons/spectral_signatures/#gather-a-library","title":"Gather a library","text":"<p>Please gather a library of spectral signatures for six (6) of the following land cover types:  </p> <ol> <li>Salt flats</li> <li>Water with algae  </li> <li>Clear water</li> <li>Water with silt  </li> <li>Sand  </li> <li>Snow  </li> <li>Coniferous forest  </li> <li>Deciduous forest with leaves on</li> <li>Deciduous forest with leaves off  </li> <li>Cultivated crops   </li> <li>Grassland  </li> <li>Asphalt</li> </ol> <p>For each, please sample two points. So your chart should have two lines total and the lines should be similar. If they aren\u2019t similar, clear the chart and try again. They don\u2019t need to be exactly identical, but they should show similar signatures.</p> <p>Please use this Google form to submit each chart. You can take a break and return to your work if necessary, so use this form to make 6 individual submissions. Please use the lecture time today to make progress on this task and complete your submissions by 5pm on Monday 11/14 or contact me if you would like to request additional time. Thank you.</p>"},{"location":"lessons/spectral_signatures/#app-instructions","title":"App instructions","text":"<ol> <li> <p>Pan map to a place you would like to explore.  </p> <ul> <li>Click, hold, and drag map to pan.  </li> <li>Click + or - to zoom in or out.  </li> </ul> </li> <li> <p>Add a S2 image to the map.</p> <ul> <li>Click DRAW S2 scene at map center.  </li> </ul> </li> <li> <p>Change the date range filter for the image.  </p> <ul> <li>This will let you change the season or year of the image that you add to the map.  </li> <li>Check the Define start and end dates box.  </li> <li>Enter a start and end date to define a time window.   </li> <li>You must use YYYY-MM-DD format.</li> <li>Try to use two month windows.  </li> <li>Click the DRAW S2 scene at map center button to apply your date filter.</li> <li>If the layer panel on the map turns red, try changing the date window and click the DRAW button again.  </li> </ul> </li> <li> <p>Plot spectral signature at one or more sample points for each land cover type.  </p> <ul> <li>Check the Explore spectral signatures box.  </li> <li>Click a location on the map to chart the spectral signature of that location based on date in the S2 image.  </li> <li>You can click more than one location to add multiple signatures to the chart.  </li> <li>Click Clear chart and samples to, well, to do that.  </li> <li>If you get a chart error, clear the chart and try again.  </li> </ul> </li> <li> <p>Download the spectral signature chart as a .png.        </p> <ul> <li>Click the little gray icon in the upper right corner to open the chart in a new browser tab.  </li> <li>Click the Download PNG to download the chart as an image to your Google drive.  </li> </ul> </li> </ol> <p>Thank you to Valerie Pasquarella (@valpasq) for her inspiring Spectral Encounter app. </p>"}]}